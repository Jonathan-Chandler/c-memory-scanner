;;;; chicken.compiler.support.import.scm - GENERATED BY CHICKEN 5.3.0rc4 -*- Scheme -*-

(##sys#with-environment
  (lambda ()
    (##sys#register-compiled-module
      'chicken.compiler.support
      'support
      (scheme#list)
      '((compiler-cleanup-hook
          .
          chicken.compiler.support#compiler-cleanup-hook)
        (bomb . chicken.compiler.support#bomb)
        (collected-debugging-output
          .
          chicken.compiler.support#collected-debugging-output)
        (debugging . chicken.compiler.support#debugging)
        (debugging-chicken . chicken.compiler.support#debugging-chicken)
        (with-debugging-output
          .
          chicken.compiler.support#with-debugging-output)
        (quit-compiling . chicken.compiler.support#quit-compiling)
        (emit-syntax-trace-info
          .
          chicken.compiler.support#emit-syntax-trace-info)
        (check-signature . chicken.compiler.support#check-signature)
        (build-lambda-list . chicken.compiler.support#build-lambda-list)
        (c-ify-string . chicken.compiler.support#c-ify-string)
        (valid-c-identifier? . chicken.compiler.support#valid-c-identifier?)
        (read-expressions . chicken.compiler.support#read-expressions)
        (bytes->words . chicken.compiler.support#bytes->words)
        (words->bytes . chicken.compiler.support#words->bytes)
        (replace-rest-op-with-list-ops
          .
          chicken.compiler.support#replace-rest-op-with-list-ops)
        (check-and-open-input-file
          .
          chicken.compiler.support#check-and-open-input-file)
        (close-checked-input-file
          .
          chicken.compiler.support#close-checked-input-file)
        (fold-inner . chicken.compiler.support#fold-inner)
        (constant? . chicken.compiler.support#constant?)
        (collapsable-literal? . chicken.compiler.support#collapsable-literal?)
        (immediate? . chicken.compiler.support#immediate?)
        (basic-literal? . chicken.compiler.support#basic-literal?)
        (canonicalize-begin-body
          .
          chicken.compiler.support#canonicalize-begin-body)
        (string->expr . chicken.compiler.support#string->expr)
        (llist-length . chicken.compiler.support#llist-length)
        (llist-match? . chicken.compiler.support#llist-match?)
        (expand-profile-lambda
          .
          chicken.compiler.support#expand-profile-lambda)
        (reset-profile-info-vector-name!
          .
          chicken.compiler.support#reset-profile-info-vector-name!)
        (profiling-prelude-exps
          .
          chicken.compiler.support#profiling-prelude-exps)
        (db-get . chicken.compiler.support#db-get)
        (db-get-all . chicken.compiler.support#db-get-all)
        (db-put! . chicken.compiler.support#db-put!)
        (collect! . chicken.compiler.support#collect!)
        (db-get-list . chicken.compiler.support#db-get-list)
        (get-line . chicken.compiler.support#get-line)
        (get-line-2 . chicken.compiler.support#get-line-2)
        (display-line-number-database
          .
          chicken.compiler.support#display-line-number-database)
        (make-node . chicken.compiler.support#make-node)
        (node? . chicken.compiler.support#node?)
        (node-class . chicken.compiler.support#node-class)
        (node-class-set! . chicken.compiler.support#node-class-set!)
        (node-parameters . chicken.compiler.support#node-parameters)
        (node-parameters-set! . chicken.compiler.support#node-parameters-set!)
        (node-subexpressions . chicken.compiler.support#node-subexpressions)
        (node-subexpressions-set!
          .
          chicken.compiler.support#node-subexpressions-set!)
        (varnode . chicken.compiler.support#varnode)
        (qnode . chicken.compiler.support#qnode)
        (build-node-graph . chicken.compiler.support#build-node-graph)
        (build-expression-tree
          .
          chicken.compiler.support#build-expression-tree)
        (fold-boolean . chicken.compiler.support#fold-boolean)
        (inline-lambda-bindings
          .
          chicken.compiler.support#inline-lambda-bindings)
        (tree-copy . chicken.compiler.support#tree-copy)
        (copy-node! . chicken.compiler.support#copy-node!)
        (copy-node . chicken.compiler.support#copy-node)
        (emit-global-inline-file
          .
          chicken.compiler.support#emit-global-inline-file)
        (load-inline-file . chicken.compiler.support#load-inline-file)
        (match-node . chicken.compiler.support#match-node)
        (expression-has-side-effects?
          .
          chicken.compiler.support#expression-has-side-effects?)
        (simple-lambda-node? . chicken.compiler.support#simple-lambda-node?)
        (dump-undefined-globals
          .
          chicken.compiler.support#dump-undefined-globals)
        (dump-defined-globals . chicken.compiler.support#dump-defined-globals)
        (dump-global-refs . chicken.compiler.support#dump-global-refs)
        (make-foreign-callback-stub
          .
          chicken.compiler.support#make-foreign-callback-stub)
        (foreign-callback-stub?
          .
          chicken.compiler.support#foreign-callback-stub?)
        (foreign-callback-stub-id
          .
          chicken.compiler.support#foreign-callback-stub-id)
        (foreign-callback-stub-name
          .
          chicken.compiler.support#foreign-callback-stub-name)
        (foreign-callback-stub-qualifiers
          .
          chicken.compiler.support#foreign-callback-stub-qualifiers)
        (foreign-callback-stub-return-type
          .
          chicken.compiler.support#foreign-callback-stub-return-type)
        (foreign-callback-stub-argument-types
          .
          chicken.compiler.support#foreign-callback-stub-argument-types)
        (register-foreign-callback-stub!
          .
          chicken.compiler.support#register-foreign-callback-stub!)
        (foreign-callback-stubs
          .
          chicken.compiler.support#foreign-callback-stubs)
        (foreign-type-check . chicken.compiler.support#foreign-type-check)
        (foreign-type-convert-result
          .
          chicken.compiler.support#foreign-type-convert-result)
        (foreign-type-convert-argument
          .
          chicken.compiler.support#foreign-type-convert-argument)
        (final-foreign-type . chicken.compiler.support#final-foreign-type)
        (register-foreign-type!
          .
          chicken.compiler.support#register-foreign-type!)
        (lookup-foreign-type . chicken.compiler.support#lookup-foreign-type)
        (clear-foreign-type-table!
          .
          chicken.compiler.support#clear-foreign-type-table!)
        (estimate-foreign-result-size
          .
          chicken.compiler.support#estimate-foreign-result-size)
        (estimate-foreign-result-location-size
          .
          chicken.compiler.support#estimate-foreign-result-location-size)
        (finish-foreign-result
          .
          chicken.compiler.support#finish-foreign-result)
        (foreign-type->scrutiny-type
          .
          chicken.compiler.support#foreign-type->scrutiny-type)
        (scan-used-variables . chicken.compiler.support#scan-used-variables)
        (scan-free-variables . chicken.compiler.support#scan-free-variables)
        (chop-separator . chicken.compiler.support#chop-separator)
        (make-block-variable-literal
          .
          chicken.compiler.support#make-block-variable-literal)
        (block-variable-literal?
          .
          chicken.compiler.support#block-variable-literal?)
        (block-variable-literal-name
          .
          chicken.compiler.support#block-variable-literal-name)
        (make-random-name . chicken.compiler.support#make-random-name)
        (clear-real-name-table!
          .
          chicken.compiler.support#clear-real-name-table!)
        (get-real-name . chicken.compiler.support#get-real-name)
        (set-real-name! . chicken.compiler.support#set-real-name!)
        (real-name . chicken.compiler.support#real-name)
        (real-name2 . chicken.compiler.support#real-name2)
        (display-real-name-table
          .
          chicken.compiler.support#display-real-name-table)
        (source-info->string . chicken.compiler.support#source-info->string)
        (source-info->line . chicken.compiler.support#source-info->line)
        (source-info->name . chicken.compiler.support#source-info->name)
        (call-info . chicken.compiler.support#call-info)
        (constant-form-eval . chicken.compiler.support#constant-form-eval)
        (maybe-constant-fold-call
          .
          chicken.compiler.support#maybe-constant-fold-call)
        (dump-nodes . chicken.compiler.support#dump-nodes)
        (read-info-hook . chicken.compiler.support#read-info-hook)
        (read/source-info . chicken.compiler.support#read/source-info)
        (big-fixnum? . chicken.compiler.support#big-fixnum?)
        (small-bignum? . chicken.compiler.support#small-bignum?)
        (hide-variable . chicken.compiler.support#hide-variable)
        (export-variable . chicken.compiler.support#export-variable)
        (variable-hidden? . chicken.compiler.support#variable-hidden?)
        (variable-visible? . chicken.compiler.support#variable-visible?)
        (mark-variable . chicken.compiler.support#mark-variable)
        (variable-mark . chicken.compiler.support#variable-mark)
        (intrinsic? . chicken.compiler.support#intrinsic?)
        (predicate? . chicken.compiler.support#predicate?)
        (foldable? . chicken.compiler.support#foldable?)
        (load-identifier-database
          .
          chicken.compiler.support#load-identifier-database)
        (print-version . chicken.compiler.support#print-version)
        (print-usage . chicken.compiler.support#print-usage)
        (print-debug-options . chicken.compiler.support#print-debug-options)
        (number-type . chicken.compiler.support#number-type)
        (unsafe . chicken.compiler.support#unsafe))
      (scheme#list)
      (scheme#list))))

;; END OF FILE
