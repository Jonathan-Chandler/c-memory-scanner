;;;; chicken.memory.representation.import.scm - GENERATED BY CHICKEN 5.3.0rc4 -*- Scheme -*-

(##sys#with-environment
  (lambda ()
    (##sys#register-compiled-module
      'chicken.memory.representation
      'lolevel
      (scheme#list)
      '((block-ref . chicken.memory.representation#block-ref)
        (block-set! . chicken.memory.representation#block-set!)
        (extend-procedure . chicken.memory.representation#extend-procedure)
        (extended-procedure?
          .
          chicken.memory.representation#extended-procedure?)
        (make-record-instance
          .
          chicken.memory.representation#make-record-instance)
        (mutate-procedure! . chicken.memory.representation#mutate-procedure!)
        (number-of-bytes . chicken.memory.representation#number-of-bytes)
        (number-of-slots . chicken.memory.representation#number-of-slots)
        (object-become! . chicken.memory.representation#object-become!)
        (object-copy . chicken.memory.representation#object-copy)
        (procedure-data . chicken.memory.representation#procedure-data)
        (record->vector . chicken.memory.representation#record->vector)
        (record-instance-length
          .
          chicken.memory.representation#record-instance-length)
        (record-instance-slot
          .
          chicken.memory.representation#record-instance-slot)
        (record-instance-slot-set!
          .
          chicken.memory.representation#record-instance-slot-set!)
        (record-instance-type
          .
          chicken.memory.representation#record-instance-type)
        (record-instance? . chicken.memory.representation#record-instance?)
        (set-procedure-data!
          .
          chicken.memory.representation#set-procedure-data!)
        (vector-like? . chicken.memory.representation#vector-like?))
      (scheme#list)
      (scheme#list))))

;; END OF FILE
