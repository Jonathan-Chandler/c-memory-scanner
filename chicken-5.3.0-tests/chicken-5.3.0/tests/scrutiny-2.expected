;; numbers replaced with XXX by redact-gensyms.scm
;; prefixes: (tmp g scm:)

Note: Predicate is always true
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#pair? p)

  The predicate will always return true.

  Procedure `pair?' from module `scheme' is a predicate for:

    pair

  The given argument has this type:

    (pair fixnum fixnum)

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(pair? p)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#pair? l)

  The predicate will always return false.

  Procedure `pair?' from module `scheme' is a predicate for:

    pair

  The given argument has this type:

    null

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#pair? n)

  The predicate will always return false.

  Procedure `pair?' from module `scheme' is a predicate for:

    pair

  The given argument has this type:

    null

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#pair? i)

  The predicate will always return false.

  Procedure `pair?' from module `scheme' is a predicate for:

    pair

  The given argument has this type:

    fixnum

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#pair? f)

  The predicate will always return false.

  Procedure `pair?' from module `scheme' is a predicate for:

    pair

  The given argument has this type:

    float

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true

Note: Predicate is always true
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#list? l)

  The predicate will always return true.

  Procedure `list?' from module `scheme' is a predicate for:

    list

  The given argument has this type:

    null

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(list? l)))

  Test condition has always true value of type:

    true

Note: Predicate is always true
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#list? n)

  The predicate will always return true.

  Procedure `list?' from module `scheme' is a predicate for:

    list

  The given argument has this type:

    null

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(list? n)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#list? p)

  The predicate will always return false.

  Procedure `list?' from module `scheme' is a predicate for:

    list

  The given argument has this type:

    (pair fixnum fixnum)

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#list? i)

  The predicate will always return false.

  Procedure `list?' from module `scheme' is a predicate for:

    list

  The given argument has this type:

    fixnum

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#list? f)

  The predicate will always return false.

  Procedure `list?' from module `scheme' is a predicate for:

    list

  The given argument has this type:

    float

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true

Note: Predicate is always true
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#null? n)

  The predicate will always return true.

  Procedure `null?' from module `scheme' is a predicate for:

    null

  The given argument has this type:

    null

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(null? n)))

  Test condition has always true value of type:

    true

Note: Predicate is always true
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#null? l)

  The predicate will always return true.

  Procedure `null?' from module `scheme' is a predicate for:

    null

  The given argument has this type:

    null

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(null? l)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#null? p)

  The predicate will always return false.

  Procedure `null?' from module `scheme' is a predicate for:

    null

  The given argument has this type:

    (pair fixnum fixnum)

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#null? i)

  The predicate will always return false.

  Procedure `null?' from module `scheme' is a predicate for:

    null

  The given argument has this type:

    fixnum

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#null? f)

  The predicate will always return false.

  Procedure `null?' from module `scheme' is a predicate for:

    null

  The given argument has this type:

    float

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true

Note: Predicate is always true
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (chicken.base#fixnum? i)

  The predicate will always return true.

  Procedure `fixnum?' from module `chicken.base' is a predicate for:

    fixnum

  The given argument has this type:

    fixnum

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(fixnum? i)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (chicken.base#fixnum? f)

  The predicate will always return false.

  Procedure `fixnum?' from module `chicken.base' is a predicate for:

    fixnum

  The given argument has this type:

    float

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (chicken.base#fixnum? u)

  The predicate will always return false.

  Procedure `fixnum?' from module `chicken.base' is a predicate for:

    fixnum

  The given argument has this type:

    float

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true

Note: Predicate is always true
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (chicken.base#flonum? f)

  The predicate will always return true.

  Procedure `flonum?' from module `chicken.base' is a predicate for:

    float

  The given argument has this type:

    float

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(flonum? f)))

  Test condition has always true value of type:

    true

Note: Predicate is always true
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (chicken.base#flonum? u)

  The predicate will always return true.

  Procedure `flonum?' from module `chicken.base' is a predicate for:

    float

  The given argument has this type:

    float

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(flonum? u)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (chicken.base#flonum? i)

  The predicate will always return false.

  Procedure `flonum?' from module `chicken.base' is a predicate for:

    float

  The given argument has this type:

    fixnum

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true

Note: Predicate is always true
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#number? i)

  The predicate will always return true.

  Procedure `number?' from module `scheme' is a predicate for:

    number

  The given argument has this type:

    fixnum

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(number? i)))

  Test condition has always true value of type:

    true

Note: Predicate is always true
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#number? f)

  The predicate will always return true.

  Procedure `number?' from module `scheme' is a predicate for:

    number

  The given argument has this type:

    float

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(number? f)))

  Test condition has always true value of type:

    true

Note: Predicate is always true
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#number? u)

  The predicate will always return true.

  Procedure `number?' from module `scheme' is a predicate for:

    number

  The given argument has this type:

    float

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(number? u)))

  Test condition has always true value of type:

    true

Note: Predicate is always false
  In file `scrutiny-tests-2.scm:XXX',
  At the toplevel,
  In procedure call:

    (scheme#number? n)

  The predicate will always return false.

  Procedure `number?' from module `scheme' is a predicate for:

    number

  The given argument has this type:

    null

Note: Test is always true
  At the toplevel,
  In conditional expression:

    (if tmp
      tmp
      (##sys#error "(scrutiny-tests-2.scm:XXX) assertion failed" '(not ...)))

  Test condition has always true value of type:

    true
