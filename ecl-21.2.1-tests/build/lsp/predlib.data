static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)9512, (cl_index)9512,
        (ecl_base_char*)
"ext::constantly-t ext::constantly-nil 0 0 si::*subtypep-cache* si::*upgraded-arr"
 "ay-element-type-cache* si::subtypep-clear-cache \"Symbol ~s is a declaration spec"
 "ifier and cannot be used to name a new type\" si::create-type-name si::deftype-fo"
 "rm si::deftype-definition (&optional &rest &key &allow-other-keys &aux &whole &e"
 "nvironment &body) #1='* (&key . #2=(&optional)) #2# (:compile-toplevel :load-top"
 "level :execute) deftype si::index #3=(or rational float) #4=(integer * *) #5=(in"
 "teger 0 *) si::proper-list #6=(or (array base-char (*)) (array character (*))) #"
 "7=(array base-char (*)) #8=(array character (*)) #9=(array bit (*)) #10=(simple-"
 "array t (*)) #11=(or (simple-array base-char (*)) (simple-array character (*))) "
 "#12=(simple-array base-char (*)) #13=(simple-array bit (*)) si::simple-array-p s"
 "i::complex-array-p si::complex-single-float-p si::complex-double-float-p si::com"
 "plex-long-float-p si::+known-typep-predicates+ si::type-predicate si::+upgraded-"
 "array-element-types+ (integer 0 127) #14=(nil base-char character bit ext::byte8"
 " ext::integer8 ext::byte16 ext::integer16 ext::byte32 ext::integer32 ext::byte64"
 " ext::integer64 single-float double-float long-float si::complex-single-float si"
 "::complex-double-float si::complex-long-float t) \"~S is not a valid part type fo"
 "r a complex.\" \"~S is not a valid type specifier.\" \"~S does not describe array di"
 "mensions.\" 0 0 0 0 si::normalize-type si::expand-deftype \"Cannot coerce ~S to ty"
 "pe ~S.\" 0 0 (vector simple-vector simple-base-string simple-string base-string s"
 "tring bit-vector simple-bit-vector) (short-float single-float double-float long-"
 "float float) si::*save-types-database* si::*highest-type-tag* si::*member-types*"
 " si::*intervals-mask* si::*elementary-types* si::update-types si::register-membe"
 "r-type si::number-member-type si::+canonical-type-failure+ (or list symbol) \"Wro"
 "ng array type designator ~S.\" \"Wrong rank size array type ~S.\" (* * * * * * * * "
 "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * "
 "* * * * * * * * * * * * * * * *) \"Wrong dimension size in array type ~S.\" si::ar"
 "ray-type-<= (ext::complex-array . #15=(simple-array)) #15# si::array-type-p si::"
 "bounds-<= si::bounds-< si::register-cons-type si::+built-in-types+ (integer sing"
 "le-float double-float ratio long-float) 0 0 0 si::function-type-p si::values-typ"
 "e-p si::canonical-type si::safe-canonical-type si::type= 0 0 0 0 0 si::dm-too-fe"
 "w-arguments si::find-declarations si::expand-set-documentation si::dm-too-many-a"
 "rguments 0 0 0 0 0 0 clos::classp 0 si::make-seq-iterator si::seq-iterator-next "
 "si::seq-iterator-ref 0 0 0 0 0 0 0 0 0 si::register-function-type si::register-v"
 "alues-type 0 0 \"SYSTEM\" (deftype boolean nil '#16=(member nil t)) #16# (deftype "
 "si::index nil '#17=(integer 0 536870911)) #17# (deftype fixnum nil '#18=(integer"
 " -536870912 536870911)) #18# (deftype bignum nil '#19=(or (integer * (-536870912"
 ")) (integer (536870911) *))) #19# (deftype ext::byte8 nil '#20=(integer 0 255)) "
 "#20# (deftype ext::integer8 nil '#21=(integer -128 127)) #21# (deftype ext::byte"
 "16 nil '#22=(integer 0 65535)) #22# (deftype ext::integer16 nil '#23=(integer -3"
 "2768 32767)) #23# (deftype ext::byte32 nil '#24=(integer 0 4294967295)) #24# (de"
 "ftype ext::integer32 nil '#25=(integer -2147483648 2147483647)) #25# (deftype ex"
 "t::byte64 nil '#26=(integer 0 18446744073709551615)) #26# (deftype ext::integer6"
 "4 nil '#27=(integer -9223372036854775808 9223372036854775807)) #27# (deftype ext"
 "::cl-fixnum nil '#28=(signed-byte 32)) #28# (deftype ext::cl-index nil '#29=(uns"
 "igned-byte 32)) #29# (deftype real (&optional (si::start '* si::start-p) (si::en"
 "d '*)) (if si::start-p (let (si::rat-start si::real-start si::rat-end si::real-e"
 "nd) (cond ((consp si::start) (setf si::start (first si::start) si::rat-start (li"
 "st (rational si::start)) si::real-start (list (float si::start)))) ((numberp si:"
 ":start) (setf si::rat-start (rational si::start) si::real-start (float si::start"
 "))) (t (setf si::rat-start si::start si::real-start si::start))) (cond ((consp s"
 "i::end) (setf si::end (first si::end) si::rat-end (list (rational si::end)) si::"
 "real-end (list (float si::end)))) ((numberp si::end) (setf si::rat-end (rational"
 " si::end) si::real-end (float si::end))) (t (setf si::rat-end si::end si::real-e"
 "nd si::end))) `(or (rational ,si::rat-start ,si::rat-end) (float ,si::real-start"
 " ,si::real-end))) '#3#)) (deftype short-float (&rest si::args) (if si::args `(si"
 "ngle-float ,@si::args) 'single-float)) (deftype bit nil '#30=(integer 0 1)) #30#"
 " (deftype mod (si::n) `(integer 0 ,(1- si::n))) (deftype signed-byte (&optional "
 "(si::s #1#)) (if (or (null si::s) (eq si::s '*)) '#4# `(integer ,(- (expt 2 (1- "
 "si::s))) ,(1- (expt 2 (1- si::s)))))) (deftype unsigned-byte (&optional (si::s #"
 "1#)) (if (or (null si::s) (eq si::s '*)) '#5# `(integer 0 ,(1- (expt 2 si::s))))"
 ") (deftype null nil '#31=(member nil)) #31# (deftype sequence nil '#32=(or cons "
 "null (array * (*)))) #32# (deftype list nil '#33=(or cons null)) #33# (deftype s"
 "i::proper-list nil '#34=(or (cons t si::proper-list) null)) #34# (deftype si::pr"
 "operty-list nil '#35=(or (cons t (cons t si::property-list)) null)) #35# (deftyp"
 "e atom nil '#36=(not cons)) #36# (deftype vector (&optional (si::element-type '*"
 ") (si::size '*)) `(array ,si::element-type (,si::size))) (deftype extended-char "
 "nil '#37=(and character (not base-char))) #37# (deftype string (&optional (si::s"
 "ize #1#)) (if (eq si::size '*) '#6# `(or (array base-char (,si::size)) (array ch"
 "aracter (,si::size))))) (deftype base-string (&optional (si::size '*)) (if (eq s"
 "i::size '*) '#7# `(array base-char (,si::size)))) (deftype ext::extended-string "
 "(&optional (si::size '*)) (if (eq si::size '*) '#8# `(array character (,si::size"
 ")))) (deftype bit-vector (&optional (si::size '*)) (if (eq si::size '*) '#9# `(a"
 "rray bit (,si::size)))) (deftype simple-vector (&optional (si::size '*)) (if (eq"
 " si::size '*) '#10# `(simple-array t (,si::size)))) (deftype simple-string (&opt"
 "ional (si::size #1#)) (if si::size `(or (simple-array base-char (,si::size)) (si"
 "mple-array character (,si::size))) '#11#)) (deftype simple-base-string (&optiona"
 "l (si::size #1#)) (if si::size `(simple-array base-char (,si::size)) '#12#)) (de"
 "ftype simple-bit-vector (&optional (si::size #1#)) (if si::size `(simple-array b"
 "it (,si::size)) '#13#)) (deftype ext::array-index nil '#38=(integer 0 536870910)"
 ") #38# (deftype ext::virtual-stream nil '#39=(or string-stream gray::fundamental"
 "-stream)) #39# ((array . arrayp) (atom . atom) (base-char . si::base-char-p) (ba"
 "se-string . si::base-string-p) (bit-vector . bit-vector-p) (character . characte"
 "rp) (compiled-function . compiled-function-p) (complex . complexp) (si::complex-"
 "single-float . si::complex-single-float-p) (si::complex-double-float . si::compl"
 "ex-double-float-p) (si::complex-long-float . si::complex-long-float-p) (ext::com"
 "plex-array . si::complex-array-p) (cons . consp) (double-float . si::double-floa"
 "t-p) (float . floatp) (si::foreign-data . si::foreign-data-p) (function . functi"
 "onp) (hash-table . hash-table-p) (integer . integerp) (fixnum . ext::fixnump) (k"
 "eyword . keywordp) (list . listp) (logical-pathname . si::logical-pathname-p) (l"
 "ong-float . si::long-float-p) (nil . ext::constantly-nil) (null . null) (number "
 ". numberp) (package . packagep) (ratio . si::ratiop) (random-state . random-stat"
 "e-p) (rational . rationalp) (pathname . pathnamep) (readtable . readtablep) (rea"
 "l . realp) (short-float . si::short-float-p) (simple-array . si::simple-array-p)"
 " (simple-string . simple-string-p) (simple-vector . simple-vector-p) (single-flo"
 "at . si::single-float-p) (stream . streamp) (string . stringp) (structure . si::"
 "structurep) (symbol . symbolp) (t . ext::constantly-t) (vector . vectorp)) #14# "
 "((symbol) (keyword nil symbol) (package) (compiled-function) #'(or compiled-func"
 "tion generic-function) (integer (integer * *)) (fixnum (integer -536870912 53687"
 "0911)) (bignum (or (integer * (-536870912)) (integer (536870911) *))) (single-fl"
 "oat (single-float * *)) (double-float (double-float * *)) (long-float (long-floa"
 "t * *)) (ratio (ratio * *)) (rational (or integer ratio)) (float (or single-floa"
 "t double-float long-float)) (real (or rational float)) (si::complex-single-float"
 " (complex single-float)) (si::complex-double-float (complex double-float)) (si::"
 "complex-long-float (complex long-float)) (si::complex-float (complex float)) (co"
 "mplex (complex *)) (number (or real complex)) (character) (base-char nil charact"
 "er) (standard-char nil base-char) (cons) (null (member nil)) (list (or cons (mem"
 "ber nil))) (array (array * *)) (simple-array (simple-array * *)) (simple-vector "
 "(simple-array t (*))) (simple-bit-vector (simple-array bit (*))) (vector (array "
 "* (*))) (string (array character (*))) (base-string (array base-char (*))) (simp"
 "le-string (simple-array character (*))) (simple-base-string (simple-array base-c"
 "har (*))) (bit-vector (array bit (*))) (sequence (or cons (member nil) (array * "
 "(*)))) (hash-table) (pathname) (logical-pathname nil pathname) (broadcast-stream"
 ") (concatenated-stream) (echo-stream) (file-stream) (string-stream) (synonym-str"
 "eam) (two-way-stream) (ext::sequence-stream) (ext::ansi-stream (or broadcast-str"
 "eam concatenated-stream echo-stream file-stream string-stream synonym-stream two"
 "-way-stream ext::sequence-stream)) (stream (or ext::ansi-stream gray::fundamenta"
 "l-stream)) (ext::virtual-stream (or string-stream gray::fundamental-stream)) (re"
 "adtable) (mp::process) (mp::lock) (mp::rwlock) (mp::condition-variable) (mp::sem"
 "aphore) (mp::barrier) (mp::mailbox) (si::foreign-data) (si::code-block))" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
