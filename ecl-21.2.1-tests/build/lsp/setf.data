static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)1894, (cl_index)1894,
        (ecl_base_char*)
"(:compile-toplevel :load-toplevel :execute) defsetf define-setf-expander \"Cannot"
 " get the setf-method of ~S.\" get-setf-expansion 'compiler-macro \"Can't get the s"
 "etf-method of ~S.\" 0 0 \"~S is an illegal SETF form.\" setf (lambda (si::x si::y) "
 "(list (cons (mapcar #'list (first si::y) (second si::y)) (first si::x)) (cons (t"
 "hird si::y) (second si::x)) (cons (fourth si::y) (third si::x)) (cons (fifth si:"
 ":y) (fourth si::x)))) (si::place) si::place (:initial-value '#1=(nil nil nil nil"
 ")) si::with-setf-expansions \"~S is an illegal PSETF form (odd number of argument"
 "s).\" :initial-value #1# psetf (si::stores si::access-forms) si::stores 'multiple"
 "-value-bind (car si::stores) (car si::access-forms) ((cdr si::stores) (cdr si::a"
 "ccess-forms)) si::with-expansion-setter shiftf (nil) rotatef \"In the definition "
 "of ~S: &REST variable ~S should be a symbol.\" \"Only one variable is allowed afte"
 "r &REST, not ~S\" \"Illegal in a DEFINE-MODIFY-MACRO lambda list: ~S\" \"lambda list"
 " may only contain symbols and lists, not ~S\" si::env si::%reference (declare (no"
 "tinline mapcar)) (si::vars si::vals si::stores si::setter si::getter) (get-setf-"
 "expansion si::%reference si::env) si::all-vars #'(lambda (si::v) (list (gensym) "
 "si::v)) (symbolp si::getter) (si::getter (mapcar #'car si::all-vars)) ((car si::"
 "stores) `(let* ,si::all-vars (declare (:read-only ,@(mapcar #'first si::all-vars"
 "))) ,si::setter)) ((si::d si::vars (cdr si::d)) (si::v si::vals (cdr si::v)) (si"
 "::let-list nil (cons (list (car si::d) (car si::v)) si::let-list))) (null si::d)"
 " si::let-list (append si::all-vars si::let-list) `(let* ,(nreverse si::let-list)"
 " (declare (:read-only ,@(mapcar #'first si::all-vars) ,@si::vars)) ,si::setter) "
 "define-modify-macro :read-only si::flag remf incf decf push pushnew pop 0 si::dm"
 "-too-few-arguments si::find-declarations si::expand-set-documentation 0 0 0 0 si"
 "::dm-too-many-arguments 0 0 0 0 0 0 0 0 0 0 0 \"SYSTEM\"" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
