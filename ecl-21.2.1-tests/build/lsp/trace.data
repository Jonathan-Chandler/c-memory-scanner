static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)3103, (cl_index)3103,
        (ecl_base_char*)
"si::*trace-level* si::*trace-max-indent* si::trace* trace si::untrace* untrace s"
 "i::*inside-trace* \"Not a valid argument to TRACE: ~S\" :break :break-after :step "
 ":cond :cond-before :cond-after :print-after \"Meaningless TRACE keyword: ~S\" \"Par"
 "ameter missing\" \"The function ~S is not defined.\" \"Unable to trace special form "
 "~S.\" \"Unable to trace macro ~S.\" \"The function ~S is already traced. Statement h"
 "as no effect.\" (&rest si::args) (values (si::*trace-level* (1+ si::*trace-level*"
 "))) si::args ((si::*inside-trace* t)) si::trace-print 'si::enter (si::*inside-tr"
 "ace*) \"tracing ~S\" 'ext::exit \"after tracing ~S\" (values-list values) si::trace-"
 "one si::enter \"|   \" \"|    \" \"~V,,,' A\" \"|\" \"~D> (~S~{ ~S~})~%\" \"<~D (~S~{ ~S~})"
 "~%\" \"~0,4@T\\\\\\\\ ~{ ~S~}~%\" si::delete-from-trace-list si::add-to-trace-list \"The"
 " function ~S was not traced.\" \"The function ~S was traced, but redefined.\" si::u"
 "ntrace-one si::*step-form* si::*step-tag* si::*step-functions* si::step-commands"
 " si::step* step si::steppable-function si::*tpl-level* \"~VT\" :quiet :commands si"
 "::break-commands si::*tpl-commands* :broken-at :prompt-hook si::stepper si::step"
 "-next si::step-skip si::step-print si::step-quit 0 0 0 0 0 0 si::make-seq-iterat"
 "or si::seq-iterator-ref si::seq-iterator-next 0 0 0 0 si::dm-too-few-arguments s"
 "i::dm-too-many-arguments 0 0 0 si::tpl 0 0 0 0 \"SYSTEM\" (\"Stepper commands\" ((:n"
 "ewline) (si::step-next) :constant \"newline         Advance to the next form\" \"ne"
 "wline                                         [Stepper command]~@\n       ~@\n    "
 "   Step to next form.~%\") ((:s :skip) si::step-skip nil \":s(kip)         Skip cu"
 "rrent form or until function\" \":skip &optional arg                             ["
 "Stepper command]~@\n       :s &optional arg                                [Abbre"
 "viation]~@\n       ~@\n       Continue evaluation without stepping.  Without argum"
 "ent, resume~@\n       stepping after the current form.  With numeric argument (n)"
 ",~@\n       resume stepping at the n-th level above.  With function name, resume~"
 "@\n       when given function is called.~%\") ((:pr :print) (si::step-print) :cons"
 "tant \":pr(int)        Pretty print current form\" \":print                        "
 "                  [Stepper command]~@\n       :pr                                "
 "             [Abbreviation]~@\n       ~@\n       Pretty print current form.~%\") (("
 ":form) si::*step-form* :constant \":form           Current form\" \":form          "
 "                                 [Stepper command]~@\n       ~@\n       Return the"
 " current form.  Nothing is done, but the current form~@\n       is returned as th"
 "e value of this command.  As a consequence,~@\n       it is printed by the top le"
 "vel in the usual way and saved in~@\n       the variable *.  The main purpose of "
 "this command is to allow~@\n       the current form to be examined further by acc"
 "essing *.~%\") ((:x :exit) (si::step-quit) :constant \":x or :exit     Finish eval"
 "uation and exit stepper\" \":exit                                           [Stepp"
 "er command]~@\n       :x                                              [Abbreviati"
 "on]~@\n       ~@\n       Finish evaluation without stepping.~%\"))" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
