static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)3798, (cl_index)3798,
        (ecl_base_char*)
"(:export) (:compile-toplevel :load-toplevel :execute) ffi::def-constant ffi::*ff"
 "i-types* ffi::def-foreign-type (nil t) ffi::def-type ffi::%convert-to-ffi-type f"
 "fi::%align-data \"Incomplete or unknown foreign type ~A\" \"~A is not a valid forei"
 "gn type identifier\" \"Incomplete foreign type: ~S\" \"~A does not denote a foreign "
 "type\" ffi::size-of-foreign-type \"~A is not a valid array dimension size\" ffi::al"
 "locate-foreign-object ffi::free-foreign-object :separator-string \"#\" (:separator"
 "-string) \"Not a valid argument to DEF-ENUM~%~a\" ffi::def-enum \"Not a valid DEF-S"
 "TRUCT slot ~A\" ffi::def-struct \"~A is not a foreign STRUCT or UNION type\" ffi::s"
 "lot-position \"~A is not a field of the type ~A\" ffi::get-slot-value (setf ffi::g"
 "et-slot-value) ffi::get-slot-pointer ffi::def-array-pointer \"Out of bounds when "
 "accessing array ~A.\" ffi::deref-array (setf ffi::deref-array) \"Unknown foreign p"
 "rimitive type: ~A\" ffi::%foreign-data-set ffi::%foreign-data-ref \"Not a valid DE"
 "F-UNION slot ~A\" ffi::def-union ffi::pointer-address \"Cannot dereference pointer"
 " to foreign data, ~A\" ffi::deref-pointer (setf ffi::deref-pointer) ffi::make-nul"
 "l-pointer ffi::make-pointer ffi::null-char-p \"~a cannot be coerced to type CHARA"
 "CTER\" ffi::ensure-char-character \"~a cannot be coerced to type INTEGER\" ffi::ens"
 "ure-char-integer ffi::ensure-char-storable (* :unsigned-char) ffi::char-array-to"
 "-pointer ffi::convert-from-cstring ffi::convert-to-cstring ffi::free-cstring ffi"
 "::with-cstring ffi::with-cstrings ffi::foreign-string-length \"~A is not a valid "
 "string length\" ffi::convert-from-foreign-string ffi::convert-to-foreign-string f"
 "fi::allocate-foreign-string ffi::with-foreign-string ffi::with-foreign-strings f"
 "fi::with-foreign-object ffi::with-foreign-objects \"Arguments missing in WITH-CAS"
 "T-POINTER\" ffi::with-cast-pointer ffi::lisp-to-c-name \"Unsupported argument type"
 ": ~A\" ffi::%convert-to-arg-type ffi::%convert-to-return-type \"~a(~a)\" \"#0,#1,#2,"
 "#3,#4,#5,#6,#7,#8,#9,#a,#b,#c,#d,#e,#f,#g,#h,#i,#j,#k,#l,#m,#n,#o,#p,#q,#r,#s,#t"
 ",#u,#v,#w,#x,#y,#z\" :returning :module :call (:call :module :returning) ffi::c-f"
 "un (:pointer-void 0) ffi::def-lib-function (:call :returning :module) (:void . #"
 "1=(:cstring)) #1# (:one-liner t :side-effects t) \"FFI can only handle C function"
 "s with up to 36 arguments\" ffi::def-function (* . #2=(:array)) #2# \"ecl_make_for"
 "eign_data(@~S, ~A, &~A)\" (:side-effects t :one-liner t) 'ffi::ffi-foreign-var ff"
 "i::def-foreign-var (\"lib\") (nil) (pathname string list) ffi::find-foreign-librar"
 "y ffi::+loaded-libraries+ :dll \"COMPILER\" \"-l\" \"*LD-FLAGS*\" \" \" \"*LD-BUNDLE-FLAG"
 "S*\" \"*LD-SHARED-FLAGS*\" ffi::do-load-foreign-library :supporting-libraries :forc"
 "e-load :system-library (:system-library :force-load :supporting-libraries :modul"
 "e) (:compile-toplevel) (:bytecodes nil) ffi::load-foreign-library 0 0 (cons (mem"
 "ber * array)) \"DEFCALLBACK cannot be used in interpreted forms when DFFI is disa"
 "bled.\" ffi::defcallback \"There is no callback with name ~a\" ffi::callback \"The s"
 "pecial form clines cannot be used in the interpreter: ~A\" ffi::clines :side-effe"
 "cts :one-liner (:one-liner :side-effects) \"The special form c-inline cannot be u"
 "sed in the interpreter: ~S\" ffi::c-inline (error \"The special form c-progn canno"
 "t be used in the interpreter.\") ffi::c-progn 0 c::def-inline :always ffi::definl"
 "ine (:execute) ffi::defla (:one-liner t) ffi::defcbody :no-interrupts (:no-inter"
 "rupts) \"ecl_disable_interrupts();@(return)=\" \";ecl_enable_interrupts();\" ffi::de"
 "fentry 0 si::dm-too-few-arguments si::search-keyword si::check-keyword 0 si::dm-"
 "too-many-arguments 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
 " 0 0 0 0 :length :null-terminated-p 0 (* :char) 0 :unsigned 0 0 0 0 0 0 0 0 0 0 "
 "0 0 :drive-letters :types 0 si::make-seq-iterator si::seq-iterator-ref si::seq-i"
 "terator-next 0 0 0 0 0 0 0 0 0 0 \"FFI\"" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
