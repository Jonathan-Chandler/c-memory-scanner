
#ifdef ECL_DYNAMIC_VV
static cl_object *VV;
#else
static cl_object VV[VM];
#endif

#ifdef __cplusplus
extern "C" {
#endif
static cl_object L1unbound_lexical_function(cl_narg, ...);
static cl_object LC2with_augmented_environment(cl_object , cl_object );
static cl_object L3with_augmented_environment_internal(cl_object , cl_object , cl_object );
static cl_object L4environment_macro(cl_object , cl_object );
static cl_object LC5with_new_definition_in_environment(cl_object , cl_object );
static cl_object L6convert_macro_to_lambda(cl_narg, cl_object , cl_object , ...);
static cl_object LC7walker_environment_bind(cl_object , cl_object );
static cl_object L8env_lock(cl_object );
static cl_object L9walker_environment_bind_1(cl_narg, cl_object , ...);
#define L9walker_environment_bind_1keys (&VV[109])
static cl_object L10env_walk_function(cl_object );
static cl_object L11env_walk_form(cl_object );
static cl_object L12env_declarations(cl_object );
static cl_object L13env_lexical_variables(cl_object );
static cl_object L14note_declaration(cl_object , cl_object );
static cl_object L15note_lexical_binding(cl_object , cl_object );
static cl_object L16variable_lexical_p(cl_object , cl_object );
static cl_object L17variable_symbol_macro_p(cl_object , cl_object );
static cl_object L18variable_declaration(cl_object , cl_object , cl_object );
static cl_object L19variable_special_p(cl_object , cl_object );
static cl_object L20variable_globally_special_p(cl_object );
static cl_object LC21get_walker_template_internal(cl_object , cl_object );
static cl_object LC22define_walker_template(cl_object , cl_object );
static cl_object L23get_walker_template(cl_object );
static cl_object L24get_implementation_dependent_walker_template(cl_object );
static cl_object L25macroexpand_all(cl_narg, cl_object , ...);
static cl_object L27walk_form(cl_narg, cl_object , ...);
static cl_object LC26__lambda93(cl_object , cl_object , cl_object );
static cl_object L28walk_form_internal(cl_object volatile , cl_object volatile , cl_object volatile );
static cl_object L29walk_template(cl_object , cl_object , cl_object , cl_object );
static cl_object L30walk_template_handle_repeat(cl_object , cl_object , cl_object , cl_object , cl_object );
static cl_object L31walk_template_handle_repeat_1(cl_object , cl_object , cl_object , cl_object , cl_object , cl_object );
static cl_object L32walk_repeat_eval(cl_object , cl_object );
static cl_object L33recons(cl_object , cl_object , cl_object );
static cl_object L34relist(cl_narg, cl_object , ...);
static cl_object L35relist_(cl_narg, cl_object , ...);
static cl_object L36relist_internal(cl_object , cl_object , cl_object );
static cl_object L37walk_declarations(cl_narg, cl_object , cl_object , cl_object , ...);
static cl_object L38walk_unexpected_declare(cl_object , cl_object , cl_object );
static cl_object L39walk_arglist(cl_narg, cl_object , cl_object , cl_object , ...);
static cl_object L40walk_let(cl_object , cl_object , cl_object );
static cl_object L41walk_let_(cl_object , cl_object , cl_object );
static cl_object L42walk_prog(cl_object , cl_object , cl_object );
static cl_object L43walk_prog_(cl_object , cl_object , cl_object );
static cl_object L44walk_do(cl_object , cl_object , cl_object );
static cl_object L45walk_do_(cl_object , cl_object , cl_object );
static cl_object L46walk_let_let_(cl_object , cl_object , cl_object , cl_object );
static cl_object L47walk_locally(cl_object , cl_object , cl_object );
static cl_object L49walk_prog_prog_(cl_object , cl_object , cl_object , cl_object );
static cl_object LC48__lambda104(cl_narg, cl_object , cl_object , ...);
static cl_object L50walk_do_do_(cl_object , cl_object , cl_object , cl_object );
static cl_object L51walk_dotimes_dolist(cl_object , cl_object , cl_object );
static cl_object L55walk_multiple_value_setq(cl_object , cl_object , cl_object );
static cl_object LC52__lambda105(cl_narg, cl_object , ...);
static cl_object LC53__lambda111(cl_object );
static cl_object LC54__lambda121(cl_object , cl_object );
static cl_object L57walk_multiple_value_bind(cl_object , cl_object , cl_object );
static cl_object LC56__lambda126(cl_narg, cl_object , cl_object , ...);
static cl_object L58walk_bindings_1(cl_object , cl_object , cl_object , cl_object , cl_object );
static cl_object L59walk_bindings_2(cl_object , cl_object , cl_object , cl_object );
static cl_object L60walk_lambda(cl_object , cl_object , cl_object );
static cl_object L61walk_named_lambda(cl_object , cl_object , cl_object );
static cl_object L62walk_setq(cl_object , cl_object , cl_object );
static cl_object L64walk_symbol_macrolet(cl_object , cl_object , cl_object );
static cl_object LC63__lambda144(cl_object );
static cl_object L65walk_tagbody(cl_object , cl_object , cl_object );
static cl_object L66walk_tagbody_1(cl_object , cl_object , cl_object );
static cl_object L67walk_compiler_let(cl_object , cl_object , cl_object );
static cl_object L69walk_macrolet(cl_object , cl_object , cl_object );
static cl_object LC68walk_definitions(volatile cl_object  *, cl_object );
static cl_object L71walk_flet(cl_object , cl_object , cl_object );
static cl_object LC70walk_definitions(volatile cl_object  *, cl_object );
static cl_object L73walk_labels(cl_object , cl_object , cl_object );
static cl_object LC72walk_definitions(volatile cl_object  *, cl_object );
static cl_object L74walk_if(cl_object , cl_object , cl_object );
static cl_object L75walk_when_unless(cl_object , cl_object , cl_object );
static cl_object L76walk_c_inline(cl_object , cl_object , cl_object );
static cl_object Cblock;
#define VM 152
#define VMtemp 17
#define ECL_DEFINE_SETF_FUNCTIONS 
#ifdef __cplusplus
}
#endif
/*
 * Exported Lisp functions
 */
#define compiler_cfuns_size 44
static const struct ecl_cfunfixed compiler_cfuns[] = {
 /*t,m,narg,padding,name=function-location,block=name-location,entry,entry_fixed,file,file_position*/
{0,0,-1,0,ecl_make_fixnum(100),ecl_make_fixnum(2),(cl_objectfn)L1unbound_lexical_function,NULL,ECL_NIL,ecl_make_fixnum(4968)},
{0,0,2,0,ecl_make_fixnum(101),ecl_make_fixnum(7),(cl_objectfn)LC2with_augmented_environment,NULL,ECL_NIL,ecl_make_fixnum(5853)},
{0,0,3,0,ecl_make_fixnum(105),ecl_make_fixnum(6),(cl_objectfn)L3with_augmented_environment_internal,NULL,ECL_NIL,ecl_make_fixnum(6198)},
{0,0,2,0,ecl_make_fixnum(106),ecl_make_fixnum(16),(cl_objectfn)LC5with_new_definition_in_environment,NULL,ECL_NIL,ecl_make_fixnum(6925)},
{0,0,2,0,ecl_make_fixnum(108),ecl_make_fixnum(19),(cl_objectfn)LC7walker_environment_bind,NULL,ECL_NIL,ecl_make_fixnum(8487)},
{0,0,2,0,ecl_make_fixnum(113),ecl_make_fixnum(22),(cl_objectfn)L15note_lexical_binding,NULL,ECL_NIL,ecl_make_fixnum(9934)},
{0,0,3,0,ecl_make_fixnum(114),ecl_make_fixnum(26),(cl_objectfn)L18variable_declaration,NULL,ECL_NIL,ecl_make_fixnum(10471)},
{0,0,2,0,ecl_make_fixnum(115),ecl_make_fixnum(27),(cl_objectfn)L19variable_special_p,NULL,ECL_NIL,ecl_make_fixnum(11009)},
{0,0,1,0,ecl_make_fixnum(116),ecl_make_fixnum(28),(cl_objectfn)L20variable_globally_special_p,NULL,ECL_NIL,ecl_make_fixnum(11795)},
{0,0,2,0,ecl_make_fixnum(117),ecl_make_fixnum(30),(cl_objectfn)LC21get_walker_template_internal,NULL,ECL_NIL,ecl_make_fixnum(14157)},
{0,0,2,0,ecl_make_fixnum(118),ecl_make_fixnum(33),(cl_objectfn)LC22define_walker_template,NULL,ECL_NIL,ecl_make_fixnum(14157)},
{0,0,1,0,ecl_make_fixnum(119),ecl_make_fixnum(37),(cl_objectfn)L23get_walker_template,NULL,ECL_NIL,ecl_make_fixnum(14667)},
{0,0,1,0,ecl_make_fixnum(120),ecl_make_fixnum(38),(cl_objectfn)L24get_implementation_dependent_walker_template,NULL,ECL_NIL,ecl_make_fixnum(14971)},
{0,0,-2,0,ecl_make_fixnum(121),ecl_make_fixnum(64),(cl_objectfn)L25macroexpand_all,NULL,ECL_NIL,ecl_make_fixnum(17969)},
{0,0,-2,0,ecl_make_fixnum(122),ecl_make_fixnum(67),(cl_objectfn)L27walk_form,NULL,ECL_NIL,ecl_make_fixnum(18096)},
{0,0,3,0,ecl_make_fixnum(123),ecl_make_fixnum(71),(cl_objectfn)L28walk_form_internal,NULL,ECL_NIL,ecl_make_fixnum(22722)},
{0,0,2,0,ecl_make_fixnum(124),ecl_make_fixnum(83),(cl_objectfn)L32walk_repeat_eval,NULL,ECL_NIL,ecl_make_fixnum(28945)},
{0,0,3,0,ecl_make_fixnum(125),ecl_make_fixnum(84),(cl_objectfn)L33recons,NULL,ECL_NIL,ecl_make_fixnum(29122)},
{0,0,3,0,ecl_make_fixnum(126),ecl_make_fixnum(46),(cl_objectfn)L40walk_let,NULL,ECL_NIL,ecl_make_fixnum(33746)},
{0,0,3,0,ecl_make_fixnum(127),ecl_make_fixnum(47),(cl_objectfn)L41walk_let_,NULL,ECL_NIL,ecl_make_fixnum(33822)},
{0,0,3,0,ecl_make_fixnum(128),ecl_make_fixnum(59),(cl_objectfn)L42walk_prog,NULL,ECL_NIL,ecl_make_fixnum(33897)},
{0,0,3,0,ecl_make_fixnum(129),ecl_make_fixnum(60),(cl_objectfn)L43walk_prog_,NULL,ECL_NIL,ecl_make_fixnum(33976)},
{0,0,3,0,ecl_make_fixnum(130),ecl_make_fixnum(57),(cl_objectfn)L44walk_do,NULL,ECL_NIL,ecl_make_fixnum(34054)},
{0,0,3,0,ecl_make_fixnum(131),ecl_make_fixnum(58),(cl_objectfn)L45walk_do_,NULL,ECL_NIL,ecl_make_fixnum(34127)},
{0,0,4,0,ecl_make_fixnum(132),ecl_make_fixnum(88),(cl_objectfn)L46walk_let_let_,NULL,ECL_NIL,ecl_make_fixnum(34199)},
{0,0,3,0,ecl_make_fixnum(133),ecl_make_fixnum(48),(cl_objectfn)L47walk_locally,NULL,ECL_NIL,ecl_make_fixnum(34786)},
{0,0,4,0,ecl_make_fixnum(134),ecl_make_fixnum(89),(cl_objectfn)L49walk_prog_prog_,NULL,ECL_NIL,ecl_make_fixnum(35040)},
{0,0,4,0,ecl_make_fixnum(135),ecl_make_fixnum(91),(cl_objectfn)L50walk_do_do_,NULL,ECL_NIL,ecl_make_fixnum(36248)},
{0,0,3,0,ecl_make_fixnum(136),ecl_make_fixnum(55),(cl_objectfn)L51walk_dotimes_dolist,NULL,ECL_NIL,ecl_make_fixnum(37069)},
{0,0,3,0,ecl_make_fixnum(137),ecl_make_fixnum(50),(cl_objectfn)L55walk_multiple_value_setq,NULL,ECL_NIL,ecl_make_fixnum(37874)},
{0,0,3,0,ecl_make_fixnum(138),ecl_make_fixnum(51),(cl_objectfn)L57walk_multiple_value_bind,NULL,ECL_NIL,ecl_make_fixnum(38579)},
{0,0,5,0,ecl_make_fixnum(139),ecl_make_fixnum(93),(cl_objectfn)L58walk_bindings_1,NULL,ECL_NIL,ecl_make_fixnum(39435)},
{0,0,3,0,ecl_make_fixnum(140),ecl_make_fixnum(45),(cl_objectfn)L60walk_lambda,NULL,ECL_NIL,ecl_make_fixnum(41636)},
{0,0,3,0,ecl_make_fixnum(141),ecl_make_fixnum(61),(cl_objectfn)L61walk_named_lambda,NULL,ECL_NIL,ecl_make_fixnum(42054)},
{0,0,3,0,ecl_make_fixnum(142),ecl_make_fixnum(52),(cl_objectfn)L62walk_setq,NULL,ECL_NIL,ecl_make_fixnum(42530)},
{0,0,3,0,ecl_make_fixnum(143),ecl_make_fixnum(53),(cl_objectfn)L64walk_symbol_macrolet,NULL,ECL_NIL,ecl_make_fixnum(43543)},
{0,0,3,0,ecl_make_fixnum(144),ecl_make_fixnum(54),(cl_objectfn)L65walk_tagbody,NULL,ECL_NIL,ecl_make_fixnum(44132)},
{0,0,3,0,ecl_make_fixnum(145),ecl_make_fixnum(40),(cl_objectfn)L67walk_compiler_let,NULL,ECL_NIL,ecl_make_fixnum(44560)},
{0,0,3,0,ecl_make_fixnum(146),ecl_make_fixnum(49),(cl_objectfn)L69walk_macrolet,NULL,ECL_NIL,ecl_make_fixnum(45029)},
{0,0,3,0,ecl_make_fixnum(147),ecl_make_fixnum(42),(cl_objectfn)L71walk_flet,NULL,ECL_NIL,ecl_make_fixnum(46365)},
{0,0,3,0,ecl_make_fixnum(148),ecl_make_fixnum(44),(cl_objectfn)L73walk_labels,NULL,ECL_NIL,ecl_make_fixnum(47052)},
{0,0,3,0,ecl_make_fixnum(149),ecl_make_fixnum(43),(cl_objectfn)L74walk_if,NULL,ECL_NIL,ecl_make_fixnum(47743)},
{0,0,3,0,ecl_make_fixnum(150),ecl_make_fixnum(56),(cl_objectfn)L75walk_when_unless,NULL,ECL_NIL,ecl_make_fixnum(48779)},
{0,0,3,0,ecl_make_fixnum(151),ecl_make_fixnum(62),(cl_objectfn)L76walk_c_inline,NULL,ECL_NIL,ecl_make_fixnum(48987)},
};
