static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)7817, (cl_index)7817,
        (ecl_base_char*)
":delete-methods gray::stream-p clos::*clos-booted* \"The stream ~S has no suitabl"
 "e method for ~S.\" gray::clos-default-read-sequence gray::clos-default-write-sequ"
 "ence si::index \"input\" \"output\" \"Not a valid direction, ~S; must be one of ~\n   "
 "                              :INPUT or :OUTPUT.\" (member :input :output) \"Not a"
 "n ~A stream, ~S, although ~S ~\n                              was provided as DIR"
 "ECTION.\" gray::%redefine-cl-functions \"COMMON-LISP\" \"GRAY\" #1=(close stream-elem"
 "ent-type input-stream-p open-stream-p output-stream-p streamp) gray::redefine-cl"
 "-functions clos::install-method :abort (setf gray::open-stream-p) 0 0 si::packag"
 "es-iterator 0 0 0 \"GRAY\" (stream gray::column) \"Write enough blank space so that"
 " the next character will be\n  written at the specified column. Returns true if t"
 "he operation is\n  successful, or NIL if it is not supported for this stream. Thi"
 "s is\n  intended for use by by PPRINT and FORMAT ~T. The default method uses\n  ST"
 "REAM-LINE-COLUMN and repeated calls to STREAM-WRITE-CHAR with a\n  #SPACE charact"
 "er; it returns NIL if STREAM-LINE-COLUMN returns\n  NIL.\" (stream) \"This is like "
 "CL:CLEAR-INPUT, but for Gray streams, returning NIL.\n  The default method does n"
 "othing.\" \"This is like CL:CLEAR-OUTPUT, but for Gray streams: clear the\n  given "
 "output STREAM. The default method does nothing.\" (stream &key abort) \"Close the "
 "given STREAM. No more I/O may be performed, but\n  inquiries may still be made. I"
 "f :ABORT is true, an attempt is made\n  to clean up the side effects of having cr"
 "eated the stream.\" \"Return a type specifier for the kind of object returned by t"
 "he\n  STREAM. The class FUNDAMENTAL-CHARACTER-STREAM provides a default\n  method "
 "which returns CHARACTER.\" \"Attempts to ensure that all output sent to the Stream"
 " has reached\n  its destination, and only then returns false. Implements\n  FINISH"
 "-OUTPUT. The default method does nothing.\" \"Attempts to force any buffered outpu"
 "t to be sent. Implements\n  FORCE-OUTPUT. The default method does nothing.\" \"Outp"
 "uts a new line to the Stream if it is not positioned at the\n  beginning of a lin"
 "e. Returns T if it output a new line, nil\n  otherwise. Used by FRESH-LINE. The d"
 "efault method uses\n  STREAM-START-LINE-P and STREAM-TERPRI.\" \"Can STREAM perform"
 " input operations?\" \"Is this object a STREAM?\" \"Is stream interactive (For insta"
 "nce, a tty)?\" \"Return the column number where the next character will be written"
 ",\n  or NIL if that is not meaningful for this stream.  The first column\n  on a l"
 "ine is numbered 0. This function is used in the implementation\n  of PPRINT and t"
 "he FORMAT ~T directive. For every character output\n  stream class that is define"
 "d, a method must be defined for this\n  function, although it is permissible for "
 "it to always return NIL.\" \"Return true if STREAM is not closed. A default method"
 " is provided\n  by class FUNDAMENTAL-STREAM which returns true if CLOSE has not b"
 "een\n  called on the stream.\" \"Can STREAM perform output operations?\" \"This is us"
 "ed to implement PEEK-CHAR; this corresponds to PEEK-TYPE of NIL.\n  It returns ei"
 "ther a character or :EOF. The default method calls\n  STREAM-READ-CHAR and STREAM"
 "-UNREAD-CHAR.\" \"Used by READ-BYTE; returns either an integer, or the symbol :EOF"
 "\n  if the stream is at end-of-file.\" \"Read one character from the stream. Return"
 " either a character\n  object, or the symbol :EOF if the stream is at end-of-file"
 ".  Every\n  subclass of FUNDAMENTAL-CHARACTER-INPUT-STREAM must define a method\n "
 " for this function.\" \"This is used to implement READ-CHAR-NO-HANG. It returns ei"
 "ther a\n  character, or NIL if no input is currently available, or :EOF if\n  end-"
 "of-file is reached. The default method provided by\n  FUNDAMENTAL-CHARACTER-INPUT"
 "-STREAM simply calls STREAM-READ-CHAR;\n  this is sufficient for file streams, bu"
 "t interactive streams should\n  define their own method.\" \"This is used by READ-L"
 "INE. A string is returned as the first\n  value. The second value is true if the "
 "string was terminated by\n  end-of-file instead of the end of a line. The default"
 " method uses\n  repeated calls to STREAM-READ-CHAR.\" (stream sequence &optional g"
 "ray::start gray::end) \"This is like CL:READ-SEQUENCE, but for Gray streams.\" \"Is"
 " STREAM known to be positioned at the beginning of a line?\n  It is permissible f"
 "or an implementation to always return\n  NIL. This is used in the implementation "
 "of FRESH-LINE. Note that\n  while a value of 0 from STREAM-LINE-COLUMN also indic"
 "ates the\n  beginning of a line, there are cases where STREAM-START-LINE-P can be"
 "\n  meaningfully implemented although STREAM-LINE-COLUMN can't be. For\n  example,"
 " for a window using variable-width characters, the column\n  number isn't very me"
 "aningful, but the beginning of the line does have\n  a clear meaning. The default"
 " method for STREAM-START-LINE-P on class\n  FUNDAMENTAL-CHARACTER-OUTPUT-STREAM u"
 "ses STREAM-LINE-COLUMN, so if\n  that is defined to return NIL, then a method sho"
 "uld be provided for\n  either STREAM-START-LINE-P or STREAM-FRESH-LINE.\" \"Writes "
 "an end of line, as for TERPRI. Returns NIL. The default\n  method does (STREAM-WR"
 "ITE-CHAR stream #NEWLINE).\" (stream character) \"Un-do the last call to STREAM-RE"
 "AD-CHAR, as in UNREAD-CHAR.\n  Return NIL. Every subclass of FUNDAMENTAL-CHARACTE"
 "R-INPUT-STREAM\n  must define a method for this function.\" (stream integer) \"Impl"
 "ements WRITE-BYTE; writes the integer to the stream and\n  returns the integer as"
 " the result.\" \"Write CHARACTER to STREAM and return CHARACTER. Every\n  subclass "
 "of FUNDAMENTAL-CHARACTER-OUTPUT-STREAM must have a method\n  defined for this fun"
 "ction.\" (stream string &optional gray::start gray::end) \"This is used by WRITE-S"
 "TRING. It writes the string to the stream,\n  optionally delimited by start and e"
 "nd, which default to 0 and NIL.\n  The string argument is returned. The default m"
 "ethod provided by\n  FUNDAMENTAL-CHARACTER-OUTPUT-STREAM uses repeated calls to\n "
 " STREAM-WRITE-CHAR.\" \"This is like CL:WRITE-SEQUENCE, but for Gray streams.\" (st"
 "ream &optional position) \"This is like CL:FILE-POSITION, but for Gray streams.\" "
 "(stream &optional gray::direction) \"Return the file-descriptor underlaying STREA"
 "M, or NIL if not\n   available. DIRECTION must be either :INPUT, or :OUTPUT and i"
 "s\n   supposed to discriminate in case STREAM is a bidirectional\n   stream. DIREC"
 "TION is supposed to default to :INPUT.\n\n   An error is signaled if DIRECTION is "
 ":INPUT (:OUTPUT), and STREAM\n   is not an input (output) stream. A system-provid"
 "ed :BEFORE method\n   handles this case; user methods do not need to take care of"
 " it.\n\n   In case STREAM-FILE-DESCRIPTOR is not implemented for STREAM, an\n   err"
 "or is signaled. That is, users must add methods to explicitly\n   decline by retu"
 "rning NIL.\" (standard-object stream) ((:writers ((setf gray::open-stream-p)) :re"
 "aders (gray::open-stream-p) :initform t :name gray::open-p)) \"the base class for"
 " all CLOS streams\" (gray::fundamental-stream) (gray::fundamental-input-stream gr"
 "ay::fundamental-character-stream) (gray::fundamental-output-stream gray::fundame"
 "ntal-character-stream) (gray::fundamental-input-stream gray::fundamental-binary-"
 "stream) (gray::fundamental-output-stream gray::fundamental-binary-stream) (gray:"
 ":fundamental-character-output-stream t) (gray::fundamental-character-input-strea"
 "m) (ext::ansi-stream) (t) (gray::fundamental-output-stream) (gray::fundamental-c"
 "haracter-stream) (gray::fundamental-character-output-stream) (gray::fundamental-"
 "input-stream) (ext::ansi-stream t) (gray::fundamental-character-input-stream t) "
 "(stream sequence &optional (gray::start 0) (gray::end nil)) (gray::fundamental-b"
 "inary-input-stream t) (t t) (stream sequence &optional (gray::start 0) gray::end"
 ") (gray::fundamental-binary-output-stream t) (stream string &optional (gray::sta"
 "rt 0) gray::end) (:before) (stream &optional (gray::direction :input)) (two-way-"
 "stream) (file-stream) (nil) \"COMMON-LISP\" (:external) #1#" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
