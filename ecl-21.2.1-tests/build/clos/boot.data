static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)12699, (cl_index)12699,
        (ecl_base_char*)
"clos::+builtin-classes-pre-array+ clos::make-empty-standard-class clos::remove-a"
 "ccessors clos::std-class clos::sealedp 0 :metaclass :direct-superclasses :direct"
 "-slots :index clos::compute-clos-class-precedence-list 0 clos::parse-slots clos:"
 ":make-simple-slotd 0 \"CLOS\" ((standard-class) (clos::standard-effective-slot-def"
 "inition) (clos::standard-direct-slot-definition) (standard-class :metaclass nil "
 ":direct-slots #1=(#2=(clos::flag :initform nil :accessor clos::eql-specializer-f"
 "lag) #3=(clos::holder :initform (cons nil nil) :accessor clos::specializer-metho"
 "d-holder) #4=(clos::slot-padding :initform nil) #5=(clos::name :initarg :name :i"
 "nitform nil :accessor clos::class-id) #6=(clos::direct-superclasses :initarg :di"
 "rect-superclasses :accessor clos::class-direct-superclasses) #7=(clos::direct-su"
 "bclasses :initform nil :accessor clos::class-direct-subclasses) #8=(clos::slots "
 ":accessor clos::class-slots) #9=(clos::precedence-list :accessor clos::class-pre"
 "cedence-list) #10=(clos::direct-slots :initarg :direct-slots :accessor clos::cla"
 "ss-direct-slots) #11=(clos::direct-default-initargs :initarg :direct-default-ini"
 "targs :initform nil :accessor clos::class-direct-default-initargs) #12=(clos::de"
 "fault-initargs :accessor clos::class-default-initargs) #13=(clos::finalized :ini"
 "tform nil :accessor clos::class-finalized-p) #14=(clos::docstring :initarg :docu"
 "mentation :initform nil) #15=(clos::size :accessor clos::class-size) #16=(clos::"
 "sealedp :initarg :sealedp :initform nil :accessor clos::class-sealedp) #17=(clos"
 "::prototype) #18=(clos::dependents :initform nil :accessor clos::class-dependent"
 "s) #19=(clos::valid-initargs :accessor clos::class-valid-initargs) #20=(clos::sl"
 "ot-table :accessor clos::slot-table) #21=(clos::location-table :initform nil :ac"
 "cessor clos::class-location-table) (clos::optimize-slot-access) (clos::forward))"
 ") (clos::standard-direct-slot-definition :direct-slots #22=((clos::name :initarg"
 " :name :initform nil :accessor clos::slot-definition-name) (clos::initform :init"
 "arg :initform :initform clos::+initform-unsupplied+ :accessor clos::slot-definit"
 "ion-initform) (clos::initfunction :initarg :initfunction :initform nil :accessor"
 " clos::slot-definition-initfunction) (clos::declared-type :initarg :type :initfo"
 "rm t :accessor clos::slot-definition-type) (clos::allocation :initarg :allocatio"
 "n :initform :instance :accessor clos::slot-definition-allocation) (clos::initarg"
 "s :initarg :initargs :initform nil :accessor clos::slot-definition-initargs) (cl"
 "os::readers :initarg :readers :initform nil :accessor clos::slot-definition-read"
 "ers) (clos::writers :initarg :writers :initform nil :accessor clos::slot-definit"
 "ion-writers) (clos::docstring :initarg :documentation :initform nil :accessor cl"
 "os::slot-definition-documentation) (ext::location :initarg :location :initform n"
 "il :accessor clos::slot-definition-location))) (clos::standard-effective-slot-de"
 "finition :direct-slots #22#) (t :index 0) (standard-object :direct-superclasses "
 "(t)) (clos::metaobject :direct-superclasses (standard-object)) (clos::slot-defin"
 "ition :direct-superclasses (clos::metaobject) :direct-slots #22#) (clos::standar"
 "d-slot-definition :direct-superclasses (clos::slot-definition) :direct-slots #22"
 "#) (clos::direct-slot-definition :direct-superclasses (clos::slot-definition) :d"
 "irect-slots #22#) (clos::effective-slot-definition :direct-superclasses (clos::s"
 "lot-definition) :direct-slots #22#) (clos::standard-direct-slot-definition :dire"
 "ct-superclasses (clos::standard-slot-definition clos::direct-slot-definition) :d"
 "irect-slots #22#) (clos::standard-effective-slot-definition :direct-superclasses"
 " (clos::standard-slot-definition clos::effective-slot-definition) :direct-slots "
 "#22#) (method-combination :direct-superclasses (clos::metaobject) :direct-slots "
 "((clos::name :initarg :name :accessor clos::method-combination-name) (clos::comp"
 "iler :initarg :compiler :accessor clos::method-combination-compiler) (clos::opti"
 "ons :initarg :options :accessor clos::method-combination-options))) (clos::speci"
 "alizer :direct-superclasses (clos::metaobject) :direct-slots (#2# #3# #4#)) (clo"
 "s::eql-specializer :direct-superclasses (clos::specializer) :direct-slots ((clos"
 "::flag :initform t :accessor clos::eql-specializer-flag) (clos::holder :initform"
 " (cons nil nil) :accessor clos::specializer-method-holder) (clos::object :initar"
 "g :object :accessor clos::eql-specializer-object))) (class :direct-superclasses "
 "(clos::specializer) :direct-slots #23=(#2# #3# #4# #5# #6# #7# #8# #9# #10# #11#"
 " #12# #13# #14# #15# #16# #17# #18# #19# #20# #21#)) (clos::forward-referenced-c"
 "lass :direct-superclasses (class) :direct-slots #23#) (built-in-class :direct-su"
 "perclasses (class) :direct-slots #1#) (clos::std-class :direct-superclasses (cla"
 "ss) :direct-slots #1#) (standard-class :direct-superclasses (clos::std-class) :d"
 "irect-slots #1# :metaclass standard-class) (clos::funcallable-standard-class :di"
 "rect-superclasses (clos::std-class) :direct-slots #1#) (sequence :metaclass buil"
 "t-in-class :index 1 :direct-superclasses #24=(t)) (list :metaclass built-in-clas"
 "s :index 2 :direct-superclasses (sequence)) (cons :metaclass built-in-class :ind"
 "ex 3 :direct-superclasses (list)) (array :metaclass built-in-class :index 4 :dir"
 "ect-superclasses #24#) (vector :metaclass built-in-class :index 5 :direct-superc"
 "lasses (array sequence)) (string :metaclass built-in-class :index 6 :direct-supe"
 "rclasses (vector)) (base-string :metaclass built-in-class :index 7 :direct-super"
 "classes (string vector)) (bit-vector :metaclass built-in-class :index 8 :direct-"
 "superclasses (vector)) (stream :metaclass built-in-class :index 9 :direct-superc"
 "lasses #24#) (ext::ansi-stream :metaclass built-in-class :index 10 :direct-super"
 "classes (stream)) (file-stream :metaclass built-in-class :index 11 :direct-super"
 "classes (ext::ansi-stream)) (echo-stream :metaclass built-in-class :index 12 :di"
 "rect-superclasses (ext::ansi-stream)) (string-stream :metaclass built-in-class :"
 "index 13 :direct-superclasses (ext::ansi-stream)) (two-way-stream :metaclass bui"
 "lt-in-class :index 14 :direct-superclasses (ext::ansi-stream)) (synonym-stream :"
 "metaclass built-in-class :index 15 :direct-superclasses (ext::ansi-stream)) (bro"
 "adcast-stream :metaclass built-in-class :index 16 :direct-superclasses (ext::ans"
 "i-stream)) (concatenated-stream :metaclass built-in-class :index 17 :direct-supe"
 "rclasses (ext::ansi-stream)) (ext::sequence-stream :metaclass built-in-class :in"
 "dex 18 :direct-superclasses (ext::ansi-stream)) (character :metaclass built-in-c"
 "lass :index 19 :direct-superclasses #24#) (number :metaclass built-in-class :ind"
 "ex 20 :direct-superclasses #24#) (real :metaclass built-in-class :index 21 :dire"
 "ct-superclasses (number)) (rational :metaclass built-in-class :index 22 :direct-"
 "superclasses (real)) (integer :metaclass built-in-class :index 23 :direct-superc"
 "lasses (rational)) (fixnum :metaclass built-in-class :index 24 :direct-superclas"
 "ses (integer)) (bignum :metaclass built-in-class :index 25 :direct-superclasses "
 "(integer)) (ratio :metaclass built-in-class :index 26 :direct-superclasses (rati"
 "onal)) (float :metaclass built-in-class :index 27 :direct-superclasses (real)) ("
 "single-float :metaclass built-in-class :index 28 :direct-superclasses (float)) ("
 "double-float :metaclass built-in-class :index 29 :direct-superclasses (float)) ("
 "long-float :metaclass built-in-class :index 30 :direct-superclasses (float)) (co"
 "mplex :metaclass built-in-class :index 31 :direct-superclasses (number)) (si::co"
 "mplex-float :metaclass built-in-class :index 32 :direct-superclasses (complex)) "
 "(si::complex-single-float :metaclass built-in-class :index 33 :direct-superclass"
 "es (si::complex-float)) (si::complex-double-float :metaclass built-in-class :ind"
 "ex 34 :direct-superclasses (si::complex-float)) (si::complex-long-float :metacla"
 "ss built-in-class :index 35 :direct-superclasses (si::complex-float)) (symbol :m"
 "etaclass built-in-class :index 36 :direct-superclasses #24#) (null :metaclass bu"
 "ilt-in-class :index 37 :direct-superclasses (symbol list)) (keyword :metaclass b"
 "uilt-in-class :index 38 :direct-superclasses (symbol)) (package :metaclass built"
 "-in-class :index 39 :direct-superclasses #24#) (function :metaclass built-in-cla"
 "ss :index 40 :direct-superclasses #24#) (pathname :metaclass built-in-class :ind"
 "ex 41 :direct-superclasses #24#) (logical-pathname :metaclass built-in-class :in"
 "dex 42 :direct-superclasses (pathname)) (hash-table :metaclass built-in-class :i"
 "ndex 43 :direct-superclasses #24#) (random-state :metaclass built-in-class :inde"
 "x 44 :direct-superclasses #24#) (readtable :metaclass built-in-class :index 45 :"
 "direct-superclasses #24#) (si::code-block :metaclass built-in-class :index 46 :d"
 "irect-superclasses #24#) (si::foreign-data :metaclass built-in-class :index 47 :"
 "direct-superclasses #24#) (si::frame :metaclass built-in-class :index 48 :direct"
 "-superclasses #24#) (ext::weak-pointer :metaclass built-in-class :index 49 :dire"
 "ct-superclasses #24#) (mp::process :metaclass built-in-class :index 50 :direct-s"
 "uperclasses #24#) (mp::lock :metaclass built-in-class :index 51 :direct-supercla"
 "sses #24#) (mp::rwlock :metaclass built-in-class :index 52 :direct-superclasses "
 "#24#) (mp::condition-variable :metaclass built-in-class :index 53 :direct-superc"
 "lasses #24#) (mp::semaphore :metaclass built-in-class :index 54 :direct-supercla"
 "sses #24#) (mp::barrier :metaclass built-in-class :index 55 :direct-superclasses"
 " #24#) (mp::mailbox :metaclass built-in-class :index 56 :direct-superclasses #24"
 "#) (clos::funcallable-standard-object :direct-superclasses (standard-object func"
 "tion)) (generic-function :metaclass clos::funcallable-standard-class :direct-sup"
 "erclasses (clos::metaobject clos::funcallable-standard-object)) (standard-generi"
 "c-function :direct-superclasses (generic-function) :direct-slots ((clos::name :i"
 "nitarg :name :initform nil :reader clos::generic-function-name) (clos::spec-list"
 " :initform nil :accessor clos::generic-function-spec-list) (method-combination :"
 "initarg :method-combination :initform (clos::find-method-combination (clos::clas"
 "s-prototype (find-class 'standard-generic-function)) 'standard nil) :accessor cl"
 "os::generic-function-method-combination) (clos::lambda-list :initarg :lambda-lis"
 "t :accessor clos::generic-function-lambda-list) (clos::argument-precedence-order"
 " :initarg :argument-precedence-order :initform nil :accessor clos::generic-funct"
 "ion-argument-precedence-order) (clos::method-class :initarg :method-class :initf"
 "orm (find-class 'standard-method)) (clos::docstring :initarg :documentation :ini"
 "tform nil) (clos::methods :initform nil :accessor clos::generic-function-methods"
 ") (clos::a-p-o-function :initform nil :accessor clos::generic-function-a-p-o-fun"
 "ction) (clos::declarations :initarg :declarations :initform nil :accessor clos::"
 "generic-function-declarations) (clos::dependents :initform nil :accessor clos::g"
 "eneric-function-dependents)) :metaclass clos::funcallable-standard-class) (metho"
 "d :direct-superclasses (clos::metaobject)) (standard-method :direct-superclasses"
 " (method) :direct-slots (#25=(clos::the-generic-function :initarg :generic-funct"
 "ion :initform nil :accessor clos::method-generic-function) #26=(clos::lambda-lis"
 "t :initarg :lambda-list :accessor clos::method-lambda-list) #27=(clos::specializ"
 "ers :initarg :specializers :accessor clos::method-specializers) #28=(clos::quali"
 "fiers :initform nil :initarg :qualifiers :accessor method-qualifiers) #29=(clos:"
 ":the-function :initarg :function :accessor clos::method-function) #30=(clos::doc"
 "string :initarg :documentation :initform nil) #31=(clos::plist :initform nil :in"
 "itarg :plist :accessor clos::method-plist) #32=(clos::keywords :initform nil :ac"
 "cessor clos::method-keywords))) (clos::standard-accessor-method :direct-supercla"
 "sses (standard-method) :direct-slots #33=(#25# #26# #27# #28# #29# #30# #31# #32"
 "# (clos::slot-definition :initarg :slot-definition :initform nil :accessor clos:"
 ":accessor-method-slot-definition))) (clos::standard-reader-method :direct-superc"
 "lasses (clos::standard-accessor-method) :direct-slots #33#) (clos::standard-writ"
 "er-method :direct-superclasses (clos::standard-accessor-method) :direct-slots #3"
 "3#) (clos::standard-optimized-reader-method :direct-superclasses (clos::standard"
 "-reader-method) :direct-slots #33#) (clos::standard-optimized-writer-method :dir"
 "ect-superclasses (clos::standard-writer-method) :direct-slots #33#) (structure-c"
 "lass :direct-superclasses (class) :direct-slots (#2# #3# #4# #5# #6# #7# #8# #9#"
 " #10# #11# #12# #13# #14# #15# #16# #17# #18# #19# #20# #21# (clos::slot-descrip"
 "tions) (clos::initial-offset) (clos::defstruct-form) (clos::constructors) (docum"
 "entation) (clos::copier) (clos::predicate) (clos::print-function))) (structure-o"
 "bject :metaclass structure-class :direct-superclasses (t)))" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
