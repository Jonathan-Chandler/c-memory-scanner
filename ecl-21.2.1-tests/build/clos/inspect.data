static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)2291, (cl_index)2291,
        (ecl_base_char*)
"clos::select-clos-n \"The local slots are:~%\" si::*inspect-level* \"name : ~S\" \"va"
 "lue:\" \"value: Unbound\" \"It has no local slots.~%\" \"The class slots are:~%\" \"It h"
 "as no class slots.~%\" \"The (local) slots are:~%\" \"Not updated.\" \"It has no (loca"
 "l) slots.~%\" clos::select-clos-n-inner-class clos::select-clos-l \"The names of t"
 "he local slots are:~%\" \"  ~S~%\" \"The names of the class slots are:~%\" \"The names"
 " of the (local) slots are:~%\" clos::select-clos-l-inner-class clos::select-clos-"
 "j \"~S is not a slot of the instance.\" clos::select-clos-j-inner-class \"Inspect c"
 "ommands for clos instances:~%~\nn (or N or Newline):  inspects all slots of the c"
 "lass (recursively).~%~\ns (or S):             skips the field.~%~\np (or P):      "
 "       pretty-prints the field.~%~\na (or A):             aborts the inspection o"
 "f the rest of the fields.~%~\ne (or E) form:        evaluates and prints the form"
 ".~%~\nl (or L):             show the names of all slots.~%~\nj (or J) slot-name:  "
 " inspect the slot with the name requested.~%~\nq (or Q):             quits the in"
 "spection.~%~\n?:                    prints this.~%~%\" :class clos::class-local-sl"
 "ots clos::class-class-slots clos::inspect-obj \"No applicable method CLOS::INSPEC"
 "T-OBJ for an instance~%\" \"of class ~S\" si::abort-inspect \"~S - clos object:\" \"- "
 "it is an instance of class named ~S,\" \"- it has ~A local slots and ~A class slot"
 "s: \" 0 0 0 0 0 0 0 0 0 0 0 0 0 0 si::quit-inspect 0 0 0 0 0 \"- it has ~A local s"
 "lots: \" clos::inspect-obj-inner-class clos::+valid-documentation-types+ :delete-"
 "methods #1=(compiler-macro function method-combination setf structure t type var"
 "iable) 0 0 0 0 0 0 0 0 clos::install-method si::inspect-indent si::inspect-inden"
 "t-1 si::read-inspect-command 0 0 0 si::inspect-read-line 0 0 0 si::select-p si::"
 "select-e 0 si::get-documentation si::set-documentation 0 \"CLOS\" (standard-object"
 ") (ext::instance) (clos::std-class) (t) #1# (clos::object clos::doc-type) (setf "
 "documentation) (clos::new-value clos::object clos::doc-type) (symbol t) (t symbo"
 "l t) (package t) (t package t) (class t) (t class t) (structure-class t) (t stru"
 "cture-class t) (list t) (t list t) (standard-generic-function t) (t standard-gen"
 "eric-function t) (standard-method t) (t standard-method t) #'t (t function t) (c"
 "los::slot-definition t) (t clos::slot-definition t)" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
