static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)8635, (cl_index)8635,
        (ecl_base_char*)
"si::unique-id si::*condition-restarts* \"#<~s.~d>\" si::restart-print si::copy-res"
 "tart si::restart-p 0 si::make-restart si::restart-test-function mp::cas-expander"
 " si::restart-interactive-function si::restart-report-function si::restart-functi"
 "on \"~s\" restart-bind \"Restart ~S is not active.\" :test-function :interactive-fun"
 "ction :report-function (stream) si::coerce-to-condition ('simple-condition 'sign"
 "al) ('simple-error 'error) ('simple-error 'cerror) ('simple-warning 'warn) (firs"
 "t si::*restart-clusters*) (&rest si::temp) si::temp restart-case (values nil t) "
 "with-simple-restart with-condition-restarts \"No next method.\" 0 0 \"Ignore this D"
 "EFINE-CONDITION option.\" \"Invalid DEFINE-CONDITION option: ~S\" (condition) defin"
 "e-condition \"Not a condition type: ~S\" \"Ill-formed handler bindings.\" handler-bi"
 "nd \"~A~%Break entered because of *BREAK-ON-SIGNALS*.\" signal \"Ignore the additio"
 "nal arguments.\" \"You may not supply additional arguments ~\n                     "
 "                when giving ~S to ~S.\" (or symbol string) \"Bad argument to ~S: ~"
 "S\" \"Break\" \"Return from BREAK.\" break \"a warning condition\" \"Skip warning.\" \"~&;"
 ";; Warning: ~A~%\" warn #1=\"~?\" si::simple-style-warning #2=\"~A overflow at size "
 "~D. Stack can probably be resized.\nProceed with caution.\" #3=\"~A stack overflow."
 " Stack cannot grow any further. Either exit\nor return to an outer frame, undoing"
 " all the function calls so far.\" #4=\"Timeout occurred~@[ after ~A second~:P~].\" "
 "si::value #5=\"Serious signal ~D caught.\" #6=\"~S is not of type ~S.\" si::case-fai"
 "lure #7=\"~S fell through ~S expression.~%Wanted one of ~:S.\" #8=\"Unexpected end "
 "of file on ~S.\" #9=\"Filesystem error with pathname ~S.~%Either\n 1) the file does"
 " not exist, or\n 2) we are not allowed to access the file, or\n 3) the pathname po"
 "ints to a broken symbolic link.\" #10=\"The variable ~S is unbound.\" #11=\"The slot"
 " ~S in the object ~S is unbound.\" #12=\"The function ~S is undefined.\" si::abort-"
 "failure #13=\"Cannot print object ~A readably.\" #14=\"~:[~;Error in format: ~]~\n  "
 "                       ~?~@[~%  ~A~%  ~V@T^~]\" si::*default-format-error-control"
 "-string* si::*default-format-error-offset* \"SIMPLE-\" \"SI\" :no-error \"NORMAL-RETU"
 "RN\" \"ERROR-RETURN\" (si::temp) (declare (ignorable si::temp)) handler-case (error"
 " (condition) (values nil condition)) ignore-errors \"Retry assertion\" \" with new "
 "value~P for ~{~S~^, ~}.\" \".\" \"The old value of ~S is ~S.~\n                ~%Do y"
 "ou want to supply a new value? \" \"~&Type a form to be evaluated:~%\" \"The asserti"
 "on ~S failed\" \"Ignore the error, and try the operation again\" \"~A\" si::accept \"A"
 "ccept the error, returning NIL\" \"Continue, using ~S\" si::universal-error-handler"
 " si::stack-error-handler si::tpl-continue-command 0 si::dm-too-few-arguments si:"
 ":dm-too-many-arguments 0 si::define-structure 0 :name :function :report-function"
 " :interactive-function :test-function 0 0 :report :interactive :test 0 0 clos::i"
 "nstall-method 0 0 0 0 0 0 si::case-failure-name si::case-failure-possibilities s"
 "i::format-error-print-banner si::format-error-control-string si::format-error-of"
 "fset 0 0 0 0 0 \"SYSTEM\" (si::name function si::report-function si::interactive-f"
 "unction (si::test-function #15=(constantly t))) ((si::name nil t nil 0 nil) (fun"
 "ction nil t nil 1 nil) (si::report-function nil t nil 2 nil) (si::interactive-fu"
 "nction nil t nil 3 nil) (si::test-function #15# t nil 4 nil)) (si::make-restart)"
 " \"Ignore lock and proceed.\" \"Attempt to define CAS accessor ~S in locked package"
 ".\" (si::restart-test-function) (si::restart-interactive-function) (si::restart-r"
 "eport-function) (si::restart-function) (restart-name) ((:initform nil :allocatio"
 "n :class :name si::report-function)) (condition t) (si::c stream) (serious-condi"
 "tion) (:initform (lambda (condition stream) (format stream #1# (simple-condition"
 "-format-control condition) (simple-condition-format-arguments condition))) :name"
 " si::report-function) (:writers ((setf simple-condition-format-control)) :reader"
 "s (simple-condition-format-control) :initform \"\" :initargs (:format-control) :na"
 "me si::format-control) (:writers ((setf simple-condition-format-arguments)) :rea"
 "ders (simple-condition-format-arguments) :initform nil :initargs (:format-argume"
 "nts) :name si::format-arguments) (simple-condition warning) (warning) (style-war"
 "ning simple-condition) (simple-condition error) (storage-condition) ((:initform "
 "\"Detected access to an invalid or protected memory address.\" :name si::report-fu"
 "nction)) (:initform (lambda (condition stream) (let* ((type (ext::stack-overflow"
 "-type condition)) (si::size (ext::stack-overflow-size condition))) (if si::size "
 "(format stream #2# type si::size) (format stream #3# type)))) :name si::report-f"
 "unction) (:readers (ext::stack-overflow-size) :initform 0 :initargs (:size) :nam"
 "e si::size) (:readers (ext::stack-overflow-type) :initform nil :initargs (:type)"
 " :name type) ((:initform \"Memory limit reached. Please jump to an outer pointer,"
 " quit program and enlarge the\nmemory limits before executing the program again.\""
 " :name si::report-function)) ((:initform \"Illegal instruction.\" :name si::report"
 "-function)) (:initform (lambda (condition stream) (format stream #4# (slot-value"
 " condition 'si::value))) :name si::report-function) (:initform nil :initargs (:v"
 "alue) :name si::value) \"Signaled when an operation does not complete within an a"
 "llotted time budget.\" (:initform (lambda (condition stream) (format stream #5# ("
 "ext::unix-signal-received-code condition))) :name si::report-function) (:writers"
 " ((setf ext::unix-signal-received-code)) :readers (ext::unix-signal-received-cod"
 "e) :initargs (:code) :initform 0 :type fixnum :name si::code) (error) (:initform"
 " (lambda (condition stream) (format stream #6# (type-error-datum condition) (typ"
 "e-error-expected-type condition))) :name si::report-function) (:readers (type-er"
 "ror-datum) :initargs (:datum) :name si::datum) (:readers (type-error-expected-ty"
 "pe) :initargs (:expected-type) :name si::expected-type) (simple-condition type-e"
 "rror) (type-error) (:initform (lambda (condition stream) (format stream #7# (typ"
 "e-error-datum condition) (si::case-failure-name condition) (si::case-failure-pos"
 "sibilities condition))) :name si::report-function) (:readers (si::case-failure-n"
 "ame) :initargs (:name) :name si::name) (:readers (si::case-failure-possibilities"
 ") :initargs (:possibilities) :name si::possibilities) ((:readers (stream-error-s"
 "tream) :initargs (:stream) :name stream)) (stream-error) (:initform (lambda (con"
 "dition stream) (format stream #8# (stream-error-stream condition))) :name si::re"
 "port-function) (:initform (lambda (condition stream) (format stream #9# (file-er"
 "ror-pathname condition))) :name si::report-function) (:readers (file-error-pathn"
 "ame) :initargs (:pathname) :name pathname) ((:readers (package-error-package) :i"
 "nitargs (:package) :name package)) ((:readers (cell-error-name) :initargs (:name"
 ") :name si::name)) (cell-error) (:initform (lambda (condition stream) (format st"
 "ream #10# (cell-error-name condition))) :name si::report-function) (:initform (l"
 "ambda (condition stream) (format stream #11# (cell-error-name condition) (unboun"
 "d-slot-instance condition))) :name si::report-function) (:readers (unbound-slot-"
 "instance) :initargs (:instance) :name ext::instance) (:initform (lambda (conditi"
 "on stream) (format stream #12# (cell-error-name condition))) :name si::report-fu"
 "nction) ((:readers (arithmetic-error-operation) :initargs (:operation) :name si:"
 ":operation) (:readers (arithmetic-error-operands) :initform 'nil :initargs (:ope"
 "rands) :name si::operands)) (arithmetic-error) (control-error) ((:initform \"Abor"
 "t failed.\" :name si::report-function)) (:initform (lambda (condition stream) (fo"
 "rmat stream #13# (print-not-readable-object condition))) :name si::report-functi"
 "on) (:readers (print-not-readable-object) :initargs (:object) :name si::object) "
 "(parse-error stream-error) (simple-error) (:initform (lambda (condition stream) "
 "(format stream #14# (si::format-error-print-banner condition) (simple-condition-"
 "format-control condition) (simple-condition-format-arguments condition) (si::for"
 "mat-error-control-string condition) (si::format-error-offset condition))) :name "
 "si::report-function) (:initargs (:complaint) :name si::format-control) (:initarg"
 "s (:arguments) :name si::format-arguments) (:initform si::*default-format-error-"
 "control-string* :initargs (:control-string) :readers (si::format-error-control-s"
 "tring) :name si::control-string) (:initform si::*default-format-error-offset* :i"
 "nitargs (:offset) :readers (si::format-error-offset) :name si::offset) (:initfor"
 "m t :initargs (:print-banner) :readers (si::format-error-print-banner) :name si:"
 ":print-banner) ((:initform \"Console interrupt.\" :name si::report-function))" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
