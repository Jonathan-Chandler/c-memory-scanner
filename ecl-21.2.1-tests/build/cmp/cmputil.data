static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)5663, (cl_index)5663,
        (ecl_base_char*)
"c::+note-format+ c::+warn-format+ c::+error-format+ c::+fatal-format+ c::brief-n"
 "amestring :shared-library 0 :dll 0 :standalone-shared-library 0 :standalone-dll "
 "0 :static-library 0 :lib 0 :standalone-static-library 0 :standalone-lib 0 :fasl "
 "0 :fasb 0 :program (:standalone-dll :standalone-shared-library :dll :shared-libr"
 "ary :standalone-lib :standalone-static-library :lib :static-library :fasb :fasl "
 ":program) c::normalize-build-target-name c::innermost-non-expanded-form c::|comp"
 "iler preprocess| \"~A:~%  in file ~A, position ~D~&  at ~A\" \"~A:\" c::compiler-mes"
 "sage-report c::compiler-message c::*compile-file-position* c::*current-toplevel-"
 "form* c::*current-form* c::compiler-note c::compiler-debug-note c::compiler-warn"
 "ing c::compiler-macro-expansion-failed c::compiler-error c::compiler-fatal-error"
 " c::compiler-internal-error c::compiler-style-warning c::compiler-undefined-vari"
 "able #1=\"Variable ~A was undefined. ~\n                               Compiler as"
 "sumes it is a global.\" c::circular-dependency #2=\"Circular references in creatio"
 "n form for ~S.\" c::*suppress-compiler-messages* \"~&~@<;;; ~@;~A~:>\" c::print-com"
 "piler-message c::handle-compiler-note c::*compiler-conditions* c::handle-compile"
 "r-warning c::handle-compiler-error c::*compiler-break-enable* \"~A\" c::handle-com"
 "piler-internal-error c::*active-protection* c::*pending-actions* c::do-compilati"
 "on-unit with-compilation-unit ((c::*compiler-conditions* nil)) (declare (special"
 " c::*compiler-conditions*)) ((c::compiler-note #'c::handle-compiler-note) (warni"
 "ng #'c::handle-compiler-warning) (c::compiler-error #'c::handle-compiler-error) "
 "(c::compiler-internal-error #'c::handle-compiler-internal-error) (serious-condit"
 "ion #'c::handle-compiler-internal-error)) (mp::+load-compile-lock+) c::+init-env"
 "-form+ (abort nil) c::with-compiler-env c::*c1form-level* \"~% ~D > ~A, parent ~A"
 "\" c::print-c1forms \"#<a ~A: ~A>\" \"#<a ~A>\" c::print-ref \"#<a VAR: ~A KIND: ~A>\" "
 "c::print-var c::cmpprogress c::cmperr c::cmpck c::cmpassert c::safe-list-length "
 "\"Improper or circular list passed to ~A~%~A\" c::check-args-number \"~S requires a"
 "t most ~R argument~:p, but ~R ~:*~[were~;was~:;were~] supplied.~%\" c::too-many-a"
 "rgs \"~S requires at least ~R argument~:p, but only ~R ~:*~[were~;was~:;were~] su"
 "pplied.~%\" c::too-few-args :report-function \"Skip warning\" si::*condition-restar"
 "ts* c::cmpwarn-style c::cmpwarn c::cmpnote c::cmpdebug \"~&;;; Compiling ~s.~%\" c"
 "::print-current-form \"~&;;; Emitting code for ~s.~%\" c::print-emitting c::undefi"
 "ned-variable \"A bug was found in the compiler\" c::baboon ((si::*break-enable* c:"
 ":*compiler-break-enable*) (c::throw-flag t)) ((error #'invoke-debugger)) (setf c"
 "::throw-flag nil) c::throw-flag c::with-cmp-protection c::*cmp-env* \"The form ~s"
 " was not evaluated successfully.~%Error detected:~%~A\" c::cmp-eval c::cmp-macro-"
 "function \"The macro form ~s was not expanded successfully.~%Error detected:~%~A\""
 " c::cmp-expand-macro \"The expansion of the compiler macro~%~T~A~%was aborted bec"
 "ause of a serious condition~%~A\" c::cmp-expand-compiler-macro c::t1 c::t2 c::t3 "
 "c::lfun si::compiler-clear-compiler-properties c::lisp-to-c-name c::collect-line"
 "s 0 0 0 0 c::compiler-message-file-position c::compiler-message-prefix c::compil"
 "er-message-file c::compiler-message-toplevel-form c::compiler-message-format c::"
 "compiler-message-form 0 0 0 0 0 0 :override 0 si::dm-too-few-arguments 0 si::dm-"
 "too-many-arguments 0 c::c1form-p c::c1form-parent c::c1form-args 0 c::ref-name 0"
 " c::var-name c::var-kind 0 0 0 0 0 0 0 0 si::make-restart si::coerce-to-conditio"
 "n 0 0 0 0 0 0 c::fun-name c::fun-description 0 0 :format-control :format-argumen"
 "ts 0 0 0 c::cmp-env-search-macro 0 0 0 0 0 \"COMPILER\" \"~&~@<  ~;~?~;~:@>\" \"~&~@<"
 "  ! ~;~?~;~:@>\" \"~&~@<  * ~;~?~;~:@>\" \"~&~@<  ** ~;~?~;~:@>\" (simple-condition) "
 "(:initform (lambda (c::c stream) (apply #'c::compiler-message-report stream c::c"
 " (simple-condition-format-control c::c) (simple-condition-format-arguments c::c)"
 ")) :name si::report-function) (:writers ((setf c::compiler-message-prefix)) :rea"
 "ders (c::compiler-message-prefix) :initform \"Note\" :name c::prefix) (:writers (("
 "setf c::compiler-message-format)) :readers (c::compiler-message-format) :initfor"
 "m c::+note-format+ :name format) (:writers ((setf c::compiler-message-file)) :re"
 "aders (c::compiler-message-file) :initform *compile-file-pathname* :initargs (:f"
 "ile) :name c::file) (:writers ((setf c::compiler-message-file-position)) :reader"
 "s (c::compiler-message-file-position) :initform c::*compile-file-position* :init"
 "args (:file) :name position) (:writers ((setf c::compiler-message-toplevel-form)"
 ") :readers (c::compiler-message-toplevel-form) :initform c::*current-toplevel-fo"
 "rm* :initargs (:form) :name c::toplevel-form) (:writers ((setf c::compiler-messa"
 "ge-form)) :readers (c::compiler-message-form) :initform c::*current-form* :inita"
 "rgs (:form) :name c::form) (c::compiler-message) (c::compiler-note) (c::compiler"
 "-message style-warning) ((:initform \"Warning\" :name c::prefix) (:initform c::+wa"
 "rn-format+ :name format)) (c::compiler-warning) ((:initform \"Error\" :name c::pre"
 "fix) (:initform c::+error-format+ :name format)) (c::compiler-error) ((:initform"
 " c::+fatal-format+ :name format)) (c::compiler-fatal-error) ((:initform \"Interna"
 "l error\" :name c::prefix)) ((:initform \"Style warning\" :name c::prefix) (:initfo"
 "rm c::+warn-format+ :name format)) (c::compiler-style-warning) (:initform (lambd"
 "a (c::c stream) (c::compiler-message-report stream c::c #1# (slot-value c::c 'va"
 "riable))) :name si::report-function) (:initform nil :initargs (:name) :name vari"
 "able) (:initform (lambda (c::c stream) (c::compiler-message-report stream c::c #"
 "2# (c::compiler-message-form c::c))) :name si::report-function)" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
