static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)4138, (cl_index)4138,
        (ecl_base_char*)
"c::+representation-types+ c::+this-machine-c-types+ c::+all-machines-c-types+ :l"
 "isp-type :bits :numberp :integerp :c-name :to-lisp :from-lisp :from-lisp-unsafe "
 "c::make-rep-type (or list symbol) c::rep-type :int-sse-pack \"ecl_fixnum\" :c-type"
 "s :rep-type-hash :sorted-types c::default-machine c::*machine* c::machine-c-type"
 "-p c::machine-fixnump c::*default-machine* 0 c::%make-rep-type 0 c::rep-type-nam"
 "e c::rep-type-lisp-type c::make-machine 0 c::machine-rep-type-hash 0 \"COMPILER\" "
 "((:byte . #1=((signed-byte 8) \"int8_t\" \"ecl_make_int8_t\" \"ecl_to_int8_t\" \"ecl_fi"
 "xnum\")) (:unsigned-byte . #2=((unsigned-byte 8) \"uint8_t\" \"ecl_make_uint8_t\" \"ec"
 "l_to_uint8_t\" \"ecl_fixnum\")) (:fixnum integer \"cl_fixnum\" \"ecl_make_fixnum\" \"ecl"
 "_to_fixnum\" \"ecl_fixnum\") (:int integer \"int\" \"ecl_make_int\" \"ecl_to_int\" \"ecl_t"
 "o_int\") (:unsigned-int integer \"unsigned int\" \"ecl_make_uint\" \"ecl_to_uint\" \"ecl"
 "_to_uint\") (:long integer \"long\" \"ecl_make_long\" \"ecl_to_long\" \"ecl_to_long\") (:"
 "unsigned-long integer \"unsigned long\" \"ecl_make_ulong\" \"ecl_to_ulong\" \"ecl_to_ul"
 "ong\") (:cl-index integer \"cl_index\" \"ecl_make_unsigned_integer\" \"ecl_to_cl_index"
 "\" \"ecl_fixnum\") (:long-long integer \"ecl_long_long_t\" \"ecl_make_long_long\" \"ecl_"
 "to_long_long\" \"ecl_to_long_long\") (:unsigned-long-long integer \"ecl_ulong_long_t"
 "\" \"ecl_make_ulong_long\" \"ecl_to_ulong_long\" \"ecl_to_ulong_long\") (:float single-"
 "float \"float\" \"ecl_make_single_float\" \"ecl_to_float\" \"ecl_single_float\") (:doubl"
 "e double-float \"double\" \"ecl_make_double_float\" \"ecl_to_double\" \"ecl_double_floa"
 "t\") (:long-double long-float \"long double\" \"ecl_make_long_float\" \"ecl_to_long_do"
 "uble\" \"ecl_long_float\") (:csfloat si::complex-single-float \"_Complex float\" \"ecl"
 "_make_csfloat\" \"ecl_to_csfloat\" \"ecl_csfloat\") (:cdfloat si::complex-double-floa"
 "t \"_Complex double\" \"ecl_make_cdfloat\" \"ecl_to_cdfloat\" \"ecl_cdfloat\") (:clfloat"
 " si::complex-long-float \"_Complex long double\" \"ecl_make_clfloat\" \"ecl_to_clfloa"
 "t\" \"ecl_clfloat\") (:unsigned-char base-char \"unsigned char\" \"CODE_CHAR\" \"ecl_bas"
 "e_char_code\" \"CHAR_CODE\") (:char base-char \"char\" \"CODE_CHAR\" \"ecl_base_char_cod"
 "e\" \"CHAR_CODE\") (:wchar character \"ecl_character\" \"CODE_CHAR\" \"ecl_char_code\" \"C"
 "HAR_CODE\") (:float-sse-pack ext::float-sse-pack \"__m128\" \"ecl_make_float_sse_pac"
 "k\" \"ecl_unbox_float_sse_pack\" \"ecl_unbox_float_sse_pack_unsafe\") (:double-sse-pa"
 "ck ext::double-sse-pack \"__m128d\" \"ecl_make_double_sse_pack\" \"ecl_unbox_double_s"
 "se_pack\" \"ecl_unbox_double_sse_pack_unsafe\") (:int-sse-pack ext::sse-pack \"__m12"
 "8i\" \"ecl_make_int_sse_pack\" \"ecl_unbox_int_sse_pack\" \"ecl_unbox_int_sse_pack_uns"
 "afe\") (:object t \"cl_object\" nil nil nil) (:bool t \"bool\" \"ecl_make_bool\" \"ecl_t"
 "o_bool\" \"ecl_to_bool\") (:void nil \"void\" nil nil nil) (:pointer-void si::foreign"
 "-data \"void*\" \"ecl_make_pointer\" \"ecl_to_pointer\" \"ecl_to_pointer\") (:cstring st"
 "ring \"char*\" \"ecl_cstring_to_base_string_or_nil\" nil nil) (:char* string \"char*\""
 " nil nil nil) (:int8-t . #1#) (:uint8-t . #2#) (:int16-t integer \"ecl_int16_t\" \""
 "ecl_make_int16_t\" \"ecl_to_int16_t\" \"ecl_to_int16_t\") (:uint16-t integer \"ecl_uin"
 "t16_t\" \"ecl_make_uint16_t\" \"ecl_to_uint16_t\" \"ecl_to_unt16_t\") (:int32-t integer"
 " \"ecl_int32_t\" \"ecl_make_int32_t\" \"ecl_to_int32_t\" \"ecl_to_int32_t\") (:uint32-t "
 "integer \"ecl_uint32_t\" \"ecl_make_uint32_t\" \"ecl_to_uint32_t\" \"ecl_to_uint32_t\") "
 "(:int64-t integer \"ecl_int64_t\" \"ecl_make_int64_t\" \"ecl_to_int64_t\" \"ecl_to_int6"
 "4_t\") (:uint64-t integer \"ecl_uint64_t\" \"ecl_make_uint64_t\" \"ecl_to_uint64_t\" \"e"
 "cl_to_uint64_t\") (:short integer \"short\" \"ecl_make_short\" \"ecl_to_short\" \"ecl_fi"
 "xnum\") (:unsigned-short integer \"unsigned short\" \"ecl_make_ushort\" \"ecl_to_ushor"
 "t\" \"ecl_fixnum\")) ((:byte . -8) (:unsigned-byte . 8) (:unsigned-short . -16) (:s"
 "hort . -16) (:unsigned-int . 32) (:int . -32) (:unsigned-long . 32) (:long . -32"
 ") (:unsigned-long-long . 64) (:long-long . -64) (:cl-index . 29) (:fixnum . -30)"
 " (:uint8-t . 8) (:int8-t . -8) (:uint16-t . 16) (:int16-t . -16) (:uint32-t . 32"
 ") (:int32-t . -32) (:uint64-t . 64) (:int64-t . -64) (:csfloat) (:cdfloat) (:clf"
 "loat)) ((:object) (:float) (:double) (:long-double) (:char) (:unsigned-char) (:w"
 "char) (:char*) (:cstring) (:bool) (:void) (:pointer-void))" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
