static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)4623, (cl_index)4623,
        (ecl_base_char*)
":walker \"The evaluator was called to evaluate a form in a macroexpansion~%~\n    "
 "      environment constructed by the PCL portable code walker.  These~%~\n       "
 "   environments are only useful for macroexpansion, they cannot be~%~\n          "
 "used for evaluation.~%~\n          This error should never occur when using PCL.~"
 "%~\n          This most likely source of this error is a program which tries to~%"
 "~\n          to use the PCL portable code walker to build its own evaluator.\" wal"
 "ker::unbound-lexical-function :functions :macros (:macros :functions) walker::wi"
 "th-augmented-environment-internal walker::with-augmented-environment walker::mac"
 "ro \"Functions\" \"Macros\" (flet labels) walker::fn (macrolet) walker::mac (list (c"
 "ar walker::mac) (walker::convert-macro-to-lambda (second walker::mac) (cddr walk"
 "er::mac) (string (car walker::mac)))) walker::with-new-definition-in-environment"
 " \"Dummy Macro\" walker::walker-environment-bind-1 walker::walker-environment-bind"
 " walker::*key-to-walker-environment* :lexical-var walker::note-lexical-binding :"
 "macro walker::*variable-declarations* \"~S is not a recognized variable declarati"
 "on.\" walker::variable-declaration walker::variable-special-p walker::variable-gl"
 "obally-special-p 'walker::walker-template walker::get-walker-template-internal ("
 "nil walker::repeat (eval)) (load eval) walker::define-walker-template walker::wa"
 "lker-template (lambda walker::repeat (eval)) \"Can't get template for ~S\" walker:"
 ":get-walker-template walker::get-implementation-dependent-walker-template walker"
 "::compiler-let walker::walk-compiler-let walker::walk-unexpected-declare walker:"
 ":walk-flet walker::walk-if walker::walk-labels walker::walk-lambda walker::walk-"
 "let walker::walk-let* walker::walk-locally walker::walk-macrolet walker::walk-mu"
 "ltiple-value-setq walker::walk-multiple-value-bind walker::walk-setq walker::wal"
 "k-symbol-macrolet walker::walk-tagbody walker::walk-dotimes/dolist walker::walk-"
 "when/unless walker::walk-do walker::walk-do* walker::walk-prog walker::walk-prog"
 "* walker::walk-named-lambda walker::walk-c-inline walker::walk-form-expand-macro"
 "s-p walker::macroexpand-all :walk-function :eval walker::walk-form :walk-form \"~"
 "S is a special form, not defined in the CommonLisp.~%~\n                       ma"
 "nual This code walker doesn't know how to walk it.~%~\n                       Def"
 "ine a template for this special form and try again.\" (walker::call walker::repea"
 "t (eval)) walker::walk-form-internal (eval function walker::test walker::effect "
 "return) 0 0 :set 0 walker::call 0 (return walker::effect walker::test function e"
 "val nil quote set walker::call lambda) walker::repeat walker::remote \"While hand"
 "ling repeat:~%~\n                     Ran into stop while still in repeat templat"
 "e.\" walker::walk-repeat-eval walker::recons \"Encountered declare ~S in a place w"
 "here a declare was not expected.\" (&optional &rest &key &allow-other-keys &aux &"
 "whole &environment &body) \"Can't understand something in the arglist ~S\" walker:"
 ":walk-let/let* walker::walk-prog/prog* (walker::test walker::repeat (eval)) walk"
 "er::walk-do/do* (nil (walker::repeat (set)) eval) walker::walk-bindings-1 (eval)"
 " :lexical-variables 0 (labels flet macrolet) \"In the form:~%~S~%~\n              "
 "         IF only accepts three arguments, you are using ~D.~%~\n                 "
 "      It is true that some Common Lisps support this, but ~\n                    "
 "   it is not~%~\n                       truly legal Common Lisp.  For now, this c"
 "ode ~\n                       walker is interpreting ~%~\n                       t"
 "he extra arguments as extra else clauses. ~\n                       Even if this "
 "is what~%~\n                       you intended, you should fix your source code."
 "\" si::dodefpackage 0 0 si::dm-too-few-arguments si::search-keyword si::check-key"
 "word 0 0 si::dm-too-many-arguments 0 :walk-function :walk-form :declarations :le"
 "xical-variables 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
 "0 0 0 0 0 0 0 \"WALKER\" \"CL\" (\"DEFINE-WALKER-TEMPLATE\" \"WALK-FORM\" \"WALK-FORM-EXP"
 "AND-MACROS-P\" \"VARIABLE-LEXICAL-P\" \"VARIABLE-SPECIAL-P\" \"*VARIABLE-DECLARATIONS*"
 "\" \"VARIABLE-DECLARATION\" \"MACROEXPAND-ALL\") ((\"SI\" \"GET-SYSPROP\" \"PUT-SYSPROP\"))"
 " ((notinline walker::note-lexical-binding walker::walk-bindings-1 walker::walk-l"
 "et/let* walker::walk-form-internal)) (special type) (nil nil walker::repeat (eva"
 "l)) (nil eval walker::repeat (eval)) (nil quote walker::repeat (eval)) (nil walk"
 "er::call) (nil quote) (nil return walker::repeat (eval)) (nil eval eval walker::"
 "repeat (eval)) (nil quote walker::repeat (return)) (nil quote eval) (nil eval ev"
 "al) (nil walker::repeat ((walker::test walker::repeat (eval))))" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
