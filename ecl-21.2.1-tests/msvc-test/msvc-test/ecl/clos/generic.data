static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)2867, (cl_index)2867,
        (ecl_base_char*)
":delete-methods clos::associate-methods-to-gfun defgeneric \"Illegal defgeneric f"
 "orm: missing generic function name\" \"Illegal defgeneric form: missing lambda-lis"
 "t\" \"Option ~s specified more than once\" 0 0 0 \"Too many arguments for option ~A\""
 " \"~S is not a legal defgeneric option\" :declarations \"&aux is not allowed in a g"
 "eneric function lambda-list\" (&optional &rest &key &allow-other-keys &aux &whole"
 " &environment &body) \"the parameters cannot be specialized in generic function l"
 "ambda-list\" (speed space compilation-speed debug safety) clos::valid-declaration"
 "-p clos::lambda-list-required-arguments :anonymous \"When defining generic functi"
 "on ~A~%Supplied :argument-precedence-order, but :lambda-list is missing\" \"When d"
 "efining generic function ~A~%The required argument ~A does not appear exactly on"
 "ce in the ARGUMENT-PRECEDENCE-ORDER list ~A\" \"When defining generic function ~A~"
 "%Not a valid declaration list: ~A\" \"When defining generic function~A~%Not a vali"
 "d documentation object ~\" (or null string) \"When defining generic function~A~%No"
 "t a valid method class, ~A\" clos::methods \"Cannot replace the lambda list of ~A "
 "with ~A because it is incongruent with some of the methods\" \"No next method.\" :m"
 "ethod-from-defgeneric-p :environment \"~A is not a valid :GENERIC-FUNCTION-CLASS "
 "argument for ENSURE-GENERIC-FUNCTION.\" \"~A is not a valid generic function name\""
 " \"The special operator ~A is not a valid name for a generic function\" \"The symbo"
 "l ~A is bound to a macro and is not a valid name for a generic function\" clos::*"
 "clos-booted* \"The symbol ~A is bound to an ordinary function and is not a valid "
 "name for a generic function\" ensure-generic-function 0 0 0 clos::install-method "
 ":name :lambda-list :argument-precedence-order :documentation :declarations :meth"
 "od-class 0 0 clos::set-generic-function-dispatch clos::congruent-lambda-p clos::"
 "compute-g-f-spec-list clos::update-dependents 0 clos::method-plist 0 :method-cla"
 "ss :generic-function-class :delete-methods 0 clos::legal-generic-function-name-p"
 " \"CLOS\" (generic-function t) (clos::gfun clos::slot-names &rest clos::initargs &"
 "key (clos::name nil) (clos::lambda-list nil clos::l-l-p) (clos::argument-precede"
 "nce-order nil clos::a-o-p) (documentation nil) (clos::declarations nil) (clos::m"
 "ethod-class (find-class 'method)) &aux (clos::gfun-name (if (slot-boundp clos::g"
 "fun 'clos::name) (slot-value clos::gfun 'clos::name) (or clos::name :anonymous))"
 ")) (standard-generic-function t) (clos::gfun clos::slot-names &rest clos::initar"
 "gs) (clos::gfun clos::name &rest clos::args &key (clos::method-class 'standard-m"
 "ethod clos::method-class-p) (clos::generic-function-class (class-of clos::gfun))"
 " (clos::delete-methods nil)) (null t) (clos::gfun clos::name &rest clos::args &k"
 "ey (clos::method-class 'standard-method clos::method-class-p) (clos::generic-fun"
 "ction-class 'standard-generic-function) (clos::delete-methods nil))" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
