
#ifdef ECL_DYNAMIC_VV
static cl_object *VV;
#else
static cl_object VV[VM];
#endif

#ifdef __cplusplus
extern "C" {
#endif
static cl_object L1seqtype(cl_object );
ECL_DLLEXPORT cl_object si_sequence_count(cl_object );
static cl_object L2test_error();
static cl_object L3unsafe_funcall1(cl_object , cl_object );
ECL_DLLEXPORT cl_object cl_reduce(cl_narg, cl_object , cl_object , ...);
#define cl_reducekeys (&VV[12])
ECL_DLLEXPORT cl_object cl_fill(cl_narg, cl_object , cl_object , ...);
#define cl_fillkeys (&VV[13])
ECL_DLLEXPORT cl_object cl_replace(cl_narg, cl_object , cl_object , ...);
#define cl_replacekeys (&VV[17])
static cl_object L4filter_vector(cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object );
static cl_object L5remove_list(cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object );
ECL_DLLEXPORT cl_object cl_remove(cl_narg, cl_object , cl_object , ...);
#define cl_removekeys (&VV[27])
ECL_DLLEXPORT cl_object cl_remove_if(cl_narg, cl_object , cl_object , ...);
#define cl_remove_ifkeys (&VV[29])
ECL_DLLEXPORT cl_object cl_remove_if_not(cl_narg, cl_object , cl_object , ...);
#define cl_remove_if_notkeys (&VV[29])
static cl_object L6delete_list(cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object );
ECL_DLLEXPORT cl_object cl_delete(cl_narg, cl_object , cl_object , ...);
#define cl_deletekeys (&VV[27])
ECL_DLLEXPORT cl_object cl_delete_if(cl_narg, cl_object , cl_object , ...);
#define cl_delete_ifkeys (&VV[29])
ECL_DLLEXPORT cl_object cl_delete_if_not(cl_narg, cl_object , cl_object , ...);
#define cl_delete_if_notkeys (&VV[29])
ECL_DLLEXPORT cl_object cl_count(cl_narg, cl_object , cl_object , ...);
#define cl_countkeys (&VV[35])
ECL_DLLEXPORT cl_object cl_count_if(cl_narg, cl_object , cl_object , ...);
#define cl_count_ifkeys (&VV[12])
ECL_DLLEXPORT cl_object cl_count_if_not(cl_narg, cl_object , cl_object , ...);
#define cl_count_if_notkeys (&VV[12])
ECL_DLLEXPORT cl_object cl_substitute(cl_narg, cl_object , cl_object , cl_object , ...);
#define cl_substitutekeys (&VV[27])
ECL_DLLEXPORT cl_object cl_substitute_if(cl_narg, cl_object , cl_object , cl_object , ...);
#define cl_substitute_ifkeys (&VV[29])
ECL_DLLEXPORT cl_object cl_substitute_if_not(cl_narg, cl_object , cl_object , cl_object , ...);
#define cl_substitute_if_notkeys (&VV[29])
ECL_DLLEXPORT cl_object cl_nsubstitute(cl_narg, cl_object , cl_object , cl_object , ...);
#define cl_nsubstitutekeys (&VV[27])
ECL_DLLEXPORT cl_object cl_nsubstitute_if(cl_narg, cl_object , cl_object , cl_object , ...);
#define cl_nsubstitute_ifkeys (&VV[29])
ECL_DLLEXPORT cl_object cl_nsubstitute_if_not(cl_narg, cl_object , cl_object , cl_object , ...);
#define cl_nsubstitute_if_notkeys (&VV[29])
ECL_DLLEXPORT cl_object cl_find(cl_narg, cl_object , cl_object , ...);
#define cl_findkeys (&VV[41])
ECL_DLLEXPORT cl_object cl_find_if(cl_narg, cl_object , cl_object , ...);
#define cl_find_ifkeys (&VV[12])
ECL_DLLEXPORT cl_object cl_find_if_not(cl_narg, cl_object , cl_object , ...);
#define cl_find_if_notkeys (&VV[12])
ECL_DLLEXPORT cl_object cl_position(cl_narg, cl_object , cl_object , ...);
#define cl_positionkeys (&VV[35])
ECL_DLLEXPORT cl_object cl_position_if(cl_narg, cl_object , cl_object , ...);
#define cl_position_ifkeys (&VV[12])
ECL_DLLEXPORT cl_object cl_position_if_not(cl_narg, cl_object , cl_object , ...);
#define cl_position_if_notkeys (&VV[12])
static cl_object L8remove_duplicates_list(cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object );
static cl_object LC7already_in_list_p(volatile cl_object  *, cl_object , cl_object , cl_object , cl_object );
ECL_DLLEXPORT cl_object cl_remove_duplicates(cl_narg, cl_object , ...);
#define cl_remove_duplicateskeys (&VV[35])
static cl_object L10delete_duplicates_list(cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object );
static cl_object LC9already_in_list_p(volatile cl_object  *, cl_object , cl_object , cl_object , cl_object );
static cl_object L12filter_duplicates_vector(cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object );
static cl_object LC11already_in_vector_p(volatile cl_object  *, cl_object , cl_object , cl_object , cl_object , cl_object );
ECL_DLLEXPORT cl_object cl_delete_duplicates(cl_narg, cl_object , ...);
#define cl_delete_duplicateskeys (&VV[35])
ECL_DLLEXPORT cl_object cl_mismatch(cl_narg, cl_object , cl_object , ...);
#define cl_mismatchkeys (&VV[50])
ECL_DLLEXPORT cl_object cl_search(cl_narg, cl_object , cl_object , ...);
#define cl_searchkeys (&VV[50])
static cl_object L13search_vector(cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object );
static cl_object L14search_generic(cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object );
ECL_DLLEXPORT cl_object cl_sort(cl_narg, cl_object , cl_object , ...);
#define cl_sortkeys (&VV[15])
static cl_object L15list_merge_sort(cl_object , cl_object , cl_object );
static cl_object L16quick_sort(cl_object , cl_object , cl_object , cl_object , cl_object );
static cl_object L17stable_sort_merge_vectors(cl_object , cl_object , cl_object , cl_object , cl_object , cl_object , cl_object );
static cl_object L18vector_merge_sort(cl_object , cl_object , cl_object );
ECL_DLLEXPORT cl_object cl_stable_sort(cl_narg, cl_object , cl_object , ...);
#define cl_stable_sortkeys (&VV[15])
ECL_DLLEXPORT cl_object cl_merge(cl_narg, cl_object , cl_object , cl_object , cl_object , ...);
#define cl_mergekeys (&VV[15])
ECL_DLLEXPORT cl_object cl_complement(cl_object );
static cl_object LC19__lambda525(cl_narg, ...);
static cl_object Cblock;
#define VM 58
#define VMtemp 1
#define ECL_DEFINE_SETF_FUNCTIONS 
#ifdef __cplusplus
}
#endif
/*
 * Exported Lisp functions
 */
#define compiler_cfuns_size 7
static const struct ecl_cfunfixed compiler_cfuns[] = {
 /*t,m,narg,padding,name=function-location,block=name-location,entry,entry_fixed,file,file_position*/
{0,0,2,0,ecl_make_fixnum(11),ecl_make_fixnum(3),(cl_objectfn)L3unsafe_funcall1,NULL,ECL_NIL,ecl_make_fixnum(1984)},
{0,0,10,0,ecl_make_fixnum(25),ecl_make_fixnum(4),(cl_objectfn)L4filter_vector,NULL,ECL_NIL,ecl_make_fixnum(6079)},
{0,0,8,0,ecl_make_fixnum(26),ecl_make_fixnum(5),(cl_objectfn)L5remove_list,NULL,ECL_NIL,ecl_make_fixnum(8863)},
{0,0,8,0,ecl_make_fixnum(34),ecl_make_fixnum(7),(cl_objectfn)L6delete_list,NULL,ECL_NIL,ecl_make_fixnum(10994)},
{0,0,7,0,ecl_make_fixnum(47),ecl_make_fixnum(8),(cl_objectfn)L8remove_duplicates_list,NULL,ECL_NIL,ecl_make_fixnum(19865)},
{0,0,7,0,ecl_make_fixnum(48),ecl_make_fixnum(9),(cl_objectfn)L10delete_duplicates_list,NULL,ECL_NIL,ecl_make_fixnum(22827)},
{0,0,8,0,ecl_make_fixnum(49),ecl_make_fixnum(10),(cl_objectfn)L12filter_duplicates_vector,NULL,ECL_NIL,ecl_make_fixnum(24592)},
};
