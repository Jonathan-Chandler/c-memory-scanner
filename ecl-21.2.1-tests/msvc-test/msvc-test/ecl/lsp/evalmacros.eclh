
#ifdef ECL_DYNAMIC_VV
static cl_object *VV;
#else
static cl_object VV[VM];
#endif

#ifdef __cplusplus
extern "C" {
#endif
static cl_object LC1unless(cl_object , cl_object );
static cl_object LC2defmacro(cl_object , cl_object );
static cl_object LC3defvar(cl_object , cl_object );
static cl_object LC4defparameter(cl_object , cl_object );
static cl_object LC5defconstant(cl_object , cl_object );
static cl_object LC6__lambda41(cl_object , cl_object , cl_object );
static cl_object LC7defun(cl_object , cl_object );
static cl_object LC8define_compiler_macro(cl_object , cl_object );
static cl_object L9compiler_macro_function(cl_narg, cl_object , ...);
static cl_object LC10loop(cl_object , cl_object );
static cl_object LC11lambda(cl_object , cl_object );
static cl_object LC12lambda_block(cl_object , cl_object );
static cl_object LC13psetq(cl_object , cl_object );
static cl_object LC14cond(cl_object , cl_object );
static cl_object LC15prog(cl_object , cl_object );
static cl_object LC16prog_(cl_object , cl_object );
static cl_object LC17prog1(cl_object , cl_object );
static cl_object LC18prog2(cl_object , cl_object );
static cl_object LC19multiple_value_list(cl_object , cl_object );
static cl_object LC20multiple_value_setq(cl_object , cl_object );
static cl_object LC21multiple_value_bind(cl_object , cl_object );
static cl_object L22while_until(cl_object , cl_object , cl_object );
static cl_object LC23while(cl_object , cl_object );
static cl_object LC24until(cl_object , cl_object );
static cl_object LC25case(cl_object , cl_object );
static cl_object LC26return(cl_object , cl_object );
static cl_object LC27declaim(cl_object , cl_object );
static cl_object LC28c_declaim(cl_object , cl_object );
static cl_object LC29in_package(cl_object , cl_object );
static cl_object LC30define_symbol_macro(cl_object , cl_object );
static cl_object LC31nth_value(cl_object , cl_object );
static cl_object L32maybe_unquote(cl_object );
static cl_object L33maybe_quote(cl_object );
static cl_object LC34truly_the(cl_object , cl_object );
static cl_object LC35checked_value(cl_object , cl_object );
static cl_object Cblock;
#define VM 84
#define VMtemp 1
#define ECL_DEFINE_SETF_FUNCTIONS 
#ifdef __cplusplus
}
#endif
/*
 * Exported Lisp functions
 */
#define compiler_cfuns_size 30
static const struct ecl_cfunfixed compiler_cfuns[] = {
 /*t,m,narg,padding,name=function-location,block=name-location,entry,entry_fixed,file,file_position*/
{0,0,2,0,ecl_make_fixnum(49),ecl_make_fixnum(0),(cl_objectfn)LC1unless,NULL,ECL_NIL,ecl_make_fixnum(669)},
{0,0,2,0,ecl_make_fixnum(51),ecl_make_fixnum(3),(cl_objectfn)LC2defmacro,NULL,ECL_NIL,ecl_make_fixnum(892)},
{0,0,2,0,ecl_make_fixnum(53),ecl_make_fixnum(6),(cl_objectfn)LC3defvar,NULL,ECL_NIL,ecl_make_fixnum(1462)},
{0,0,2,0,ecl_make_fixnum(55),ecl_make_fixnum(7),(cl_objectfn)LC4defparameter,NULL,ECL_NIL,ecl_make_fixnum(2336)},
{0,0,2,0,ecl_make_fixnum(56),ecl_make_fixnum(8),(cl_objectfn)LC5defconstant,NULL,ECL_NIL,ecl_make_fixnum(3069)},
{0,0,2,0,ecl_make_fixnum(57),ecl_make_fixnum(12),(cl_objectfn)LC7defun,NULL,ECL_NIL,ecl_make_fixnum(4394)},
{0,0,2,0,ecl_make_fixnum(59),ecl_make_fixnum(14),(cl_objectfn)LC8define_compiler_macro,NULL,ECL_NIL,ecl_make_fixnum(5277)},
{0,0,-2,0,ecl_make_fixnum(60),ecl_make_fixnum(15),(cl_objectfn)L9compiler_macro_function,NULL,ECL_NIL,ecl_make_fixnum(5839)},
{0,0,2,0,ecl_make_fixnum(61),ecl_make_fixnum(16),(cl_objectfn)LC11lambda,NULL,ECL_NIL,ecl_make_fixnum(6666)},
{0,0,2,0,ecl_make_fixnum(62),ecl_make_fixnum(17),(cl_objectfn)LC12lambda_block,NULL,ECL_NIL,ecl_make_fixnum(6728)},
{0,0,2,0,ecl_make_fixnum(63),ecl_make_fixnum(18),(cl_objectfn)LC13psetq,NULL,ECL_NIL,ecl_make_fixnum(7136)},
{0,0,2,0,ecl_make_fixnum(64),ecl_make_fixnum(19),(cl_objectfn)LC14cond,NULL,ECL_NIL,ecl_make_fixnum(7614)},
{0,0,2,0,ecl_make_fixnum(65),ecl_make_fixnum(20),(cl_objectfn)LC15prog,NULL,ECL_NIL,ecl_make_fixnum(8655)},
{0,0,2,0,ecl_make_fixnum(67),ecl_make_fixnum(21),(cl_objectfn)LC16prog_,NULL,ECL_NIL,ecl_make_fixnum(9027)},
{0,0,2,0,ecl_make_fixnum(68),ecl_make_fixnum(22),(cl_objectfn)LC17prog1,NULL,ECL_NIL,ecl_make_fixnum(9419)},
{0,0,2,0,ecl_make_fixnum(69),ecl_make_fixnum(23),(cl_objectfn)LC18prog2,NULL,ECL_NIL,ecl_make_fixnum(9696)},
{0,0,2,0,ecl_make_fixnum(70),ecl_make_fixnum(25),(cl_objectfn)LC19multiple_value_list,NULL,ECL_NIL,ecl_make_fixnum(10057)},
{0,0,2,0,ecl_make_fixnum(71),ecl_make_fixnum(26),(cl_objectfn)LC20multiple_value_setq,NULL,ECL_NIL,ecl_make_fixnum(10198)},
{0,0,2,0,ecl_make_fixnum(72),ecl_make_fixnum(27),(cl_objectfn)LC21multiple_value_bind,NULL,ECL_NIL,ecl_make_fixnum(10836)},
{0,0,2,0,ecl_make_fixnum(73),ecl_make_fixnum(28),(cl_objectfn)LC23while,NULL,ECL_NIL,ecl_make_fixnum(11507)},
{0,0,2,0,ecl_make_fixnum(74),ecl_make_fixnum(29),(cl_objectfn)LC24until,NULL,ECL_NIL,ecl_make_fixnum(11580)},
{0,0,2,0,ecl_make_fixnum(75),ecl_make_fixnum(31),(cl_objectfn)LC25case,NULL,ECL_NIL,ecl_make_fixnum(11655)},
{0,0,2,0,ecl_make_fixnum(76),ecl_make_fixnum(32),(cl_objectfn)LC26return,NULL,ECL_NIL,ecl_make_fixnum(12666)},
{0,0,2,0,ecl_make_fixnum(77),ecl_make_fixnum(35),(cl_objectfn)LC29in_package,NULL,ECL_NIL,ecl_make_fixnum(13245)},
{0,0,2,0,ecl_make_fixnum(78),ecl_make_fixnum(41),(cl_objectfn)LC30define_symbol_macro,NULL,ECL_NIL,ecl_make_fixnum(13375)},
{0,0,2,0,ecl_make_fixnum(79),ecl_make_fixnum(42),(cl_objectfn)LC31nth_value,NULL,ECL_NIL,ecl_make_fixnum(14015)},
{0,0,1,0,ecl_make_fixnum(80),ecl_make_fixnum(43),(cl_objectfn)L32maybe_unquote,NULL,ECL_NIL,ecl_make_fixnum(14086)},
{0,0,1,0,ecl_make_fixnum(81),ecl_make_fixnum(46),(cl_objectfn)L33maybe_quote,NULL,ECL_NIL,ecl_make_fixnum(14196)},
{0,0,2,0,ecl_make_fixnum(82),ecl_make_fixnum(47),(cl_objectfn)LC34truly_the,NULL,ECL_NIL,ecl_make_fixnum(14506)},
{0,0,2,0,ecl_make_fixnum(83),ecl_make_fixnum(48),(cl_objectfn)LC35checked_value,NULL,ECL_NIL,ecl_make_fixnum(14561)},
};
