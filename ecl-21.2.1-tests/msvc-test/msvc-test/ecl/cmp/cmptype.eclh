
#ifdef ECL_DYNAMIC_VV
static cl_object *VV;
#else
static cl_object VV[VM];
#endif

#ifdef __cplusplus
extern "C" {
#endif
static cl_object L1and_form_type(cl_narg, cl_object , cl_object , cl_object , ...);
static cl_object L2default_init(cl_narg, cl_object , ...);
static cl_object L3lambda_type_check_associate(cl_object , cl_object , cl_object , cl_object , cl_object );
static cl_object L4lambda_type_check_precise(cl_object , cl_object );
static cl_object L5lambda_type_check_expand(cl_object , cl_object , cl_object );
static cl_object L7extract_lambda_type_checks(cl_object , cl_object , cl_object , cl_object , cl_object , cl_object );
static cl_object LC6__lambda63(cl_narg, cl_object , ...);
static cl_object L8type_error_check(cl_object , cl_object );
static cl_object LC9assert_type_if_known(cl_object , cl_object );
static cl_object L10replace_invalid_types(cl_object );
static cl_object LC11optional_type_check(cl_object , cl_object );
static cl_object LC12with_let__type_check(cl_object , cl_object );
static cl_object Cblock;
#define VM 62
#define VMtemp 1
#define ECL_DEFINE_SETF_FUNCTIONS 
#ifdef __cplusplus
}
#endif
/*
 * Exported Lisp functions
 */
#define compiler_cfuns_size 11
static const struct ecl_cfunfixed compiler_cfuns[] = {
 /*t,m,narg,padding,name=function-location,block=name-location,entry,entry_fixed,file,file_position*/
{0,0,-4,0,ecl_make_fixnum(35),ecl_make_fixnum(4),(cl_objectfn)L1and_form_type,NULL,ECL_NIL,ecl_make_fixnum(766)},
{0,0,-2,0,ecl_make_fixnum(40),ecl_make_fixnum(7),(cl_objectfn)L2default_init,NULL,ECL_NIL,ecl_make_fixnum(1295)},
{0,0,5,0,ecl_make_fixnum(44),ecl_make_fixnum(9),(cl_objectfn)L3lambda_type_check_associate,NULL,ECL_NIL,ecl_make_fixnum(2300)},
{0,0,2,0,ecl_make_fixnum(46),ecl_make_fixnum(10),(cl_objectfn)L4lambda_type_check_precise,NULL,ECL_NIL,ecl_make_fixnum(3796)},
{0,0,3,0,ecl_make_fixnum(48),ecl_make_fixnum(14),(cl_objectfn)L5lambda_type_check_expand,NULL,ECL_NIL,ecl_make_fixnum(4223)},
{0,0,6,0,ecl_make_fixnum(49),ecl_make_fixnum(18),(cl_objectfn)L7extract_lambda_type_checks,NULL,ECL_NIL,ecl_make_fixnum(5320)},
{0,0,2,0,ecl_make_fixnum(53),ecl_make_fixnum(24),(cl_objectfn)L8type_error_check,NULL,ECL_NIL,ecl_make_fixnum(7063)},
{0,0,2,0,ecl_make_fixnum(54),ecl_make_fixnum(26),(cl_objectfn)LC9assert_type_if_known,NULL,ECL_NIL,ecl_make_fixnum(7955)},
{0,0,1,0,ecl_make_fixnum(58),ecl_make_fixnum(31),(cl_objectfn)L10replace_invalid_types,NULL,ECL_NIL,ecl_make_fixnum(8542)},
{0,0,2,0,ecl_make_fixnum(59),ecl_make_fixnum(32),(cl_objectfn)LC11optional_type_check,NULL,ECL_NIL,ecl_make_fixnum(9056)},
{0,0,2,0,ecl_make_fixnum(61),ecl_make_fixnum(34),(cl_objectfn)LC12with_let__type_check,NULL,ECL_NIL,ecl_make_fixnum(9245)},
};
