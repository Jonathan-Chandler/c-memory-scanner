static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)6549, (cl_index)6549,
        (ecl_base_char*)
"c::valid-array-index-p c::guess-array-element-type :failed \"The first argument t"
 "o MAKE-ARRAY~%~A~%is not a valid set of dimensions\" c::guess-array-dimensions-ty"
 "pe (:displaced-index-offset :displaced-to :fill-pointer :adjustable :initial-con"
 "tents :initial-element :element-type) (0 nil) #1=#:value \"Wrong number of argume"
 "nts passed to function ~A in form: ~A\" #2=#:vector (declare (:read-only #1# #2#)"
 " (optimize (safety 0))) (c::optional-type-assertion #2# #2#) ((#3=#:index (fill-"
 "pointer #2#)) (#4=#:dimension (array-total-size #2#))) (declare (fixnum #3# #4#)"
 " (:read-only #3# #4#)) ((< #3# #4#) (si::fill-pointer-set #2# (ext::truly-the fi"
 "xnum (+ 1 #3#))) (si::aset #2# #3# #1#) #3#) #5=#:%array (declare (:read-only #5"
 "#) (optimize (safety 0))) c::expand-aref \"Too few arguments to SI::ASET form~%~4"
 "I~A\" :read-only (optimize (safety 0)) c::expand-aset #6=#:%array (declare (:read"
 "-only #6#) (optimize (safety 0))) c::optional-type-assertion c::check-expected-r"
 "ank c::expand-zero-dim-index-check c::check-vector-in-bounds #7=#:%array-index ("
 "declare (:read-only #7#)) c::expand-vector-index-check \"DIM\" c::array-dimension-"
 "fast ((#8=#:%output-var 0)) #8# #9=#:%ndx-var (declare (ext::array-index #9#)) c"
 "::check-index-in-bounds (setf #8# (ext::truly-the ext::array-index (+ #8# #9#)))"
 " (#8#) c::expand-row-major-index ((:object :fixnum) :void \"if (ecl_unlikely((#0)"
 "->array.rank != (#1)))\n            FEwrong_dimensions(#0,#1);\" :one-liner nil) ("
 "(:object :fixnum :fixnum) :void \"if (ecl_unlikely((#1)>=(#2)))\n           FEwron"
 "g_index(ECL_NIL,#0,-1,ecl_make_fixnum(#1),#2);\" :one-liner nil) ((:object :fixnu"
 "m) :void \"if (ecl_unlikely((#1)>=(#0)->vector.dim))\n           FEwrong_index(ECL"
 "_NIL,#0,-1,ecl_make_fixnum(#1),(#0)->vector.dim);\" :one-liner nil) c::+array-dim"
 "ension-accessor+ #A(t (64) ((#10=(:object) :fixnum \"(#0)->array.dims[0]\" . #11=("
 ":one-liner t :side-effects nil)) (#10# :fixnum \"(#0)->array.dims[1]\" . #11#) (#1"
 "0# :fixnum \"(#0)->array.dims[2]\" . #11#) (#10# :fixnum \"(#0)->array.dims[3]\" . #"
 "11#) (#10# :fixnum \"(#0)->array.dims[4]\" . #11#) (#10# :fixnum \"(#0)->array.dims"
 "[5]\" . #11#) (#10# :fixnum \"(#0)->array.dims[6]\" . #11#) (#10# :fixnum \"(#0)->ar"
 "ray.dims[7]\" . #11#) (#10# :fixnum \"(#0)->array.dims[8]\" . #11#) (#10# :fixnum \""
 "(#0)->array.dims[9]\" . #11#) (#10# :fixnum \"(#0)->array.dims[10]\" . #11#) (#10# "
 ":fixnum \"(#0)->array.dims[11]\" . #11#) (#10# :fixnum \"(#0)->array.dims[12]\" . #1"
 "1#) (#10# :fixnum \"(#0)->array.dims[13]\" . #11#) (#10# :fixnum \"(#0)->array.dims"
 "[14]\" . #11#) (#10# :fixnum \"(#0)->array.dims[15]\" . #11#) (#10# :fixnum \"(#0)->"
 "array.dims[16]\" . #11#) (#10# :fixnum \"(#0)->array.dims[17]\" . #11#) (#10# :fixn"
 "um \"(#0)->array.dims[18]\" . #11#) (#10# :fixnum \"(#0)->array.dims[19]\" . #11#) ("
 "#10# :fixnum \"(#0)->array.dims[20]\" . #11#) (#10# :fixnum \"(#0)->array.dims[21]\""
 " . #11#) (#10# :fixnum \"(#0)->array.dims[22]\" . #11#) (#10# :fixnum \"(#0)->array"
 ".dims[23]\" . #11#) (#10# :fixnum \"(#0)->array.dims[24]\" . #11#) (#10# :fixnum \"("
 "#0)->array.dims[25]\" . #11#) (#10# :fixnum \"(#0)->array.dims[26]\" . #11#) (#10# "
 ":fixnum \"(#0)->array.dims[27]\" . #11#) (#10# :fixnum \"(#0)->array.dims[28]\" . #1"
 "1#) (#10# :fixnum \"(#0)->array.dims[29]\" . #11#) (#10# :fixnum \"(#0)->array.dims"
 "[30]\" . #11#) (#10# :fixnum \"(#0)->array.dims[31]\" . #11#) (#10# :fixnum \"(#0)->"
 "array.dims[32]\" . #11#) (#10# :fixnum \"(#0)->array.dims[33]\" . #11#) (#10# :fixn"
 "um \"(#0)->array.dims[34]\" . #11#) (#10# :fixnum \"(#0)->array.dims[35]\" . #11#) ("
 "#10# :fixnum \"(#0)->array.dims[36]\" . #11#) (#10# :fixnum \"(#0)->array.dims[37]\""
 " . #11#) (#10# :fixnum \"(#0)->array.dims[38]\" . #11#) (#10# :fixnum \"(#0)->array"
 ".dims[39]\" . #11#) (#10# :fixnum \"(#0)->array.dims[40]\" . #11#) (#10# :fixnum \"("
 "#0)->array.dims[41]\" . #11#) (#10# :fixnum \"(#0)->array.dims[42]\" . #11#) (#10# "
 ":fixnum \"(#0)->array.dims[43]\" . #11#) (#10# :fixnum \"(#0)->array.dims[44]\" . #1"
 "1#) (#10# :fixnum \"(#0)->array.dims[45]\" . #11#) (#10# :fixnum \"(#0)->array.dims"
 "[46]\" . #11#) (#10# :fixnum \"(#0)->array.dims[47]\" . #11#) (#10# :fixnum \"(#0)->"
 "array.dims[48]\" . #11#) (#10# :fixnum \"(#0)->array.dims[49]\" . #11#) (#10# :fixn"
 "um \"(#0)->array.dims[50]\" . #11#) (#10# :fixnum \"(#0)->array.dims[51]\" . #11#) ("
 "#10# :fixnum \"(#0)->array.dims[52]\" . #11#) (#10# :fixnum \"(#0)->array.dims[53]\""
 " . #11#) (#10# :fixnum \"(#0)->array.dims[54]\" . #11#) (#10# :fixnum \"(#0)->array"
 ".dims[55]\" . #11#) (#10# :fixnum \"(#0)->array.dims[56]\" . #11#) (#10# :fixnum \"("
 "#0)->array.dims[57]\" . #11#) (#10# :fixnum \"(#0)->array.dims[58]\" . #11#) (#10# "
 ":fixnum \"(#0)->array.dims[59]\" . #11#) (#10# :fixnum \"(#0)->array.dims[60]\" . #1"
 "1#) (#10# :fixnum \"(#0)->array.dims[61]\" . #11#) (#10# :fixnum \"(#0)->array.dims"
 "[62]\" . #11#) (#10# :fixnum \"(#0)->array.dims[63]\" . #11#))) c::array-dimension-"
 "accessor \"In macro ARRAY-DIMENSION-FAST, the index is not a constant integer: ~A"
 "\" 0 0 c::extract-constant-value c::known-type-p 0 c::valid-array-index c::cmpwar"
 "n si::dm-too-few-arguments si::search-keyword si::check-keyword c::policy-open-c"
 "ode-aref/aset 0 0 0 c::policy-type-assertions 0 0 c::policy-array-bounds-check 0"
 " si::dm-too-many-arguments 0 0 0 0 \"COMPILER\" (\"(#0)->array.dims[0]\" \"(#0)->arra"
 "y.dims[1]\" \"(#0)->array.dims[2]\" \"(#0)->array.dims[3]\" \"(#0)->array.dims[4]\" \"(#"
 "0)->array.dims[5]\" \"(#0)->array.dims[6]\" \"(#0)->array.dims[7]\" \"(#0)->array.dims"
 "[8]\" \"(#0)->array.dims[9]\" \"(#0)->array.dims[10]\" \"(#0)->array.dims[11]\" \"(#0)->"
 "array.dims[12]\" \"(#0)->array.dims[13]\" \"(#0)->array.dims[14]\" \"(#0)->array.dims["
 "15]\" \"(#0)->array.dims[16]\" \"(#0)->array.dims[17]\" \"(#0)->array.dims[18]\" \"(#0)-"
 ">array.dims[19]\" \"(#0)->array.dims[20]\" \"(#0)->array.dims[21]\" \"(#0)->array.dims"
 "[22]\" \"(#0)->array.dims[23]\" \"(#0)->array.dims[24]\" \"(#0)->array.dims[25]\" \"(#0)"
 "->array.dims[26]\" \"(#0)->array.dims[27]\" \"(#0)->array.dims[28]\" \"(#0)->array.dim"
 "s[29]\" \"(#0)->array.dims[30]\" \"(#0)->array.dims[31]\" \"(#0)->array.dims[32]\" \"(#0"
 ")->array.dims[33]\" \"(#0)->array.dims[34]\" \"(#0)->array.dims[35]\" \"(#0)->array.di"
 "ms[36]\" \"(#0)->array.dims[37]\" \"(#0)->array.dims[38]\" \"(#0)->array.dims[39]\" \"(#"
 "0)->array.dims[40]\" \"(#0)->array.dims[41]\" \"(#0)->array.dims[42]\" \"(#0)->array.d"
 "ims[43]\" \"(#0)->array.dims[44]\" \"(#0)->array.dims[45]\" \"(#0)->array.dims[46]\" \"("
 "#0)->array.dims[47]\" \"(#0)->array.dims[48]\" \"(#0)->array.dims[49]\" \"(#0)->array."
 "dims[50]\" \"(#0)->array.dims[51]\" \"(#0)->array.dims[52]\" \"(#0)->array.dims[53]\" \""
 "(#0)->array.dims[54]\" \"(#0)->array.dims[55]\" \"(#0)->array.dims[56]\" \"(#0)->array"
 ".dims[57]\" \"(#0)->array.dims[58]\" \"(#0)->array.dims[59]\" \"(#0)->array.dims[60]\" "
 "\"(#0)->array.dims[61]\" \"(#0)->array.dims[62]\" \"(#0)->array.dims[63]\")" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
