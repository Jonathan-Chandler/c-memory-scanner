static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)8633, (cl_index)8633,
        (ecl_base_char*)
"\"\" \"tmp\" \"Unable to create temporay file~%~\n        ~AXXXXXX\nMake sure you have "
 "enough free space in disk, check permissions or set~%~\nthe environment variable "
 "TMPDIR to a different value.\" c::safe-mkstemp :fasl :shared-library 0 :dll 0 c::"
 "+shared-library-format+ :static-library 0 :library 0 :lib 0 c::+static-library-f"
 "ormat+ :data \"data\" :sdata \"sdat\" :c :cxx-core \"cxx\" \"c\" :h \"eclh\" c::+object-fi"
 "le-extension+ :program c::+executable-file-format+ :precompiled-header \"~a.h.gch"
 "\" 0 :fas 0 \"fas\" 0 (nil) compile-file-pathname c::*delete-files* \"ECL_PRESERVE_F"
 "ILES\" c::*debug-compiler* \"~%Postponing deletion of ~A\" c::*files-to-be-deleted*"
 " c::cmp-delete-file (#\\\\ #\\/) \"/\" c::fix-for-mingw c::*ld-flags* c::*ld* \"-o\" \"-"
 "L\" c::*ld-rpath* c::*user-ld-flags* c::linker-cc c::linker-ar c::*ar* \"cr\" c::*r"
 "anlib* c::static-lib-ar c::*ld-shared-flags* \"-shared\" :ld-flags c::shared-cc c:"
 ":*ld-bundle-flags* \"-Wl,--export-all-symbols\" c::bundle-cc c::+lisp-program-head"
 "er+ c::+lisp-program-init+ c::+lisp-init-wrapper+ c::+lisp-program-main+ c::+lis"
 "p-library-main+ c::+lisp-program-winmain+ ((\"o\" :object) (\"o\" :object) (\"obj\" :o"
 "bject) (\"c\" :c) (\"a\" :static-library) (\"lib\" :static-library) (\"a\" :static-libra"
 "ry) (\"dll\" :shared-library) (\"dylib\" :shared-library) (\"dll\" :shared-library) (\""
 "so\" :shared-library) (\"fas\" :fasl)) \"File ~s is of no known file type. Assuming "
 "it is an object file.\" c::guess-kind (:object :c) 0 0 0 \"C::BUILDER cannot accep"
 "t files of kind ~s\" c::guess-ld-flags :build-op :output-files \"SYS:\" :find-syste"
 "m c::system-ld-flag (si::top-level t) :console c::*suppress-compiler-messages* :"
 "kind \"Parameter `init-name' is the same as the result of an internal function `c"
 "ompute-init-name'. Ignoring.\" (:static-library . #1=(:shared-library)) #1# \"Supp"
 "lying `init-name' is valid only for libraries. Ignoring.\" :prefix \"main_\" \"{ con"
 "st char *lisp_code = \" \";\ncl_object output;\nsi_select_package(ecl_make_constant_"
 "base_string(\\\"CL-USER\\\", 7));\noutput = si_safe_eval(2, ecl_read_from_cstring(lis"
 "p_code), ECL_NIL);\n}\" #P\"TMP:ECLINIT\" (symbol pathname string) (:shared-library "
 ":static-library) \"C::BUILDER does not accept a file ~s of kind ~s for target ~s\""
 " :windows (:console :windows) (:program :static-library :shared-library :fasl) c"
 "::builder c::build-fasl c::build-program c::build-static-library c::build-shared"
 "-library c::*compiler-in-use* (\"lsp\" \"LSP\" \"lisp\" \"LISP\") \"Cannot load system fi"
 "les.\" \"~&;;;~%;;; Compiling ~a.\" c::*load-time-values* :output-file c::*compiler"
 "-conditions* c::compiler-note c::compiler-error c::compiler-internal-error c::t1"
 " c::*cmp-env-root* c::maybe-install-inline-function c::*machine* c::*default-mac"
 "hine* c::*compiler-phase* c::*callbacks* c::*cmp-env* c::*max-temp* c::*temp* c:"
 ":*next-cmacro* c::*next-cfun* c::*last-label* c::*load-objects* c::*setf-definit"
 "ions* c::*make-forms* c::*static-constants* c::*permanent-objects* c::*temporary"
 "-objects* c::*local-funs* c::*global-vars* c::*global-funs* c::*global-cfuns-arr"
 "ay* c::*undefined-vars* c::*top-level-forms* c::*compile-time-too* c::*clines-st"
 "ring-list* c::*inline-blocks* si::*defun-inline-hook* c::*optimizable-constants*"
 " c::*inline-information* \"./cmpinit.lsp\" \"~&;;; End of Pass 1.\" :input-designato"
 "r \"~&;;; Finished compiling ~a.~%;;;~%\" \"The C compiler failed to compile the in"
 "termediate file.\" compile-file c::compiler-output-values c::*gazonk-counter* \"~s"
 " is not a valid function name.\" (or list function) \"COMPILE can not compile C cl"
 "osures\" 'c::gazonk \"Symbol ~s is unbound.\" \"COMPILE can not compile generic func"
 "tions yet\" \"We have lost the original function definition for ~s. Compilation to"
 " C failed\" \"TMP:ECL~3,'0x\" c::*permanent-data* c::*self-destructing-fasl* \"~W\" c"
 "::gazonk \"The C compiler failed to compile the intermediate code for ~s.\" compil"
 "e (or c::function-designator list) \"DISASSEMBLE can not disassemble C closures\" "
 "\"Cannot disassemble the binary function ~S because I do not have its source code"
 ".\" (or function (satisfies si::valid-function-name-p)) \"DISASSEMBLE cannot accep"
 "t ~A\" c::*compiler-output1* c::*compiler-output2* c::t3local-fun \"foo\" disassemb"
 "le c::*compile-file-position* c::compiler-pass1 \"Compiler: ~A ~A\" \"Date: ~D/~D/~"
 "D ~2,'0D:~2,'0D (yyyy/mm/dd)\" \"Machine: ~A ~A ~A\" \"Source: ~A\" \"#include \" c::*c"
 "mpinclude* c::compiler-pass2 c::*ecl-include-directory* \"ecl/config.h\" \"SYS:ecl;"
 "config.h\" \"Unable to find include directory\" c::ecl-include-directory c::*ecl-li"
 "brary-directory* \"ecl\" \"SYS:BUILD-STAMP\" \"Unable to find library directory\" c::e"
 "cl-library-directory c::*cc* \"-I.\" \"-I\" c::*cc-flags* c::*cc-optimize* \"-c\" c::*"
 "user-cc-flags* c::compiler-cc \"~&;;; OPTIMIZE levels: Safety=~d, Space=~d, Speed"
 "=~d, Debug=~d~%;;;~%\" c::*safety* c::*space* c::*speed* c::*debug* c::print-comp"
 "iler-info with-compilation-unit c::*precompiled-header-cc-config* c::need-to-dum"
 "p-precompiled-header c::*use-precompiled-headers* c::*precompiled-header-flags* "
 "\"Disabling precompiled header files due to error:~%  ~A\" c::precompiled-header-f"
 "lags (\"ecl\") \"ecl-cmp\" \"h\" \"ecl-include~4,'0x/\" \"TMP:\" \"-x\" \"c-header\" \"-include"
 "\" \"ecl-cmp.h\" c::dump-precompiled-header :ecl-bytecmp :cl c::cmp 0 0 :output-fil"
 "e :type :verbose :print :c-file :h-file :data-file :system-p :load :external-for"
 "mat :source-truename :source-offset 0 c::cmpprogress 0 0 c::split-program-option"
 "s :type :ld-flags c::brief-namestring c::safe-run-program 0 0 0 0 0 0 0 0 :lisp-"
 "files :ld-flags :init-name :main-name :prologue-code :epilogue-code :system c::n"
 "ormalize-build-target-name c::compute-init-name c::cmpwarn c::wt-filtered-data c"
 "::guess-init-name c::init-name-tag 0 0 0 0 0 :verbose :print :source-truename :s"
 "ource-offset :c-file :h-file :data-file :system-p :load :external-format :output"
 "-file si::make-restart c::handle-compiler-note c::handle-compiler-warning c::han"
 "dle-compiler-error c::handle-compiler-internal-error c::make-optimizable-constan"
 "ts c::machine-inline-information c::make-inline-information c::do-compilation-un"
 "it c::data-c-dump c::cmperr 0 0 c::set-closure-env 0 c::ctop-write 0 c::data-ini"
 "t c::t1expr 0 c::wt-comment-nl c::wt-nl1 0 0 0 c::cmp-env-optimization 0 0 si::d"
 "m-too-few-arguments 0 0 c::cmpnote 0 \"CL\" \"COMPILER\" \"\n#include <ecl/ecl.h>\n\n#if"
 "def __cplusplus\n#define ECL_CPP_TAG \\\"C\\\"\n#else\n#define ECL_CPP_TAG\n#endif\n\n~:{ "
 "    extern ECL_CPP_TAG void ~A(cl_object);~%~}\n\n\" \"\n#ifdef __cplusplus\nextern \\\""
 "C\\\"\n#endif\n\nECL_DLLEXPORT\nvoid ~A(cl_object cblock)\n{\n        /*\n         * This"
 " function is first invoked with a pointer to a Cblock\n         * structure, so t"
 "hat the function initializes it, and then\n         * it is invoked with OBJNULL,"
 " to force initialization.\n         */\n        static cl_object Cblock = OBJNULL;"
 "\n        if (cblock != OBJNULL) {\n                Cblock = cblock;\n#ifndef ECL_D"
 "YNAMIC_VV\n                cblock->cblock.data = NULL;\n#endif\n                cbl"
 "ock->cblock.data_size = 0;\n                return;\n        }\n        Cblock->cbl"
 "ock.data_text = (const cl_object *)\\\"~A\\\";\n        ~A\n{\n        /*\n         * At"
 " this point Cblock contains the cblock of the parent.\n         * Notice how the "
 "modules are linked to the parent forming a\n         * circular chain. This disab"
 "les the garbage collection of\n         * the library until _ALL_ functions in al"
 "l modules are unlinked.\n         */\n        cl_object current = OBJNULL, next = "
 "Cblock;\n~:{\n        current = ecl_make_codeblock();\n        current->cblock.next"
 " = next;\n        next = current;\n        ecl_init_module(current, ~A);\n~}\n      "
 "  Cblock->cblock.next = current;\n}\n        ~A\n}\n\" \"\n#ifdef __cplusplus\nextern \\\""
 "C\\\"\n#endif\n\nECL_DLLEXPORT\nvoid ~A(cl_object cblock)\n{\n        /* This is a wrapp"
 "er around the randomized init function name. */\n        ~A(cblock);\n}\n\" \"\nextern"
 " int\nmain(int argc, char **argv)\n{\n        cl_boot(argc, argv);\n        ECL_CATC"
 "H_ALL_BEGIN(ecl_process_env()) {\n        ~A\n        ecl_init_module(OBJNULL, ~A)"
 ";\n        ~A\n        } ECL_CATCH_ALL_END;\n        si_exit(0);\n}\n\" \"\nextern int\n~"
 "A(int argc, char **argv)\n{\n        cl_boot(argc, argv);\n        ECL_CATCH_ALL_BE"
 "GIN(ecl_process_env()) {\n        ~A\n        ecl_init_module(OBJNULL, ~A);\n      "
 "  ~A\n        } ECL_CATCH_ALL_END;\n        return 0;\n}\n\" \"\n#include <windows.h>\ni"
 "nt\nWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nC"
 "mdShow)\n{\n        char **argv;\n        int argc;\n        ecl_get_commandline_arg"
 "s(&argc, &argv);\n        cl_boot(argc, argv);\n        ECL_CATCH_ALL_BEGIN(ecl_pr"
 "ocess_env()) {\n        ~A\n        ecl_init_module(OBJNULL, ~A);\n        ~A\n     "
 "   } ECL_CATCH_ALL_END;\n        si_exit(0);\n        for (int i = 0; i < argc; i+"
 "+) {\n          LocalFree(argv[i]);\n        }\n        LocalFree(argv);\n}\n\"" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
