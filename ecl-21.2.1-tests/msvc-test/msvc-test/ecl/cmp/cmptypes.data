static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)11483, (cl_index)11483,
        (ecl_base_char*)
"c::ref c::copy-ref c::print-ref c::ref-p 0 c::make-ref c::ref-read-nodes mp::cas"
 "-expander c::ref-ref-clb c::ref-ref-ccb c::ref-ref c::ref-name #1=(not (or fixnu"
 "m character float)) c::var c::copy-var c::print-var c::var-p c::*current-functio"
 "n* 0 c::%make-var c::var-ignorable c::var-index c::var-type c::var-loc c::var-fu"
 "nctions-reading c::var-functions-setting c::var-function c::var-kind c::var-set-"
 "nodes c::var-read-nodes c::var-ref-clb c::var-ref-ccb c::var-ref c::var-name c::"
 "fun c::copy-fun c::fun-p (values &rest t) c::*compile-file-position* 0 c::make-f"
 "un c::fun-keyword-type-check-forms c::fun-optional-type-check-forms c::fun-requi"
 "red-lcls c::fun-cmp-env c::fun-file-position c::fun-file c::fun-child-funs c::fu"
 "n-referencing-funs c::fun-referenced-funs c::fun-referenced-vars c::fun-local-va"
 "rs c::fun-parent c::fun-return-type c::fun-maxarg c::fun-minarg c::fun-lambda-ex"
 "pression c::fun-lambda c::fun-description c::fun-var c::fun-closure c::fun-share"
 "s-with c::fun-no-entry c::fun-exported c::fun-global c::fun-env c::fun-level c::"
 "fun-cfun c::fun-read-nodes c::fun-ref-clb c::fun-ref-ccb c::fun-ref c::fun-name "
 "c::blk c::copy-blk c::blk-p 0 c::make-blk c::blk-type c::blk-var c::blk-destinat"
 "ion c::blk-exit c::blk-read-nodes c::blk-ref-clb c::blk-ref-ccb c::blk-ref c::bl"
 "k-name c::tag c::copy-tag c::tag-p 0 c::make-tag c::tag-index c::tag-var c::tag-"
 "unwind-exit c::tag-label c::tag-read-nodes c::tag-ref-clb c::tag-ref-ccb c::tag-"
 "ref c::tag-name c::info c::copy-info c::info-p 0 c::make-info c::info-volatile c"
 "::info-sp-change c::info-type c::info-local-vars c::inline-info c::copy-inline-i"
 "nfo c::inline-info-p 0 c::make-inline-info c::inline-info-one-liner c::inline-in"
 "fo-expansion c::inline-info-multiple-values c::inline-info-exact-return-type c::"
 "inline-info-return-type c::inline-info-arg-types c::inline-info-return-rep-type "
 "c::inline-info-arg-rep-types c::inline-info-name c::c1form c::copy-c1form c::pri"
 "nt-c1form c::c1form-p 0 c::do-make-c1form c::c1form-file-position c::c1form-file"
 " c::c1form-toplevel-form c::c1form-form c::c1form-side-effects c::c1form-args c:"
 ":c1form-env c::c1form-parents c::c1form-name c::c1form-volatile c::c1form-sp-cha"
 "nge c::c1form-type c::c1form-local-vars c::vv c::copy-vv c::vv-p 0 c::make-vv c:"
 ":vv-value c::vv-permanent-p c::vv-used-p c::vv-location c::machine c::copy-machi"
 "ne c::machine-p 0 c::make-machine c::machine-inline-information c::machine-sorte"
 "d-types c::machine-rep-type-hash c::machine-c-types c::rep-type c::copy-rep-type"
 " c::rep-type-p 0 c::%make-rep-type c::rep-type-from-lisp-unsafe c::rep-type-from"
 "-lisp c::rep-type-to-lisp c::rep-type-c-name c::rep-type-integerp c::rep-type-nu"
 "mberp c::rep-type-bits c::rep-type-lisp-type c::rep-type-name c::rep-type-index "
 "si::define-structure 0 :name :ref :ref-ccb :ref-clb :read-nodes si::structure-ty"
 "pe-error si::dm-too-many-arguments 0 :name :ref :ref-ccb :ref-clb :read-nodes :s"
 "et-nodes :kind :function :functions-setting :functions-reading :loc :type :index"
 " :ignorable 0 c::cmp-env-copy :name :ref :ref-ccb :ref-clb :read-nodes :cfun :le"
 "vel :env :global :exported :no-entry :shares-with :closure :var :description :la"
 "mbda :lambda-expression :minarg :maxarg :return-type :parent :local-vars :refere"
 "nced-vars :referenced-funs :referencing-funs :child-funs :file :file-position :c"
 "mp-env :required-lcls :optional-type-check-forms :keyword-type-check-forms 0 :na"
 "me :ref :ref-ccb :ref-clb :read-nodes :exit :destination :var :type 0 :name :ref"
 " :ref-ccb :ref-clb :read-nodes :label :unwind-exit :var :index 0 :local-vars :ty"
 "pe :sp-change :volatile 0 :name :arg-rep-types :return-rep-type :arg-types :retu"
 "rn-type :exact-return-type :multiple-values :expansion :one-liner 0 :local-vars "
 ":type :sp-change :volatile :name :parents :env :args :side-effects :form :toplev"
 "el-form :file :file-position 0 :location :used-p :permanent-p :value 0 :c-types "
 ":rep-type-hash :sorted-types :inline-information 0 :index :name :lisp-type :bits"
 " :numberp :integerp :c-name :to-lisp :from-lisp :from-lisp-unsafe \"COMPILER\" (c:"
 ":name (c::ref 0 :type fixnum) c::ref-ccb c::ref-clb c::read-nodes) ((c::name nil"
 " t nil 0 nil) (c::ref 0 fixnum nil 1 nil) (c::ref-ccb nil t nil 2 nil) (c::ref-c"
 "lb nil t nil 3 nil) (c::read-nodes nil t nil 4 nil)) (c::make-ref) \"Ignore lock "
 "and proceed.\" \"Attempt to define CAS accessor ~S in locked package.\" (c::ref-rea"
 "d-nodes) (c::ref-ref-clb) (c::ref-ref-ccb) (c::ref-ref) (c::ref-name) (deftype f"
 "fi::object nil `#1#) (c::set-nodes c::kind #'c::*current-function* (c::functions"
 "-setting nil) (c::functions-reading nil) (c::loc #2='ffi::object) (type t) (c::i"
 "ndex -1) (ignorable nil)) (#3=(c::name nil t nil 0 c::ref-name) #4=(c::ref 0 fix"
 "num nil 1 c::ref-ref) #5=(c::ref-ccb nil t nil 2 c::ref-ref-ccb) #6=(c::ref-clb "
 "nil t nil 3 c::ref-ref-clb) #7=(c::read-nodes nil t nil 4 c::ref-read-nodes) (c:"
 ":set-nodes nil t nil 5 nil) (c::kind nil t nil 6 nil) (function c::*current-func"
 "tion* t nil 7 nil) (c::functions-setting nil t nil 8 nil) (c::functions-reading "
 "nil t nil 9 nil) (c::loc #2# t nil 10 nil) (type t t nil 11 nil) (c::index -1 t "
 "nil 12 nil) (ignorable nil t nil 13 nil)) (c::%make-var) (c::var-ignorable) (c::"
 "var-index) (c::var-type) (c::var-loc) (c::var-functions-reading) (c::var-functio"
 "ns-setting) (c::var-function) (c::var-kind) (c::var-set-nodes) (c::var-read-node"
 "s) (c::var-ref-clb) (c::var-ref-ccb) (c::var-ref) (c::var-name) (c::cfun (c::lev"
 "el 0) (c::env 0) (c::global nil) (c::exported nil) (c::no-entry nil) (c::shares-"
 "with nil) c::closure c::var c::description lambda c::lambda-expression (c::minar"
 "g 0) (c::maxarg call-arguments-limit) (c::return-type #8='(values &rest t)) (c::"
 "parent c::*current-function*) (c::local-vars nil) (c::referenced-vars nil) (c::r"
 "eferenced-funs nil) (c::referencing-funs nil) (c::child-funs nil) (c::file #9=(c"
 "ar ext::*source-location*)) (file-position #10=(or (cdr ext::*source-location*) "
 "c::*compile-file-position*)) (c::cmp-env #11=(c::cmp-env-copy)) c::required-lcls"
 " (c::optional-type-check-forms nil) (c::keyword-type-check-forms nil)) (#3# #4# "
 "#5# #6# #7# (c::cfun nil t nil 5 nil) (c::level 0 t nil 6 nil) (c::env 0 t nil 7"
 " nil) (c::global nil t nil 8 nil) (c::exported nil t nil 9 nil) (c::no-entry nil"
 " t nil 10 nil) (c::shares-with nil t nil 11 nil) (c::closure nil t nil 12 nil) ("
 "c::var nil t nil 13 nil) (c::description nil t nil 14 nil) (lambda nil t nil 15 "
 "nil) (c::lambda-expression nil t nil 16 nil) (c::minarg 0 t nil 17 nil) (c::maxa"
 "rg call-arguments-limit t nil 18 nil) (c::return-type #8# t nil 19 nil) (c::pare"
 "nt c::*current-function* t nil 20 nil) (c::local-vars nil t nil 21 nil) (c::refe"
 "renced-vars nil t nil 22 nil) (c::referenced-funs nil t nil 23 nil) (c::referenc"
 "ing-funs nil t nil 24 nil) (c::child-funs nil t nil 25 nil) (c::file #9# t nil 2"
 "6 nil) (file-position #10# t nil 27 nil) (c::cmp-env #11# t nil 28 nil) (c::requ"
 "ired-lcls nil t nil 29 nil) (c::optional-type-check-forms nil t nil 30 nil) (c::"
 "keyword-type-check-forms nil t nil 31 nil)) (c::make-fun) (c::fun-keyword-type-c"
 "heck-forms) (c::fun-optional-type-check-forms) (c::fun-required-lcls) (c::fun-cm"
 "p-env) (c::fun-file-position) (c::fun-file) (c::fun-child-funs) (c::fun-referenc"
 "ing-funs) (c::fun-referenced-funs) (c::fun-referenced-vars) (c::fun-local-vars) "
 "(c::fun-parent) (c::fun-return-type) (c::fun-maxarg) (c::fun-minarg) (c::fun-lam"
 "bda-expression) (c::fun-lambda) (c::fun-description) (c::fun-var) (c::fun-closur"
 "e) (c::fun-shares-with) (c::fun-no-entry) (c::fun-exported) (c::fun-global) (c::"
 "fun-env) (c::fun-level) (c::fun-cfun) (c::fun-read-nodes) (c::fun-ref-clb) (c::f"
 "un-ref-ccb) (c::fun-ref) (c::fun-name) (ext::exit c::destination c::var (type #1"
 "2='(values &rest t))) (#3# #4# #5# #6# #7# (ext::exit nil t nil 5 nil) (c::desti"
 "nation nil t nil 6 nil) (c::var nil t nil 7 nil) (type #12# t nil 8 nil)) (c::ma"
 "ke-blk) (c::blk-type) (c::blk-var) (c::blk-destination) (c::blk-exit) (c::blk-re"
 "ad-nodes) (c::blk-ref-clb) (c::blk-ref-ccb) (c::blk-ref) (c::blk-name) (c::label"
 " c::unwind-exit c::var c::index) (#3# #4# #5# #6# #7# (c::label nil t nil 5 nil)"
 " (c::unwind-exit nil t nil 6 nil) (c::var nil t nil 7 nil) (c::index nil t nil 8"
 " nil)) (c::make-tag) (c::tag-index) (c::tag-var) (c::tag-unwind-exit) (c::tag-la"
 "bel) (c::tag-read-nodes) (c::tag-ref-clb) (c::tag-ref-ccb) (c::tag-ref) (c::tag-"
 "name) ((c::local-vars nil) (type #13='(values &rest t)) (c::sp-change nil) (c::v"
 "olatile nil)) ((c::local-vars nil t nil 0 nil) (type #13# t nil 1 nil) (c::sp-ch"
 "ange nil t nil 2 nil) (c::volatile nil t nil 3 nil)) (c::make-info) (c::info-vol"
 "atile) (c::info-sp-change) (c::info-type) (c::info-local-vars) (c::name c::arg-r"
 "ep-types c::return-rep-type c::arg-types c::return-type c::exact-return-type c::"
 "multiple-values c::expansion c::one-liner) ((c::name nil t nil 0 nil) (c::arg-re"
 "p-types nil t nil 1 nil) (c::return-rep-type nil t nil 2 nil) (c::arg-types nil "
 "t nil 3 nil) (c::return-type nil t nil 4 nil) (c::exact-return-type nil t nil 5 "
 "nil) (c::multiple-values nil t nil 6 nil) (c::expansion nil t nil 7 nil) (c::one"
 "-liner nil t nil 8 nil)) (c::make-inline-info) (c::inline-info-one-liner) (c::in"
 "line-info-expansion) (c::inline-info-multiple-values) (c::inline-info-exact-retu"
 "rn-type) (c::inline-info-return-type) (c::inline-info-arg-types) (c::inline-info"
 "-return-rep-type) (c::inline-info-arg-rep-types) (c::inline-info-name) ((c::name"
 " nil) (c::parents nil) (c::env #14=(c::cmp-env-copy)) (c::args #15='nil) (c::sid"
 "e-effects nil) (c::form nil) (c::toplevel-form nil) (c::file nil) (file-position"
 " 0)) ((c::local-vars nil t nil 0 c::info-local-vars) (type '(values &rest t) t n"
 "il 1 c::info-type) (c::sp-change nil t nil 2 c::info-sp-change) (c::volatile nil"
 " t nil 3 c::info-volatile) (c::name nil t nil 4 nil) (c::parents nil t nil 5 nil"
 ") (c::env #14# t nil 6 nil) (c::args #15# t nil 7 nil) (c::side-effects nil t ni"
 "l 8 nil) (c::form nil t nil 9 nil) (c::toplevel-form nil t nil 10 nil) (c::file "
 "nil t nil 11 nil) (file-position 0 t nil 12 nil)) (c::do-make-c1form) (c::c1form"
 "-file-position) (c::c1form-file) (c::c1form-toplevel-form) (c::c1form-form) (c::"
 "c1form-side-effects) (c::c1form-args) (c::c1form-env) (c::c1form-parents) (c::c1"
 "form-name) (c::c1form-volatile) (c::c1form-sp-change) (c::c1form-type) (c::c1for"
 "m-local-vars) ((ext::location nil) (c::used-p nil) (c::permanent-p t) (c::value "
 "nil)) ((ext::location nil t nil 0 nil) (c::used-p nil t nil 1 nil) (c::permanent"
 "-p t t nil 2 nil) (c::value nil t nil 3 nil)) (c::make-vv) (c::vv-value) (c::vv-"
 "permanent-p) (c::vv-used-p) (c::vv-location) ((c::c-types #16='nil) c::rep-type-"
 "hash c::sorted-types c::inline-information) ((c::c-types #16# t nil 0 nil) (c::r"
 "ep-type-hash nil t nil 1 nil) (c::sorted-types nil t nil 2 nil) (c::inline-infor"
 "mation nil t nil 3 nil)) (c::make-machine) (c::machine-inline-information) (c::m"
 "achine-sorted-types) (c::machine-rep-type-hash) (c::machine-c-types) ((c::index "
 "0) (c::name t) (c::lisp-type t) (c::bits nil) (numberp nil) (integerp nil) (c::c"
 "-name nil) (c::to-lisp nil) (c::from-lisp nil) (c::from-lisp-unsafe nil)) ((c::i"
 "ndex 0 t nil 0 nil) (c::name t t nil 1 nil) (c::lisp-type t t nil 2 nil) (c::bit"
 "s nil t nil 3 nil) (numberp nil t nil 4 nil) (integerp nil t nil 5 nil) (c::c-na"
 "me nil t nil 6 nil) (c::to-lisp nil t nil 7 nil) (c::from-lisp nil t nil 8 nil) "
 "(c::from-lisp-unsafe nil t nil 9 nil)) (c::%make-rep-type) (c::rep-type-from-lis"
 "p-unsafe) (c::rep-type-from-lisp) (c::rep-type-to-lisp) (c::rep-type-c-name) (c:"
 ":rep-type-integerp) (c::rep-type-numberp) (c::rep-type-bits) (c::rep-type-lisp-t"
 "ype) (c::rep-type-name) (c::rep-type-index)" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
