static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)1871, (cl_index)1871,
        (ecl_base_char*)
":args :only-small-values \"Improper list found in lisp form~%~A\" c::*c1-dispatch-"
 "table* \"~s is not a legal function name.\" :always c::*current-form* c::c1expr c:"
 ":*c1nil* c::c1nil c::*c1t* c::c1t c::*inline-max-depth* \"Inlining ~a\" c::c1call "
 "c::*setjmps* c::*cmp-env* :safe \"In a call to ~a\" c::call-local :sp-change :side"
 "-effects c::call-global c::c1call-global c::pure \"Can't constant-fold ~s ~s: ~a~"
 "%\" c::c1call-constant-fold c::*compile-file-position* c::*current-toplevel-form*"
 " c::*c2-dispatch-table* c::c2expr c::*unwind-exit* c::*exit* c::*lcl* c::*temp* "
 "c::c2expr* c::c1with-backend c::c1progn c::*lex* c::*destination* c::trash c::c2"
 "progn c::c1args* c::*compiler-temps* 0 0 0 0 \"TMP\" c::compiler \"The parameter ~s"
 " for the inline function ~s is illegal.\" 'let si::define-inline-function c::chk-"
 "symbol-macrolet c::object-type c::add-symbol c::make-c1form* c::c1constant-value"
 " c::c1var c::cmperr c::c1funcall 0 c::c1form-p 0 0 0 c::cmp-macro-function c::cm"
 "p-expand-macro c::unoptimized-long-call c::local-function-ref c::cmp-env-search-"
 "macro c::inline-possible c::cmp-expand-compiler-macro c::clos-compiler-macro-exp"
 "and c::declared-inline-p c::cmp-env-optimization c::cmpnote c::cmp-env-copy c::m"
 "acroexpand-lambda-block c::transform-funcall/apply-into-let* c::process-let-bind"
 "ings c::fun-cmp-env c::push-vars c::process-let-body c::fun-lambda-expression c:"
 ":get-local-return-type c::get-local-arg-types c::and-form-type 0 c::function-may"
 "-change-sp c::function-may-have-side-effects c::propagate-types 0 c::policy-eval"
 "uate-forms c::c1form-constant-p c::cmpdebug 0 c::c1form-file c::c1form-file-posi"
 "tion c::c1form-toplevel-form c::c1form-form c::c1form-env c::c1form-name c::c1fo"
 "rm-args 0 c::next-label c::wt-label 0 0 c::t1/c1expr c::c1form-type 0 0 0 si::dm"
 "-too-few-arguments \"COMPILER\" (c::tmp0 c::tmp1 c::tmp2 c::tmp3 c::tmp4 c::tmp5 c"
 "::tmp6 c::tmp7 c::tmp8 c::tmp9)" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
