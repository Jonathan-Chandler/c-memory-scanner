static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)1500, (cl_index)1500,
        (ecl_base_char*)
"c::*cmp-env* \"COMPILER-TYPECASE form missing a T statement\" :args c::c1compiler-"
 "typecase 0 0 c::c2compiler-typecase c::+simple-type-assertions+ (:object) (:one-"
 "liner nil) ((:bool :object :object) :void \"if (ecl_unlikely(!(#0)))\n         FEw"
 "rong_type_argument(#1,#2);\" :one-liner nil) c::simple-type-assertion #1=#:%asser"
 "ted-value (declare (:read-only #1#)) c::expand-type-assertion \"Failed type asser"
 "tion for value ~A and type ~A\" 'simple-type-error \"The constant value ~S is not "
 "a ~S\" \"The expression ~S is not of the expected type ~S\" \"Checking type of ~S to"
 " be ~S\" #2=#:%checked-value (declare (:read-only #2#)) c::c1checked-value c::c2c"
 "hecked-value \"Checking type of ~A to be ~A\" c::optional-type-assertion c::type-a"
 "ssertion 0 c::constant-value-p c::c1progn c::baboon c::c1vref c::var-type c::c1f"
 "orm-primary-type c::type-or c::make-c1form* 0 c::c2expr 0 0 c::special-variable-"
 "p c::symbol-macro-p 0 c::trivial-type-p c::policy-type-assertions c::values-type"
 "-primary-type c::policy-evaluate-forms c::cmpwarn c::c1expr c::type-and c::cmpde"
 "bug 0 0 si::dm-too-few-arguments si::dm-too-many-arguments 0 \"COMPILER\" ((cons ."
 " \"if (ecl_unlikely(ECL_ATOM(#0))) FEtype_error_cons(#0);\") (array . \"if (ecl_unl"
 "ikely(!ECL_ARRAYP(#0))) FEtype_error_array(#0);\") (list . \"if (ecl_unlikely(!ECL"
 "_LISTP(#0))) FEtype_error_list(#0);\") (sequence . \"if (ecl_unlikely(!(ECL_LISTP("
 "#0) || ECL_VECTORP(#0))))\n           FEtype_error_sequence(#0);\") (vector . \"if "
 "(ecl_unlikely(!ECL_VECTORP(#0))) FEtype_error_vector(#0);\"))" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
