
#ifdef ECL_DYNAMIC_VV
static cl_object *VV;
#else
static cl_object VV[VM];
#endif
#include <winsock2.h>
typedef unsigned int uint32_t;
#define wincoerce(t,x) ((t)(x))
typedef int socklen_t;
#define MSG_WAITALL 0
#define MSG_EOR 0
#define MSG_DONTWAIT 0
#define MSG_NOSIGNAL 0
#define MSG_CONFIRM 0
#define MSG_TRUNC 0
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <ws2tcpip.h>
#define AF_LOCAL -1

static void fill_inet_sockaddr(struct sockaddr_in *sockaddr, int port,
                               int a1, int a2, int a3, int a4)
{
#if defined(_MSC_VER) || defined(mingw32)
        memset(sockaddr,0,sizeof(struct sockaddr_in));
#else
        bzero(sockaddr,sizeof(struct sockaddr_in));
#endif
        sockaddr->sin_family = AF_INET;
        sockaddr->sin_port = htons(port);
        sockaddr->sin_addr.s_addr= htonl((uint32_t)a1<<24 | (uint32_t)a2<<16 | (uint32_t)a3<<8 | (uint32_t)a4) ;

}

#ifndef NI_MAXHOST
  #define NI_MAXHOST 1025
  #endif

static void *
safe_buffer_pointer(cl_object x, cl_index size)
{
        cl_type t = ecl_t_of(x);
        int ok = 0;
        if (t == t_base_string) {
                ok = (size <= x->base_string.dim);
        } else if (t == t_vector) {
                cl_elttype aet = (cl_elttype)x->vector.elttype;
                if (aet == ecl_aet_b8 || aet == ecl_aet_i8 || aet == ecl_aet_bc) {
                        ok = (size <= x->vector.dim);
                } else if (aet == ecl_aet_fix || aet == ecl_aet_index) {
                        cl_index divisor = sizeof(cl_index);
                        size = (size + divisor - 1) / divisor;
                        ok = (size <= x->vector.dim);
                }
        }
        if (!ok) {
                FEerror("Lisp object is not a valid socket buffer: ~A", 1, x);
        }
        return (void *)x->vector.self.t;
}

#define EADDRINUSE WSAEADDRINUSE
#define ECONNREFUSED WSAECONNREFUSED
#define ETIMEDOUT WSAETIMEDOUT
#define ENOBUFS WSAENOBUFS
#define EOPNOTSUPP WSAEOPNOTSUPP
#define EPROTONOSUPPORT WSAEPROTONOSUPPORT
#define ESOCKTNOSUPPORT WSAESOCKTNOSUPPORT
#define ENETUNREACH WSAENETUNREACH
#ifndef EAI_SYSTEM
  #define EAI_SYSTEM 0
  #endif

#ifdef __cplusplus
extern "C" {
#endif
static cl_object L1wsock_initialize();
static cl_object L2ff_socket(cl_object , cl_object , cl_object );
static cl_object L3ff_listen(cl_object , cl_object );
static cl_object L4ff_close(cl_object );
static cl_object L5ff_closesocket(cl_object );
static cl_object L7split(cl_narg, cl_object , ...);
static cl_object LC6is_ws(cl_narg, cl_object , ...);
static cl_object LC8host_ent_address(cl_object );
static cl_object L9get_host_by_name(cl_object );
static cl_object L10get_host_by_address(cl_object );
static cl_object LC11__lambda34();
static cl_object LC13print_object(cl_object , cl_object );
static cl_object LC12si___print_unreadable_object_body_(cl_narg, ...);
static cl_object LC14shared_initialize(cl_narg, cl_object , cl_object , ...);
#define LC14shared_initializekeys (&VV[205])
static cl_object LC15socket_listen(cl_object , cl_object );
static cl_object LC16socket_close_low_level(cl_object );
static cl_object LC17socket_close(cl_narg, cl_object , ...);
#define LC17socket_closekeys (&VV[211])
static cl_object LC18socket_receive(cl_narg, cl_object , cl_object , cl_object , ...);
#define LC18socket_receivekeys (&VV[212])
static cl_object LC20__lambda72();
static cl_object LC19__lambda73(cl_object , cl_object );
static cl_object L21get_protocol_by_name(cl_object );
static cl_object L22make_inet_address(cl_object );
static cl_object LC23__lambda75();
static cl_object L24make_inet_socket(cl_object , cl_object );
static cl_object LC25socket_bind(cl_narg, cl_object , ...);
static cl_object LC26socket_accept(cl_object );
static cl_object LC27socket_connect(cl_narg, cl_object , ...);
static cl_object LC28socket_peername(cl_object );
static cl_object LC29socket_name(cl_object );
static cl_object LC30socket_close_low_level(cl_object );
static cl_object LC31socket_send(cl_narg, cl_object , cl_object , cl_object , ...);
#define LC31socket_sendkeys (&VV[221])
static cl_object LC32__lambda91();
static cl_object LC33initialize_instance(cl_narg, cl_object , ...);
static cl_object LC35socket_bind(volatile cl_narg, cl_object volatile , ...);
static cl_object LC36socket_accept(cl_object );
static cl_object LC38socket_connect(volatile cl_narg, cl_object volatile , ...);
static cl_object LC39socket_peername(cl_object );
static cl_object LC40socket_close(cl_narg, cl_object , ...);
#define LC40socket_closekeys (&VV[211])
static cl_object LC41socket_make_stream(cl_narg, cl_object , ...);
static cl_object LC42non_blocking_mode(cl_object );
static cl_object LC43_setf_non_blocking_mode_(cl_object , cl_object );
static cl_object LC34__lambda143(cl_narg, cl_object , ...);
static cl_object LC37__lambda179(cl_narg, cl_object , ...);
static cl_object LC44socket_bind(cl_narg, cl_object , ...);
static cl_object LC45socket_accept(cl_object );
static cl_object LC46socket_connect(cl_narg, cl_object , ...);
static cl_object LC47socket_peername(cl_object );
static cl_object LC48_setf_non_blocking_mode_(cl_object , cl_object );
static cl_object LC49socket_close(cl_narg, cl_object , ...);
#define LC49socket_closekeys (&VV[211])
static cl_object LC50non_blocking_mode(cl_object );
static cl_object LC51_setf_non_blocking_mode_(cl_object , cl_object );
static cl_object L52dup(cl_object );
static cl_object L53auto_close_two_way_stream(cl_object );
static cl_object L54socket_make_stream_inner(cl_object , cl_object , cl_object , cl_object , cl_object , cl_object );
static cl_object LC55socket_make_stream(cl_narg, cl_object , ...);
#define LC55socket_make_streamkeys (&VV[233])
static cl_object LC56ext__stream_fd(cl_object );
static cl_object LC57socket_make_stream(cl_narg, cl_object , ...);
#define LC57socket_make_streamkeys (&VV[238])
static cl_object L58get_win32_error_string(cl_object );
static cl_object LC60__lambda295();
static cl_object LC59__lambda296(cl_object , cl_object );
static cl_object LC61define_socket_condition(cl_object , cl_object );
static cl_object L62condition_for_errno(cl_object );
static cl_object L63socket_error(cl_object );
static cl_object L64name_service_error(cl_narg, cl_object , ...);
static cl_object LC66__lambda319();
static cl_object LC65__lambda320(cl_object , cl_object );
static cl_object LC67define_name_service_condition(cl_object , cl_object );
static cl_object L68condition_for_name_service_errno(cl_object );
static cl_object L69get_name_service_error_message(cl_object );
static cl_object L70get_sockopt_int(cl_object , cl_object , cl_object );
static cl_object L71get_sockopt_bool(cl_object , cl_object , cl_object );
static cl_object L72get_sockopt_timeval(cl_object , cl_object , cl_object );
static cl_object L73get_sockopt_linger(cl_object , cl_object , cl_object );
static cl_object L74set_sockopt_int(cl_object , cl_object , cl_object , cl_object );
static cl_object L75set_sockopt_bool(cl_object , cl_object , cl_object , cl_object );
static cl_object L76set_sockopt_timeval(cl_object , cl_object , cl_object , cl_object );
static cl_object L77set_sockopt_linger(cl_object , cl_object , cl_object , cl_object );
static cl_object LC78define_sockopt(cl_object , cl_object );
static cl_object L79sockopt_type(cl_object );
static cl_object L80sockopt_receive_buffer(cl_object );
static cl_object L81_setf_sockopt_receive_buffer_(cl_object , cl_object );
static cl_object L82sockopt_receive_timeout(cl_object );
static cl_object L83_setf_sockopt_receive_timeout_(cl_object , cl_object );
static cl_object L84sockopt_send_timeout(cl_object );
static cl_object L85_setf_sockopt_send_timeout_(cl_object , cl_object );
static cl_object L86sockopt_reuse_address(cl_object );
static cl_object L87_setf_sockopt_reuse_address_(cl_object , cl_object );
static cl_object L88sockopt_keep_alive(cl_object );
static cl_object L89_setf_sockopt_keep_alive_(cl_object , cl_object );
static cl_object L90sockopt_dont_route(cl_object );
static cl_object L91_setf_sockopt_dont_route_(cl_object , cl_object );
static cl_object L92sockopt_linger(cl_object );
static cl_object L93_setf_sockopt_linger_(cl_object , cl_object );
static cl_object L94sockopt_tcp_nodelay(cl_object );
static cl_object L95_setf_sockopt_tcp_nodelay_(cl_object , cl_object );
static cl_object Cblock;
#define VM 282
#define VMtemp 85
#define ECL_DEFINE_SETF_FUNCTIONS \
VV[210]=ecl_setf_definition(ECL_SYM("SLOT-VALUE",973),ECL_T);
#ifdef __cplusplus
}
#endif
/*
 * Exported Lisp functions
 */
#define compiler_cfuns_size 47
static const struct ecl_cfunfixed compiler_cfuns[] = {
 /*t,m,narg,padding,name=function-location,block=name-location,entry,entry_fixed,file,file_position*/
{0,0,0,0,ecl_make_fixnum(192),ecl_make_fixnum(3),(cl_objectfn)L1wsock_initialize,NULL,ECL_NIL,ecl_make_fixnum(1707)},
{0,0,3,0,ecl_make_fixnum(193),ecl_make_fixnum(9),(cl_objectfn)L2ff_socket,NULL,ECL_NIL,ecl_make_fixnum(4045)},
{0,0,2,0,ecl_make_fixnum(194),ecl_make_fixnum(10),(cl_objectfn)L3ff_listen,NULL,ECL_NIL,ecl_make_fixnum(4116)},
{0,0,1,0,ecl_make_fixnum(195),ecl_make_fixnum(11),(cl_objectfn)L4ff_close,NULL,ECL_NIL,ecl_make_fixnum(4182)},
{0,0,1,0,ecl_make_fixnum(196),ecl_make_fixnum(12),(cl_objectfn)L5ff_closesocket,NULL,ECL_NIL,ecl_make_fixnum(4241)},
{0,0,-2,0,ecl_make_fixnum(197),ecl_make_fixnum(14),(cl_objectfn)L7split,NULL,ECL_NIL,ecl_make_fixnum(4465)},
{0,0,1,0,ecl_make_fixnum(203),ecl_make_fixnum(21),(cl_objectfn)L9get_host_by_name,NULL,ECL_NIL,ecl_make_fixnum(5938)},
{0,0,1,0,ecl_make_fixnum(204),ecl_make_fixnum(24),(cl_objectfn)L10get_host_by_address,NULL,ECL_NIL,ecl_make_fixnum(8642)},
{0,0,1,0,ecl_make_fixnum(217),ecl_make_fixnum(54),(cl_objectfn)L21get_protocol_by_name,NULL,ECL_NIL,ecl_make_fixnum(21013)},
{0,0,1,0,ecl_make_fixnum(218),ecl_make_fixnum(56),(cl_objectfn)L22make_inet_address,NULL,ECL_NIL,ecl_make_fixnum(22612)},
{0,0,2,0,ecl_make_fixnum(219),ecl_make_fixnum(59),(cl_objectfn)L24make_inet_socket,NULL,ECL_NIL,ecl_make_fixnum(23079)},
{0,0,1,0,ecl_make_fixnum(231),ecl_make_fixnum(94),(cl_objectfn)L52dup,NULL,ECL_NIL,ecl_make_fixnum(45404)},
{0,0,6,0,ecl_make_fixnum(232),ecl_make_fixnum(100),(cl_objectfn)L54socket_make_stream_inner,NULL,ECL_NIL,ecl_make_fixnum(45681)},
{0,0,1,0,ecl_make_fixnum(242),ecl_make_fixnum(104),(cl_objectfn)L58get_win32_error_string,NULL,ECL_NIL,ecl_make_fixnum(49552)},
{0,0,2,0,ecl_make_fixnum(245),ecl_make_fixnum(111),(cl_objectfn)LC61define_socket_condition,NULL,ECL_NIL,ecl_make_fixnum(50981)},
{0,0,1,0,ecl_make_fixnum(248),ecl_make_fixnum(139),(cl_objectfn)L62condition_for_errno,NULL,ECL_NIL,ecl_make_fixnum(52842)},
{0,0,1,0,ecl_make_fixnum(249),ecl_make_fixnum(105),(cl_objectfn)L63socket_error,NULL,ECL_NIL,ecl_make_fixnum(52952)},
{0,0,-2,0,ecl_make_fixnum(250),ecl_make_fixnum(142),(cl_objectfn)L64name_service_error,NULL,ECL_NIL,ecl_make_fixnum(53252)},
{0,0,2,0,ecl_make_fixnum(253),ecl_make_fixnum(147),(cl_objectfn)LC67define_name_service_condition,NULL,ECL_NIL,ecl_make_fixnum(54250)},
{0,0,1,0,ecl_make_fixnum(254),ecl_make_fixnum(155),(cl_objectfn)L68condition_for_name_service_errno,NULL,ECL_NIL,ecl_make_fixnum(54996)},
{0,0,1,0,ecl_make_fixnum(255),ecl_make_fixnum(156),(cl_objectfn)L69get_name_service_error_message,NULL,ECL_NIL,ecl_make_fixnum(55137)},
{0,0,3,0,ecl_make_fixnum(256),ecl_make_fixnum(158),(cl_objectfn)L70get_sockopt_int,NULL,ECL_NIL,ecl_make_fixnum(55406)},
{0,0,3,0,ecl_make_fixnum(257),ecl_make_fixnum(159),(cl_objectfn)L71get_sockopt_bool,NULL,ECL_NIL,ecl_make_fixnum(55911)},
{0,0,3,0,ecl_make_fixnum(258),ecl_make_fixnum(160),(cl_objectfn)L72get_sockopt_timeval,NULL,ECL_NIL,ecl_make_fixnum(56425)},
{0,0,3,0,ecl_make_fixnum(259),ecl_make_fixnum(161),(cl_objectfn)L73get_sockopt_linger,NULL,ECL_NIL,ecl_make_fixnum(57155)},
{0,0,4,0,ecl_make_fixnum(260),ecl_make_fixnum(162),(cl_objectfn)L74set_sockopt_int,NULL,ECL_NIL,ecl_make_fixnum(57734)},
{0,0,4,0,ecl_make_fixnum(261),ecl_make_fixnum(163),(cl_objectfn)L75set_sockopt_bool,NULL,ECL_NIL,ecl_make_fixnum(58219)},
{0,0,4,0,ecl_make_fixnum(262),ecl_make_fixnum(164),(cl_objectfn)L76set_sockopt_timeval,NULL,ECL_NIL,ecl_make_fixnum(59329)},
{0,0,4,0,ecl_make_fixnum(263),ecl_make_fixnum(165),(cl_objectfn)L77set_sockopt_linger,NULL,ECL_NIL,ecl_make_fixnum(59439)},
{0,0,2,0,ecl_make_fixnum(264),ecl_make_fixnum(172),(cl_objectfn)LC78define_sockopt,NULL,ECL_NIL,ecl_make_fixnum(60116)},
{0,0,1,0,ecl_make_fixnum(265),ecl_make_fixnum(173),(cl_objectfn)L79sockopt_type,NULL,ECL_NIL,ecl_make_fixnum(60767)},
{0,0,1,0,ecl_make_fixnum(266),ecl_make_fixnum(174),(cl_objectfn)L80sockopt_receive_buffer,NULL,ECL_NIL,ecl_make_fixnum(60827)},
{0,0,2,0,ecl_make_fixnum(267),ecl_make_fixnum(175),(cl_objectfn)L81_setf_sockopt_receive_buffer_,NULL,ECL_NIL,ecl_make_fixnum(60827)},
{0,0,1,0,ecl_make_fixnum(268),ecl_make_fixnum(176),(cl_objectfn)L82sockopt_receive_timeout,NULL,ECL_NIL,ecl_make_fixnum(60896)},
{0,0,2,0,ecl_make_fixnum(269),ecl_make_fixnum(177),(cl_objectfn)L83_setf_sockopt_receive_timeout_,NULL,ECL_NIL,ecl_make_fixnum(60896)},
{0,0,1,0,ecl_make_fixnum(270),ecl_make_fixnum(178),(cl_objectfn)L84sockopt_send_timeout,NULL,ECL_NIL,ecl_make_fixnum(60972)},
{0,0,2,0,ecl_make_fixnum(271),ecl_make_fixnum(179),(cl_objectfn)L85_setf_sockopt_send_timeout_,NULL,ECL_NIL,ecl_make_fixnum(60972)},
{0,0,1,0,ecl_make_fixnum(272),ecl_make_fixnum(180),(cl_objectfn)L86sockopt_reuse_address,NULL,ECL_NIL,ecl_make_fixnum(61045)},
{0,0,2,0,ecl_make_fixnum(273),ecl_make_fixnum(181),(cl_objectfn)L87_setf_sockopt_reuse_address_,NULL,ECL_NIL,ecl_make_fixnum(61045)},
{0,0,1,0,ecl_make_fixnum(274),ecl_make_fixnum(182),(cl_objectfn)L88sockopt_keep_alive,NULL,ECL_NIL,ecl_make_fixnum(61117)},
{0,0,2,0,ecl_make_fixnum(275),ecl_make_fixnum(183),(cl_objectfn)L89_setf_sockopt_keep_alive_,NULL,ECL_NIL,ecl_make_fixnum(61117)},
{0,0,1,0,ecl_make_fixnum(276),ecl_make_fixnum(184),(cl_objectfn)L90sockopt_dont_route,NULL,ECL_NIL,ecl_make_fixnum(61186)},
{0,0,2,0,ecl_make_fixnum(277),ecl_make_fixnum(185),(cl_objectfn)L91_setf_sockopt_dont_route_,NULL,ECL_NIL,ecl_make_fixnum(61186)},
{0,0,1,0,ecl_make_fixnum(278),ecl_make_fixnum(186),(cl_objectfn)L92sockopt_linger,NULL,ECL_NIL,ecl_make_fixnum(61255)},
{0,0,2,0,ecl_make_fixnum(279),ecl_make_fixnum(187),(cl_objectfn)L93_setf_sockopt_linger_,NULL,ECL_NIL,ecl_make_fixnum(61255)},
{0,0,1,0,ecl_make_fixnum(280),ecl_make_fixnum(188),(cl_objectfn)L94sockopt_tcp_nodelay,NULL,ECL_NIL,ecl_make_fixnum(61437)},
{0,0,2,0,ecl_make_fixnum(281),ecl_make_fixnum(189),(cl_objectfn)L95_setf_sockopt_tcp_nodelay_,NULL,ECL_NIL,ecl_make_fixnum(61437)},
};
