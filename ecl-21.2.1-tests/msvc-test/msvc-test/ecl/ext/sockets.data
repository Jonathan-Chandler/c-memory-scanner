static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)16173, (cl_index)16173,
        (ecl_base_char*)
":wsock sb-bsd-sockets::+wsock-initialized+ \"Unable to initialize Windows Socket "
 "library\" sb-bsd-sockets::wsock-initialize sb-bsd-sockets::+af-inet+ sb-bsd-socke"
 "ts::+af-local+ sb-bsd-sockets::+eagain+ sb-bsd-sockets::+eintr+ sb-bsd-sockets::"
 "+af-named-pipe+ sb-bsd-sockets::ff-socket sb-bsd-sockets::ff-listen sb-bsd-socke"
 "ts::ff-close sb-bsd-sockets::ff-closesocket (#\\  #\\Tab) sb-bsd-sockets::split sb"
 "-bsd-sockets::host-ent sb-bsd-sockets::host-ent-address :delete-methods :aliases"
 " :addresses \"get-host-by-name\" sb-bsd-sockets::get-host-by-name (and (typep sb-b"
 "sd-sockets::address 'vector) (= (length sb-bsd-sockets::address) 4)) \"get-host-b"
 "y-address\" sb-bsd-sockets::get-host-by-address sb-bsd-sockets::socket #1=\"No soc"
 "ket family\" sb-bsd-sockets::file-descriptor \"descriptor \" \"(unbound descriptor)\""
 " :datagram 0 0 (:datagram :stream) \"socket\" sb-bsd-sockets::protocol sb-bsd-sock"
 "ets::socket-bind sb-bsd-sockets::socket-accept sb-bsd-sockets::socket-connect sb"
 "-bsd-sockets::socket-peername sb-bsd-sockets::socket-name sb-bsd-sockets::socket"
 "-listen sb-bsd-sockets::socket-receive sb-bsd-sockets::socket-send sb-bsd-socket"
 "s::socket-close sb-bsd-sockets::socket-make-stream sb-bsd-sockets::non-blocking-"
 "mode sb-bsd-sockets::socket-close-low-level \"listen\" \"close\" \"You have to supply"
 " either buffer or length!\" \"receive\" sb-bsd-sockets::unknown-protocol #2=\"Protoc"
 "ol not found: ~A\" sb-bsd-sockets::get-protocol-by-name (#\\.) sb-bsd-sockets::mak"
 "e-inet-address sb-bsd-sockets::inet-socket :protocol sb-bsd-sockets::make-inet-s"
 "ocket (= 2 (length sb-bsd-sockets::address)) (sb-bsd-sockets::address) \"Socket-b"
 "ind needs three parameters for inet sockets.\" \"bind\" \"accept\" :descriptor \"conne"
 "ct\" \"getpeername\" \"getsockname\" (or (stringp sb-bsd-sockets::buffer) (typep sb-b"
 "sd-sockets::buffer 'vector)) \"send\" sb-bsd-sockets::local-socket sb-bsd-sockets:"
 ":proxy-socket (= 1 (length sb-bsd-sockets::address)) \"Socket-bind needs two para"
 "meters for local sockets.\" #A(t (4) (127 0 0 1)) \"!<socket >~D 00000000-00000000"
 "-00000000-00000000\" \"socket-bind\" sb-bsd-sockets::local-path \"Socket-connect nee"
 "ds two parameters for local sockets.\" \"!<socket >\" sb-bsd-sockets::eof #A(t (4) "
 "(127 0 0 1)) \"socket-peername\" sb-bsd-sockets::named-pipe-socket \"\\\\\\\\.\\\\pipe\\\\\""
 " \"CreateNamedPipe\" sb-bsd-sockets::pipe-name :pipe-name \"SetNamedPipeHandleState"
 "\" sb-bsd-sockets::non-blocking-p \"DisconnectNamedPipe\" \"No next method.\" \"ioctls"
 "ocket\" sb-bsd-sockets::dup :input-output-wsock :buffering :input-wsock :output-w"
 "sock \"SOCKET-MAKE-STREAM: at least one of :INPUT or :OUTPUT has to be true.\" sb-"
 "bsd-sockets::socket-make-stream-inner ext::stream-fd :smm-input :smm-output sb-b"
 "sd-sockets::get-win32-error-string sb-bsd-sockets::socket-error #3=\"Socket error"
 " in \\\"~A\\\": ~A (~A)\" sb-bsd-sockets::c-constant (sb-bsd-sockets::socket-error) s"
 "b-bsd-sockets::socket-error-symbol sb-bsd-sockets::*conditions-for-errno* sb-bsd"
 "-sockets::define-socket-condition sb-bsd-sockets::eaddrinuse sb-bsd-sockets::add"
 "ress-in-use-error sb-bsd-sockets::eagain sb-bsd-sockets::interrupted-error sb-bs"
 "d-sockets::ebadf sb-bsd-sockets::bad-file-descriptor-error sb-bsd-sockets::econn"
 "refused sb-bsd-sockets::connection-refused-error sb-bsd-sockets::etimedout sb-bs"
 "d-sockets::operation-timeout-error sb-bsd-sockets::eintr sb-bsd-sockets::einval "
 "sb-bsd-sockets::invalid-argument-error sb-bsd-sockets::enobufs sb-bsd-sockets::n"
 "o-buffers-error sb-bsd-sockets::enomem sb-bsd-sockets::out-of-memory-error sb-bs"
 "d-sockets::eopnotsupp sb-bsd-sockets::operation-not-supported-error sb-bsd-socke"
 "ts::eperm sb-bsd-sockets::operation-not-permitted-error sb-bsd-sockets::eprotono"
 "support sb-bsd-sockets::protocol-not-supported-error sb-bsd-sockets::esocktnosup"
 "port sb-bsd-sockets::socket-type-not-supported-error sb-bsd-sockets::enetunreach"
 " sb-bsd-sockets::network-unreachable-error sb-bsd-sockets::condition-for-errno :"
 "errno :syscall sb-bsd-sockets::name-service-error #4=\"Name service error in \\\"~A"
 "\\\": ~A (~A)\" (sb-bsd-sockets::name-service-error) sb-bsd-sockets::name-service-e"
 "rror-symbol sb-bsd-sockets::*conditions-for-name-service-errno* sb-bsd-sockets::"
 "define-name-service-condition sb-bsd-sockets::eai_noname sb-bsd-sockets::host-no"
 "t-found-error sb-bsd-sockets::eai_again sb-bsd-sockets::try-again-error sb-bsd-s"
 "ockets::eai_fail sb-bsd-sockets::no-recovery-error sb-bsd-sockets::name-service "
 "sb-bsd-sockets::condition-for-name-service-errno sb-bsd-sockets::get-name-servic"
 "e-error-message \"Sockopt error: ~A\" sb-bsd-sockets::get-sockopt-int sb-bsd-socke"
 "ts::get-sockopt-bool sb-bsd-sockets::get-sockopt-timeval sb-bsd-sockets::get-soc"
 "kopt-linger sb-bsd-sockets::set-sockopt-int sb-bsd-sockets::set-sockopt-bool sb-"
 "bsd-sockets::set-sockopt-timeval sb-bsd-sockets::set-sockopt-linger (sb-bsd-sock"
 "ets::socket) \"GET-SOCKOPT-~A\" (sb-bsd-sockets::socket-file-descriptor sb-bsd-soc"
 "kets::socket) (sb-bsd-sockets::value sb-bsd-sockets::socket) \"SET-SOCKOPT-~A\" sb"
 "-bsd-sockets::value sb-bsd-sockets::define-sockopt sb-bsd-sockets::sockopt-type "
 "sb-bsd-sockets::sockopt-receive-buffer (setf sb-bsd-sockets::sockopt-receive-buf"
 "fer) sb-bsd-sockets::sockopt-receive-timeout (setf sb-bsd-sockets::sockopt-recei"
 "ve-timeout) sb-bsd-sockets::sockopt-send-timeout (setf sb-bsd-sockets::sockopt-s"
 "end-timeout) sb-bsd-sockets::sockopt-reuse-address (setf sb-bsd-sockets::sockopt"
 "-reuse-address) sb-bsd-sockets::sockopt-keep-alive (setf sb-bsd-sockets::sockopt"
 "-keep-alive) sb-bsd-sockets::sockopt-dont-route (setf sb-bsd-sockets::sockopt-do"
 "nt-route) sb-bsd-sockets::sockopt-linger (setf sb-bsd-sockets::sockopt-linger) s"
 "b-bsd-sockets::sockopt-tcp-nodelay (setf sb-bsd-sockets::sockopt-tcp-nodelay) #:"
 "sockets #:sb-bsd-sockets 0 0 0 0 0 0 si::make-seq-iterator si::seq-iterator-ref "
 "si::seq-iterator-next clos::install-method sb-bsd-sockets::host-ent-addresses 0 "
 "0 :protocol :type sb-bsd-sockets::socket-file-descriptor sb-bsd-sockets::socket-"
 "family sb-bsd-sockets::socket-type 0 :abort :oob :peek :waitall :element-type sb"
 "-bsd-sockets::unknown-protocol-name 0 0 0 sb-bsd-sockets::socket-protocol :addre"
 "ss :external-format :oob :eor :dontroute :dontwait :nosignal :confirm :more (set"
 "f sb-bsd-sockets::non-blocking-mode) 0 0 :input :output :buffering :element-type"
 " :external-format :input :output :buffering :external-format 0 sb-bsd-sockets::s"
 "ocket-error-errno sb-bsd-sockets::socket-error-syscall 0 si::dm-too-few-argument"
 "s si::dm-too-many-arguments 0 0 0 sb-bsd-sockets::name-service-error-errno sb-bs"
 "d-sockets::name-service-error-syscall 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
 "0 0 0 0 0 0 0 0 \"SB-BSD-SOCKETS\" ((:writers ((setf sb-bsd-sockets::host-ent-name"
 ")) :readers (sb-bsd-sockets::host-ent-name) :initargs (:name) :name sb-bsd-socke"
 "ts::name) (:writers ((setf sb-bsd-sockets::host-ent-aliases)) :readers (sb-bsd-s"
 "ockets::host-ent-aliases) :initargs (:aliases) :name sb-bsd-sockets::aliases) (:"
 "writers ((setf sb-bsd-sockets::host-ent-address-type)) :readers (sb-bsd-sockets:"
 ":host-ent-address-type) :initargs (:type) :name sb-bsd-sockets::address-type) (:"
 "writers ((setf sb-bsd-sockets::host-ent-addresses)) :readers (sb-bsd-sockets::ho"
 "st-ent-addresses) :initargs (:addresses) :name sb-bsd-sockets::addresses)) \"\" (s"
 "b-bsd-sockets::host-ent) (:readers (sb-bsd-sockets::socket-file-descriptor) :ini"
 "targs (:descriptor) :name sb-bsd-sockets::file-descriptor) (:readers (sb-bsd-soc"
 "kets::socket-family) :initform (error #1#) :name sb-bsd-sockets::family) (:docum"
 "entation \"Protocol used by the socket. If a\nkeyword, the symbol-name of the keyw"
 "ord will be passed to\nGET-PROTOCOL-BY-NAME downcased, and the returned value use"
 "d as\nprotocol. Other values are used as-is.\" :readers (sb-bsd-sockets::socket-pr"
 "otocol) :initargs (:protocol) :name sb-bsd-sockets::protocol) (:documentation \"T"
 "ype of the socket: :STREAM or :DATAGRAM.\" :initform :stream :readers (sb-bsd-soc"
 "kets::socket-type) :initargs (:type) :name type) (:name stream) (:initform nil :"
 "name sb-bsd-sockets::non-blocking-p) \"Common base class of all sockets, not mean"
 "t to be\ndirectly instantiated.\" (sb-bsd-sockets::socket t) (ffi::object stream) "
 "(:after) (sb-bsd-sockets::socket sb-bsd-sockets::slot-names &key sb-bsd-sockets:"
 ":protocol type &allow-other-keys) (sb-bsd-sockets::socket &rest sb-bsd-sockets::"
 "address) \"Bind SOCKET to ADDRESS, which may vary according to\nsocket family.  Fo"
 "r the INET family, pass ADDRESS and PORT as two\narguments; for FILE address fami"
 "ly sockets, pass the filename string.\nSee also bind(2)\" (sb-bsd-sockets::socket)"
 " \"Perform the accept(2) call, returning a\nnewly-created connected socket and the"
 " peer address as multiple\nvalues\" \"Perform the connect(2) call to connect SOCKET"
 " to a\n  remote PEER.  No useful return value.\" \"Return the socket's peer; depend"
 "ing on the address\n  family this may return multiple values\" \"Return the address"
 " (as vector of bytes) and port\n  that the socket is bound to, as multiple values"
 ".\" (sb-bsd-sockets::socket sb-bsd-sockets::backlog) \"Mark SOCKET as willing to a"
 "ccept incoming connections.  BACKLOG\ndefines the maximum length that the queue o"
 "f pending connections may\ngrow to before new connection attempts are refused.  S"
 "ee also listen(2)\" (sb-bsd-sockets::socket sb-bsd-sockets::buffer length &key sb"
 "-bsd-sockets::oob sb-bsd-sockets::peek sb-bsd-sockets::waitall sb-bsd-sockets::e"
 "lement-type) \"Read LENGTH octets from SOCKET into BUFFER (or a freshly-consed bu"
 "ffer if\nNIL), using recvfrom(2).  If LENGTH is NIL, the length of BUFFER is\nused"
 ", so at least one of these two arguments must be non-NIL.  If\nBUFFER is supplied"
 ", it had better be of an element type one octet wide.\nReturns the buffer, its le"
 "ngth, and the address of the peer\nthat sent it, as multiple values.  On datagram"
 " sockets, sets MSG_TRUNC\nso that the actual packet length is returned even if th"
 "e buffer was too\nsmall\" (sb-bsd-sockets::socket sb-bsd-sockets::buffer length &k"
 "ey sb-bsd-sockets::address sb-bsd-sockets::external-format sb-bsd-sockets::oob s"
 "b-bsd-sockets::eor sb-bsd-sockets::dontroute sb-bsd-sockets::dontwait sb-bsd-soc"
 "kets::nosignal sb-bsd-sockets::confirm sb-bsd-sockets::more) \"Send length octets"
 " from buffer into socket, using sendto(2).\nIf buffer is a string, it will conver"
 "ted to octets according to external-format&\nIf length is nil, the length of the "
 "octet buffer is used. The format of address\ndepends on the socket type (for exam"
 "ple for inet domain sockets it would be a \nlist of an ip address and a port). If"
 " no socket address is provided, send(2) \nwill be called instead. Returns the num"
 "ber of octets written.\" (sb-bsd-sockets::socket &key abort) \"Close SOCKET.  May "
 "throw any kind of error that write(2) would have\nthrown.  If SOCKET-MAKE-STREAM "
 "has been called, calls CLOSE using ABORT on that\nstream instead\" (sb-bsd-sockets"
 "::socket &rest sb-bsd-sockets::args) \"Find or create a STREAM that can be used f"
 "or IO\non SOCKET (which must be connected).  ARGS are passed onto\nSB-SYS:MAKE-FD-"
 "STREAM.\" \"Is SOCKET in non-blocking mode?\" (setf sb-bsd-sockets::non-blocking-mo"
 "de) (sb-bsd-sockets::non-blocking-p sb-bsd-sockets::socket) \"Put SOCKET in non-b"
 "locking mode - or not, according to NON-BLOCKING-P\" \"Close SOCKET at low level. "
 "Do not use directly.\" (sb-bsd-sockets::socket t t) (sb-bsd-sockets::socket sb-bs"
 "d-sockets::buffer length &key sb-bsd-sockets::oob sb-bsd-sockets::peek sb-bsd-so"
 "ckets::waitall (sb-bsd-sockets::element-type 'ext::byte8)) (error) (:initform (l"
 "ambda (condition stream) (format stream #2# (prin1-to-string (sb-bsd-sockets::un"
 "known-protocol-name condition)))) :name si::report-function) (:readers (sb-bsd-s"
 "ockets::unknown-protocol-name) :initargs (:name) :name sb-bsd-sockets::name) (:i"
 "nitform sb-bsd-sockets::+af-inet+ :name sb-bsd-sockets::family) \"Class represent"
 "ing TCP and UDP sockets.\n\nExamples:\n\n (make-instance 'inet-socket :type :stream "
 ":protocol :tcp)\n\n (make-instance 'inet-socket :type :datagram :protocol :udp)\n\" "
 "(sb-bsd-sockets::inet-socket) (:initform sb-bsd-sockets::+af-local+ :name sb-bsd"
 "-sockets::family) (:name sb-bsd-sockets::proxy-socket) (:name sb-bsd-sockets::lo"
 "cal-path) \"Class representing local domain (AF_LOCAL) sockets,\nalso known as uni"
 "x-domain sockets.\" (sb-bsd-sockets::local-socket) (t sb-bsd-sockets::local-socke"
 "t) ((:initform sb-bsd-sockets::+af-named-pipe+ :name sb-bsd-sockets::family) (:i"
 "nitargs (:pipe-name) :name sb-bsd-sockets::pipe-name)) \"Class representing Win32"
 " named pipe, using a socket-like interface.\" (sb-bsd-sockets::named-pipe-socket)"
 " (t sb-bsd-sockets::named-pipe-socket) (t sb-bsd-sockets::socket) (sb-bsd-socket"
 "s::socket &key (sb-bsd-sockets::input nil sb-bsd-sockets::input-p) (sb-bsd-socke"
 "ts::output nil sb-bsd-sockets::output-p) (sb-bsd-sockets::buffering :full) (sb-b"
 "sd-sockets::element-type 'base-char) (sb-bsd-sockets::external-format :default))"
 " (sb-bsd-sockets::socket &key sb-bsd-sockets::input sb-bsd-sockets::output (sb-b"
 "sd-sockets::buffering :full) (sb-bsd-sockets::external-format :default)) (:initf"
 "orm (lambda (sb-bsd-sockets::c sb-bsd-sockets::s) (let ((sb-bsd-sockets::num (sb"
 "-bsd-sockets::socket-error-errno sb-bsd-sockets::c))) (format sb-bsd-sockets::s "
 "#3# (sb-bsd-sockets::socket-error-syscall sb-bsd-sockets::c) (or (sb-bsd-sockets"
 "::socket-error-symbol sb-bsd-sockets::c) (sb-bsd-sockets::socket-error-errno sb-"
 "bsd-sockets::c)) (sb-bsd-sockets::get-win32-error-string sb-bsd-sockets::num))))"
 " :name si::report-function) (:readers (sb-bsd-sockets::socket-error-errno) :init"
 "args (:errno) :initform nil :name sb-bsd-sockets::errno) (:readers (sb-bsd-socke"
 "ts::socket-error-symbol) :initargs (:symbol) :initform nil :name symbol) (:reade"
 "rs (sb-bsd-sockets::socket-error-syscall) :initargs (:syscall) :initform \"outer "
 "space\" :name sb-bsd-sockets::syscall) \"Common base class of socket related condi"
 "tions.\" ((:initform 'sb-bsd-sockets::eaddrinuse :readers (sb-bsd-sockets::socket"
 "-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::eagain :readers (sb-b"
 "sd-sockets::socket-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::eba"
 "df :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) ((:initform 'sb"
 "-bsd-sockets::econnrefused :readers (sb-bsd-sockets::socket-error-symbol) :name "
 "symbol)) ((:initform 'sb-bsd-sockets::etimedout :readers (sb-bsd-sockets::socket"
 "-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::eintr :readers (sb-bs"
 "d-sockets::socket-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::einv"
 "al :readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) ((:initform 'sb"
 "-bsd-sockets::enobufs :readers (sb-bsd-sockets::socket-error-symbol) :name symbo"
 "l)) ((:initform 'sb-bsd-sockets::enomem :readers (sb-bsd-sockets::socket-error-s"
 "ymbol) :name symbol)) ((:initform 'sb-bsd-sockets::eopnotsupp :readers (sb-bsd-s"
 "ockets::socket-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::eperm :"
 "readers (sb-bsd-sockets::socket-error-symbol) :name symbol)) ((:initform 'sb-bsd"
 "-sockets::eprotonosupport :readers (sb-bsd-sockets::socket-error-symbol) :name s"
 "ymbol)) ((:initform 'sb-bsd-sockets::esocktnosupport :readers (sb-bsd-sockets::s"
 "ocket-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::enetunreach :rea"
 "ders (sb-bsd-sockets::socket-error-symbol) :name symbol)) (condition) (:initform"
 " (lambda (sb-bsd-sockets::c sb-bsd-sockets::s) (let ((sb-bsd-sockets::num (sb-bs"
 "d-sockets::name-service-error-errno sb-bsd-sockets::c))) (format sb-bsd-sockets:"
 ":s #4# (sb-bsd-sockets::name-service-error-syscall sb-bsd-sockets::c) (or (sb-bs"
 "d-sockets::name-service-error-symbol sb-bsd-sockets::c) (sb-bsd-sockets::name-se"
 "rvice-error-errno sb-bsd-sockets::c)) (sb-bsd-sockets::get-name-service-error-me"
 "ssage sb-bsd-sockets::num)))) :name si::report-function) (:readers (sb-bsd-socke"
 "ts::name-service-error-errno) :initargs (:errno) :initform nil :name sb-bsd-sock"
 "ets::errno) (:readers (sb-bsd-sockets::name-service-error-symbol) :initargs (:sy"
 "mbol) :initform nil :name symbol) (:readers (sb-bsd-sockets::name-service-error-"
 "syscall) :initargs (:syscall) :initform \"an unknown location\" :name sb-bsd-socke"
 "ts::syscall) ((:initform 'sb-bsd-sockets::eai_noname :readers (sb-bsd-sockets::n"
 "ame-service-error-symbol) :name symbol)) ((:initform 'sb-bsd-sockets::eai_again "
 ":readers (sb-bsd-sockets::name-service-error-symbol) :name symbol)) ((:initform "
 "'sb-bsd-sockets::eai_fail :readers (sb-bsd-sockets::name-service-error-symbol) :"
 "name symbol))" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
