
#ifdef ECL_DYNAMIC_VV
static cl_object *VV;
#else
static cl_object VV[VM];
#endif

#ifdef __cplusplus
extern "C" {
#endif
ECL_DLLEXPORT cl_object cl_make_array(cl_narg, cl_object , ...);
#define cl_make_arraykeys (&VV[10])
static cl_object L2fill_array_with_seq(cl_object , cl_object );
static cl_object LC1iterate_over_contents(cl_object , cl_object , cl_object , cl_object );
ECL_DLLEXPORT cl_object cl_vector(cl_narg, ...);
ECL_DLLEXPORT cl_object cl_array_dimensions(cl_object );
ECL_DLLEXPORT cl_object cl_array_in_bounds_p(cl_narg, cl_object , ...);
static cl_object L4row_major_index_inner(cl_object , cl_object );
static cl_object LC3indexing_error(cl_object , cl_object );
ECL_DLLEXPORT cl_object cl_array_row_major_index(cl_narg, cl_object , ...);
ECL_DLLEXPORT cl_object cl_bit(cl_narg, cl_object , ...);
ECL_DLLEXPORT cl_object cl_sbit(cl_narg, cl_object , ...);
ECL_DLLEXPORT cl_object cl_bit_and(cl_narg, cl_object , cl_object , ...);
ECL_DLLEXPORT cl_object cl_bit_ior(cl_narg, cl_object , cl_object , ...);
ECL_DLLEXPORT cl_object cl_bit_xor(cl_narg, cl_object , cl_object , ...);
ECL_DLLEXPORT cl_object cl_bit_eqv(cl_narg, cl_object , cl_object , ...);
ECL_DLLEXPORT cl_object cl_bit_nand(cl_narg, cl_object , cl_object , ...);
ECL_DLLEXPORT cl_object cl_bit_nor(cl_narg, cl_object , cl_object , ...);
ECL_DLLEXPORT cl_object cl_bit_andc1(cl_narg, cl_object , cl_object , ...);
ECL_DLLEXPORT cl_object cl_bit_andc2(cl_narg, cl_object , cl_object , ...);
ECL_DLLEXPORT cl_object cl_bit_orc1(cl_narg, cl_object , cl_object , ...);
ECL_DLLEXPORT cl_object cl_bit_orc2(cl_narg, cl_object , cl_object , ...);
ECL_DLLEXPORT cl_object cl_bit_not(cl_narg, cl_object , ...);
ECL_DLLEXPORT cl_object cl_vector_pop(cl_object );
static cl_object L6copy_array_contents(cl_object , cl_object );
static cl_object LC5do_copy(cl_object , cl_object , cl_object , cl_object , cl_object , cl_object );
ECL_DLLEXPORT cl_object cl_adjust_array(cl_narg, cl_object , cl_object , ...);
#define cl_adjust_arraykeys (&VV[20])
static cl_object L7shrink_vector(cl_object , cl_object );
static cl_object Cblock;
#define VM 28
#define VMtemp 1
#define ECL_DEFINE_SETF_FUNCTIONS 
#ifdef __cplusplus
}
#endif
/*
 * Exported Lisp functions
 */
#define compiler_cfuns_size 1
static const struct ecl_cfunfixed compiler_cfuns[] = {
 /*t,m,narg,padding,name=function-location,block=name-location,entry,entry_fixed,file,file_position*/
{0,0,2,0,ecl_make_fixnum(26),ecl_make_fixnum(9),(cl_objectfn)L7shrink_vector,NULL,ECL_NIL,ecl_make_fixnum(15715)},
};
