static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)8550, (cl_index)8550,
        (ecl_base_char*)
":cdr-7 :formatter si::*digits* si::float-to-digits* \".0\" \"0.\" si::flonum-to-stri"
 "ng si::exponent-in-base10 si::format-directive si::copy-format-directive si::for"
 "mat-directive-p (8) si::make-format-directive si::+format-directive-limit+ si::*"
 "format-directive-expanders* si::*format-directive-interpreters* si::*default-for"
 "mat-error-control-string* si::*default-format-error-offset* si::*output-layout-m"
 "ode* :complaint \"String ended before directive was found.\" 0 0 :arg :remaining \""
 "Too many colons supplied.\" \"Too many at-signs supplied.\" \"No matching closing sl"
 "ash.\" :string :character :colonp :atsignp :params si::*up-up-and-out-allowed* si"
 "::*logical-block-popper* si::*expander-next-arg-macro* si::expander-next-arg si:"
 ":*only-simple-args* si::*orig-args-available* si::*simple-args* si::up-and-out ("
 "simple-string string) si::formatter-aux \"Unknown format directive.\" (simple-stri"
 "ng vector) formatter si::need-orig-args 'si::format-error \"Required argument mis"
 "sing\" (&rest si::args) si::args (stream &rest si::orig-args) ((si::args si::orig"
 "-args)) \"Unknown directive.\" (simple-string si::format-directive) \"FORMAT-ARG-\" "
 "(pop si::args) \"No more arguments.\" (null si::args) ((pprint-pop) (pop si::args)"
 ") si::expander-pprint-next-arg si::%set-format-directive-expander \"()\" si::forma"
 "t-princ #:g277 #:g278 #:g279 #:g280 (length si::args) 0 \"Too many parameters, ex"
 "pected no more than ~D\" :arguments si::format-prin1 #:g348 #:g349 #:g350 #:g351 "
 "si::arg (if si::arg (prin1 si::arg stream) (princ \"()\" stream)) \"Too many parame"
 "ters, expected no more than 0\" si::format-print-named-character ((*print-pretty*"
 " t)) ((*print-level* nil) (*print-length* nil)) \"-\" \"+\" si::format-print-integer"
 " #:g462 #:g463 #:g464 #:g465 (:radix nil :escape nil) si::expand-format-integer "
 "#:g659 #:g660 #:g661 #:g662 #:g663 si::format-print-old-roman si::format-print-r"
 "oman si::format-print-ordinal si::format-print-cardinal si::cardinal-ones si::ca"
 "rdinal-tens si::cardinal-teens si::cardinal-periods si::ordinal-ones si::ordinal"
 "-tens \" hundred\" \"negative \" \"zero\" \"Number too large to print in English: ~:D\" "
 "\"twelfth\" \"th\" \"zeroth\" \"Number too large to print in old Roman numerals: ~:D\" ("
 "#\\D #\\C #\\L #\\X #\\V #\\I) (500 100 50 10 5 1) \"Number too large to print in Roman"
 " numerals: ~:D\" (#\\C #\\X #\\X #\\I #\\I) (100 10 10 1 1 0) (eq si::orig-args si::ar"
 "gs) \"No previous argument.\" (do ((si::arg-ptr si::orig-args (cdr si::arg-ptr))) "
 "((eq (cdr si::arg-ptr) si::args) (car si::arg-ptr))) (\"y\" \"ies\") (write-char #\\s"
 " stream) \"y\" \"ies\" \"Cannot specify the colon modifier with this directive.\" #:g7"
 "87 #:g788 #:g789 #:g790 #:g791 si::format-fixed #:g885 #:g886 #:g887 #:g888 #:g8"
 "89 #:g890 #:g891 si::format-exponential #:g1016 #:g1017 #:g1018 #:g1019 #:g1020 "
 "#:g1021 #:g1022 si::format-general #:g1127 #:g1128 #:g1129 #:g1130 si::format-do"
 "llars \"\" \"Cannot specify either colon or atsign for this directive.\" #:g1204 si:"
 ":i (terpri stream) #:g1234 (fresh-line stream) #:g1264 (write-char #\\Page stream"
 ") #:g1294 (write-char #\\~ stream) \"Cannot specify both colon and atsign for this"
 " directive.\" (write-char #\\Newline stream) (#\\  #\\Newline #\\Tab) #:g1346 #:g1347"
 " :section-relative :section #:g1361 #:g1362 si::format-relative-tab #:g1376 #:g1"
 "377 si::format-absolute-tab \"                                                   "
 "                                                 \" :line-relative \"  \" :mandator"
 "y :fill :miser :linear \"Cannot specify the at-sign modifier.\" #:g1457 :current \""
 "Cannot specify both colon and at-sign.\" #:g1483 (length si::orig-args) si::orig-"
 "args \"Index ~D out of bounds.  Should have been ~\n                              "
 "      between 0 and ~D.\" #:g1490 ((si::cur-posn 0 (1+ si::cur-posn)) (si::arg-pt"
 "r si::orig-args (cdr si::arg-ptr))) (eq si::arg-ptr si::args) si::new-posn si::c"
 "ur-posn (<= 0 si::new-posn (length si::orig-args)) (setf si::args (nthcdr si::ne"
 "w-posn si::orig-args)) \"Index ~D out of bounds.  Should have been ~\n            "
 "                    between 0 and ~D.\" (list si::new-posn (length si::orig-args)"
 ") #:g1497 \"Index ~D out of bounds.  Should have been ~\n                         "
 "          between 0 and ~D.\" \"Index ~D out of bounds.  Should have been ~\n      "
 "                         between 0 and ~D.\" \"Cannot specify the colon modifier.\""
 " (condition) \"~A~%while processing indirect format string:\" (list condition) :pr"
 "int-banner (si::orig-args si::args) si::nstring-capitalize-first \"No correspondi"
 "ng close paren.\" ((string (make-array 10 :element-type 'character :fill-pointer "
 "0 :adjustable t))) (stream string) \"No corresponding open paren.\" \"No correspond"
 "ing close bracket.\" \"Cannot specify both the colon and at-sign modifiers.\" \"Can "
 "only specify one section\" \"Must specify exactly two sections.\" #:g1605 (si::prev"
 "-args si::args) (setf si::args si::prev-args) \"~~; not contained within either ~"
 "~[...~~] or ~~<...~~>.\" \"No corresponding open bracket.\" si::*outside-args* \"can"
 "not use the at-sign modifier with this directive\" \"attempt to use ~~:^ outside a"
 " ~~:{...~~} construct\" #:g1678 #:g1679 #:g1680 (null si::outside-args) (return-f"
 "rom si::outside-loop nil) (return) \"cannot specify the at-sign modifier\" si::up-"
 "up-and-out \"no corresponding close brace\" :args (setf si::args (si::formatter-au"
 "x stream si::inside-string si::orig-args si::args)) ((when (null si::args) (retu"
 "rn))) ((si::outside-args si::args) (si::args si::orig-args)) (declare (ignorable"
 " si::orig-args si::outside-args si::args)) si::outside-loop (si::args si::orig-a"
 "rgs) (declare (ignorable si::orig-args si::args)) #:g1739 si::inside-string \"No "
 "corresponding close brace.\" \"No corresponding open brace.\" si::*illegal-inside-j"
 "ustification* \"Cannot mix ~~W, ~~_, ~~<...~~:>, ~~I, or ~~T with ~~<...~~:;...~~"
 ">\" si::illegal-inside-justification-p \"~D illegal directive~:P found inside just"
 "ification block\" #:g1844 #:g1845 #:g1846 #:g1847 (si::segments nil) ((si::newlin"
 "e-segment nil) (si::extra-space 0) (si::line-len 72)) si::newline-segment (strea"
 "m) #:g1875 #:g1876 (or 72) si::extra-space si::line-len si::segments si::format-"
 "justification (si::newline-segment si::extra-space si::line-len) (nil 0 0) \"No p"
 "arameters can be supplied with ~~<...~~:>.\" \"(\" \")\" \"Cannot include format direc"
 "tives inside the ~\n                               ~:[suffix~;prefix~] segment of"
 " ~~<...~~:>\" \"Too many segments for ~~<...~~:>.\" ((setf si::args nil)) :per-line"
 "-prefix :prefix :suffix (si::args si::arg) ((si::orig-args si::arg)) (si::orig-a"
 "rgs) si::expand-format-logical-block :from-end \"Malformed ~~/ directive.\" \"COMMO"
 "N-LISP-USER\" \"No package named ~S\" 0 0 0 si::define-structure 0 :string :start :"
 "end :character :colonp :atsignp :params si::format-directive-end 0 si::coerce-to"
 "-vector si::format-directive-character 0 0 0 si::dm-too-few-arguments si::dm-too"
 "-many-arguments 0 0 si::format-directive-colonp si::format-directive-atsignp si:"
 ":format-directive-params 0 0 0 0 0 0 0 0 0 0 0 0 0 si::pretty-stream-p 0 si::for"
 "mat-directive-string 0 0 0 0 si::pprint-logical-block-helper si::pprint-pop-help"
 "er si::format-directive-start \"SYS\" \"0123456789\" ((string t :type simple-string)"
 " (si::start 0 :type #1=(and unsigned-byte fixnum)) (si::end 0 :type #2=(and unsi"
 "gned-byte fixnum)) (character #\\  :type base-char) (si::colonp nil :type #3=(mem"
 "ber t nil)) (si::atsignp nil :type #4=(member t nil)) (si::params nil :type list"
 ")) ((si::typed-structure-name si::format-directive) (string t simple-string nil "
 "1 nil) (si::start 0 #1# nil 2 nil) (si::end 0 #2# nil 3 nil) (character #\\  base"
 "-char nil 4 nil) (si::colonp nil #3# nil 5 nil) (si::atsignp nil #4# nil 6 nil) "
 "(si::params nil list nil 7 nil)) (si::make-format-directive) (deftype si::format"
 "-directive nil 'vector) #A(t (10) (nil \"one\" \"two\" \"three\" \"four\" \"five\" \"six\" \""
 "seven\" \"eight\" \"nine\")) #A(t (10) (nil nil \"twenty\" \"thirty\" \"forty\" \"fifty\" \"si"
 "xty\" \"seventy\" \"eighty\" \"ninety\")) #A(t (10) (\"ten\" \"eleven\" \"twelve\" \"thirteen\""
 " \"fourteen\" \"fifteen\" \"sixteen\" \"seventeen\" \"eighteen\" \"nineteen\")) #A(t (22) (\""
 "\" \" thousand\" \" million\" \" billion\" \" trillion\" \" quadrillion\" \" quintillion\" \" "
 "sextillion\" \" septillion\" \" octillion\" \" nonillion\" \" decillion\" \" undecillion\" "
 "\" duodecillion\" \" tredecillion\" \" quattuordecillion\" \" quindecillion\" \" sexdecil"
 "lion\" \" septendecillion\" \" octodecillion\" \" novemdecillion\" \" vigintillion\")) #A"
 "(t (10) (nil \"first\" \"second\" \"third\" \"fourth\" \"fifth\" \"sixth\" \"seventh\" \"eighth"
 "\" \"ninth\")) #A(t (10) (nil \"tenth\" \"twentieth\" \"thirtieth\" \"fortieth\" \"fiftieth\""
 " \"sixtieth\" \"seventieth\" \"eightieth\" \"ninetieth\")) (\"~W\" \"~:W\" \"~@W\" \"~:@W\" \"~_\""
 " \"~:_\" \"~@_\" \"~:@_\" \"~:>\" \"~:@>\" \"~I\" \"~:I\" \"~@I\" \"~:@I\" \"~:T\" \"~:@T\")" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
