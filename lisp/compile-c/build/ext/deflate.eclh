
#ifdef ECL_DYNAMIC_VV
static cl_object *VV;
#else
static cl_object VV[VM];
#endif

#ifdef __cplusplus
extern "C" {
#endif
static cl_object LC2__lambda0();
static cl_object LC1__lambda1(cl_object , cl_object );
static cl_object LC4__lambda2();
static cl_object LC3__lambda3(cl_object , cl_object );
static cl_object LC6__lambda4();
static cl_object LC5__lambda5(cl_object , cl_object );
static cl_object L7update_adler32_checksum(cl_object , cl_object , cl_object );
static cl_object L8generate_crc32_table();
static cl_object L9update_crc32_checksum(cl_object , cl_object , cl_object );
static cl_object L10make_sliding_window_stream(cl_narg, ...);
#define L10make_sliding_window_streamkeys (&VV[121])
static cl_object LC11__lambda32(cl_object , cl_object );
static cl_object LC12__lambda36(cl_object , cl_object );
static cl_object L13sliding_window_stream_write_byte(cl_object , cl_object );
static cl_object L14sliding_window_stream_flush(cl_object );
static cl_object L15sliding_window_stream_copy_bytes(cl_object , cl_object , cl_object );
static cl_object L16make_bit_stream(cl_narg, ...);
#define L16make_bit_streamkeys (&VV[131])
static cl_object LC17__lambda90(cl_object , cl_object );
static cl_object LC18__lambda94(cl_object , cl_object );
static cl_object LC19__lambda98(cl_object , cl_object );
static cl_object L20bit_stream_get_byte(cl_object );
static cl_object L21bit_stream_read_bits(cl_object , cl_object );
static cl_object L22bit_stream_copy_block(cl_object , cl_object );
static cl_object L23make_decode_tree(cl_narg, ...);
#define L23make_decode_treekeys (&VV[67])
static cl_object LC24__lambda177(cl_object , cl_object );
static cl_object L25make_huffman_decode_tree(cl_object );
static cl_object L26read_huffman_code(cl_object , cl_object );
static cl_object L27decode_code_length_entries(cl_object , cl_object , cl_object );
static cl_object L28decode_huffman_tables(cl_object );
static cl_object L29decode_length_entry(cl_object , cl_object );
static cl_object L30decode_distance_entry(cl_object , cl_object );
static cl_object L31decode_huffman_block(cl_object , cl_object , cl_object , cl_object );
static cl_object L32decode_block(cl_object , cl_object );
static cl_object L33parse_zlib_header(cl_object );
static cl_object L34parse_zlib_checksum(cl_object );
static cl_object L35parse_zlib_footer(cl_object );
static cl_object L36parse_gzip_header(cl_object );
static cl_object L37parse_gzip_mtime(cl_object );
static cl_object L38parse_gzip_extra(cl_object );
static cl_object L39parse_gzip_string(cl_object volatile );
static cl_object L40parse_gzip_checksum(cl_object );
static cl_object L41parse_gzip_footer(cl_object );
static cl_object L42inflate_stream(cl_narg, cl_object , cl_object , ...);
#define L42inflate_streamkeys (&VV[102])
static cl_object L43inflate_zlib_stream(cl_narg, cl_object , cl_object , ...);
#define L43inflate_zlib_streamkeys (&VV[158])
static cl_object L44inflate_gzip_stream(cl_narg, cl_object , cl_object , ...);
#define L44inflate_gzip_streamkeys (&VV[158])
static cl_object L45gunzip(cl_object volatile , cl_object volatile );
static cl_object Cblock;
#define VM 161
#define VMtemp 44
#define ECL_DEFINE_SETF_FUNCTIONS 
#ifdef __cplusplus
}
#endif
/*
 * Statically defined constants
 */
ecl_def_ct_base_string(_ecl_static_2,"DECODE-TREE-",12,static,const);
ecl_def_ct_base_string(_ecl_static_1,"BIT-STREAM-",11,static,const);
ecl_def_ct_base_string(_ecl_static_0,"SLIDING-WINDOW-STREAM-",22,static,const);
/*
 * Exported Lisp functions
 */
#define compiler_cfuns_size 33
static const struct ecl_cfunfixed compiler_cfuns[] = {
 /*t,m,narg,padding,name=function-location,block=name-location,entry,entry_fixed,file,file_position*/
{0,0,3,0,ecl_make_fixnum(116),ecl_make_fixnum(8),(cl_objectfn)L7update_adler32_checksum,NULL,ECL_NIL,ecl_make_fixnum(4193)},
{0,0,0,0,ecl_make_fixnum(117),ecl_make_fixnum(11),(cl_objectfn)L8generate_crc32_table,NULL,ECL_NIL,ecl_make_fixnum(5215)},
{0,0,3,0,ecl_make_fixnum(118),ecl_make_fixnum(14),(cl_objectfn)L9update_crc32_checksum,NULL,ECL_NIL,ecl_make_fixnum(6110)},
{0,0,-1,0,ecl_make_fixnum(120),ecl_make_fixnum(26),(cl_objectfn)L10make_sliding_window_stream,NULL,ECL_NIL,ecl_make_fixnum(8230)},
{0,0,2,0,ecl_make_fixnum(127),ecl_make_fixnum(35),(cl_objectfn)L13sliding_window_stream_write_byte,NULL,ECL_NIL,ecl_make_fixnum(8639)},
{0,0,1,0,ecl_make_fixnum(128),ecl_make_fixnum(36),(cl_objectfn)L14sliding_window_stream_flush,NULL,ECL_NIL,ecl_make_fixnum(9948)},
{0,0,3,0,ecl_make_fixnum(129),ecl_make_fixnum(37),(cl_objectfn)L15sliding_window_stream_copy_bytes,NULL,ECL_NIL,ecl_make_fixnum(10986)},
{0,0,-1,0,ecl_make_fixnum(130),ecl_make_fixnum(47),(cl_objectfn)L16make_bit_stream,NULL,ECL_NIL,ecl_make_fixnum(11693)},
{0,0,1,0,ecl_make_fixnum(135),ecl_make_fixnum(52),(cl_objectfn)L20bit_stream_get_byte,NULL,ECL_NIL,ecl_make_fixnum(11902)},
{0,0,2,0,ecl_make_fixnum(136),ecl_make_fixnum(53),(cl_objectfn)L21bit_stream_read_bits,NULL,ECL_NIL,ecl_make_fixnum(12132)},
{0,0,2,0,ecl_make_fixnum(137),ecl_make_fixnum(55),(cl_objectfn)L22bit_stream_copy_block,NULL,ECL_NIL,ecl_make_fixnum(13176)},
{0,0,-1,0,ecl_make_fixnum(138),ecl_make_fixnum(63),(cl_objectfn)L23make_decode_tree,NULL,ECL_NIL,ecl_make_fixnum(14878)},
{0,0,1,0,ecl_make_fixnum(139),ecl_make_fixnum(69),(cl_objectfn)L25make_huffman_decode_tree,NULL,ECL_NIL,ecl_make_fixnum(15133)},
{0,0,2,0,ecl_make_fixnum(140),ecl_make_fixnum(71),(cl_objectfn)L26read_huffman_code,NULL,ECL_NIL,ecl_make_fixnum(16623)},
{0,0,3,0,ecl_make_fixnum(141),ecl_make_fixnum(77),(cl_objectfn)L27decode_code_length_entries,NULL,ECL_NIL,ecl_make_fixnum(18616)},
{0,0,1,0,ecl_make_fixnum(142),ecl_make_fixnum(78),(cl_objectfn)L28decode_huffman_tables,NULL,ECL_NIL,ecl_make_fixnum(19807)},
{0,0,2,0,ecl_make_fixnum(143),ecl_make_fixnum(80),(cl_objectfn)L29decode_length_entry,NULL,ECL_NIL,ecl_make_fixnum(21245)},
{0,0,2,0,ecl_make_fixnum(144),ecl_make_fixnum(81),(cl_objectfn)L30decode_distance_entry,NULL,ECL_NIL,ecl_make_fixnum(22079)},
{0,0,4,0,ecl_make_fixnum(145),ecl_make_fixnum(82),(cl_objectfn)L31decode_huffman_block,NULL,ECL_NIL,ecl_make_fixnum(22516)},
{0,0,2,0,ecl_make_fixnum(146),ecl_make_fixnum(85),(cl_objectfn)L32decode_block,NULL,ECL_NIL,ecl_make_fixnum(23304)},
{0,0,1,0,ecl_make_fixnum(147),ecl_make_fixnum(87),(cl_objectfn)L33parse_zlib_header,NULL,ECL_NIL,ecl_make_fixnum(24284)},
{0,0,1,0,ecl_make_fixnum(148),ecl_make_fixnum(88),(cl_objectfn)L34parse_zlib_checksum,NULL,ECL_NIL,ecl_make_fixnum(25204)},
{0,0,1,0,ecl_make_fixnum(149),ecl_make_fixnum(89),(cl_objectfn)L35parse_zlib_footer,NULL,ECL_NIL,ecl_make_fixnum(25405)},
{0,0,1,0,ecl_make_fixnum(150),ecl_make_fixnum(95),(cl_objectfn)L36parse_gzip_header,NULL,ECL_NIL,ecl_make_fixnum(25841)},
{0,0,1,0,ecl_make_fixnum(151),ecl_make_fixnum(97),(cl_objectfn)L37parse_gzip_mtime,NULL,ECL_NIL,ecl_make_fixnum(28000)},
{0,0,1,0,ecl_make_fixnum(152),ecl_make_fixnum(98),(cl_objectfn)L38parse_gzip_extra,NULL,ECL_NIL,ecl_make_fixnum(28311)},
{0,0,1,0,ecl_make_fixnum(153),ecl_make_fixnum(99),(cl_objectfn)L39parse_gzip_string,NULL,ECL_NIL,ecl_make_fixnum(28556)},
{0,0,1,0,ecl_make_fixnum(154),ecl_make_fixnum(100),(cl_objectfn)L40parse_gzip_checksum,NULL,ECL_NIL,ecl_make_fixnum(28762)},
{0,0,1,0,ecl_make_fixnum(155),ecl_make_fixnum(101),(cl_objectfn)L41parse_gzip_footer,NULL,ECL_NIL,ecl_make_fixnum(28973)},
{0,0,-3,0,ecl_make_fixnum(156),ecl_make_fixnum(106),(cl_objectfn)L42inflate_stream,NULL,ECL_NIL,ecl_make_fixnum(29465)},
{0,0,-3,0,ecl_make_fixnum(157),ecl_make_fixnum(111),(cl_objectfn)L43inflate_zlib_stream,NULL,ECL_NIL,ecl_make_fixnum(30686)},
{0,0,-3,0,ecl_make_fixnum(159),ecl_make_fixnum(112),(cl_objectfn)L44inflate_gzip_stream,NULL,ECL_NIL,ecl_make_fixnum(32514)},
{0,0,2,0,ecl_make_fixnum(160),ecl_make_fixnum(113),(cl_objectfn)L45gunzip,NULL,ECL_NIL,ecl_make_fixnum(34103)},
};
