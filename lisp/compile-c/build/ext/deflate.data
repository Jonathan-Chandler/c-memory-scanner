static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)12429, (cl_index)12429,
        (ecl_base_char*)
"deflate::decompression-error deflate::deflate-decompression-error #1=\"Error dete"
 "cted during deflate decompression: ~?\" deflate::zlib-decompression-error #2=\"Err"
 "or detected during zlib decompression: ~?\" deflate::gzip-decompression-error def"
 "late::+adler-32-start-value+ deflate::+adler-32-base+ deflate::update-adler32-ch"
 "ecksum deflate::+crc-32-start-value+ deflate::+crc-32-polynomial+ deflate::gener"
 "ate-crc32-table 0 4294967295 deflate::update-crc32-checksum deflate::+sliding-wi"
 "ndow-size+ deflate::sliding-window-stream deflate::copy-sliding-window-stream de"
 "flate::sliding-window-stream-p (unsigned-byte 32) deflate::checksum-value deflat"
 "e::checksum deflate::buffer-end (simple-array (unsigned-byte 8) (32768)) deflate"
 "::buffer 0 deflate::make-sliding-window-stream deflate::sliding-window-stream-ch"
 "ecksum-value mp::cas-expander deflate::sliding-window-stream-checksum deflate::s"
 "liding-window-stream-buffer-end deflate::sliding-window-stream-buffer deflate::s"
 "liding-window-stream-stream :adler-32 :crc-32 deflate::sliding-window-stream-wri"
 "te-byte deflate::sliding-window-stream-flush deflate::sliding-window-stream-copy"
 "-bytes deflate::bit-stream deflate::copy-bit-stream deflate::bit-stream-p (unsig"
 "ned-byte 8) deflate::bit-count (unsigned-byte 29) deflate::bits deflate::next-by"
 "te 0 deflate::make-bit-stream deflate::bit-stream-bit-count deflate::bit-stream-"
 "bits deflate::bit-stream-next-byte deflate::bit-stream-stream deflate::bit-strea"
 "m-get-byte deflate::bit-stream-read-bits #3=\"Block length mismatch for stored bl"
 "ock: LEN(~D) vs. NLEN(~D)!\" deflate::bit-stream-copy-block deflate::decode-tree "
 "deflate::copy-decode-tree deflate::decode-tree-p (simple-array fixnum (*)) defla"
 "te::code-symbols deflate::length-count 0 deflate::make-decode-tree deflate::deco"
 "de-tree-code-symbols deflate::decode-tree-length-count :initial-value :length-co"
 "unt :code-symbols deflate::make-huffman-decode-tree #4=\"Corrupted Data detected "
 "during decompression: ~\n             Incorrect huffman code (~X) in huffman deco"
 "de!\" deflate::read-huffman-code deflate::*std-lit-decode-tree* deflate::*std-dis"
 "t-decode-tree* deflate::*code-length-entry-order* (0 1 2 3 4 5 6 7 8 9 10 11 12 "
 "13 14 15) (15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 16 17 18) deflate::decode-code-"
 "length-entries deflate::decode-huffman-tables #5=\"Strange Length Code in bitstre"
 "am: ~D\" deflate::decode-length-entry deflate::decode-distance-entry deflate::dec"
 "ode-huffman-block \"Encountered Reserved Block Type ~D!\" (0 1 2 3) deflate::decod"
 "e-block \"Corrupted Header ~2,'0X,~2,'0X!\" deflate::parse-zlib-header deflate::pa"
 "rse-zlib-checksum deflate::parse-zlib-footer deflate::+gzip-header-id1+ deflate:"
 ":+gzip-header-id2+ \"Header missing magic values ~2,'0X,~2,'0X (got ~2,'0X,~2,'0X"
 " instead)!\" \"Unknown compression-method in Header ~2,'0X!\" \"Unknown flags in Hea"
 "der ~2,'0X!\" deflate::parse-gzip-header 2208988800 deflate::parse-gzip-mtime def"
 "late::parse-gzip-extra deflate::parse-gzip-string deflate::parse-gzip-checksum d"
 "eflate::parse-gzip-footer :checksum :checksum-value 0 (nil :crc-32 :adler-32) de"
 "flate::inflate-stream \"Unknown compression method ~D!\" \"Unsupported sliding wind"
 "ow size 2^~D = ~D!\" \"Unknown preset dictionary id ~8,'0X!\" \"Checksum mismatch fo"
 "r decompressed stream: ~8,'0X != ~8,'0X!\" deflate::inflate-zlib-stream deflate::"
 "inflate-gzip-stream deflate::gunzip #:deflate si::dodefpackage 0 0 0 si::define-"
 "structure 0 :stream :buffer :buffer-end :checksum :checksum-value si::structure-"
 "type-error 0 0 0 0 :stream :next-byte :bits :bit-count 0 0 0 0 0 0 0 0 0 0 0 0 0"
 " 0 0 0 0 0 0 0 0 0 0 :check-checksum 0 0 \"DEFLATE\" (\"COMMON-LISP\") (\"DECOMPRESSI"
 "ON-ERROR\" \"DEFLATE-DECOMPRESSION-ERROR\" \"ZLIB-DECOMPRESSION-ERROR\" \"GZIP-DECOMPR"
 "ESSION-ERROR\" \"INFLATE-STREAM\" \"INFLATE-ZLIB-STREAM\" \"PARSE-ZLIB-HEADER\" \"PARSE-"
 "ZLIB-FOOTER\" \"INFLATE-GZIP-STREAM\" \"PARSE-GZIP-HEADER\" \"PARSE-GZIP-FOOTER\" \"GUNZ"
 "IP\") ((optimize (safety 0) (speed 3))) (simple-error) (deflate::decompression-er"
 "ror) (:initform (lambda (deflate::c deflate::s) (with-standard-io-syntax (let (("
 "*print-readably* nil)) (format deflate::s #1# (simple-condition-format-control d"
 "eflate::c) (simple-condition-format-arguments deflate::c))))) :name si::report-f"
 "unction) (:initform (lambda (deflate::c deflate::s) (with-standard-io-syntax (le"
 "t ((*print-readably* nil)) (format deflate::s #2# (simple-condition-format-contr"
 "ol deflate::c) (simple-condition-format-arguments deflate::c))))) :name si::repo"
 "rt-function) ((ftype (function ((unsigned-byte 32) (simple-array (unsigned-byte "
 "8) (*)) fixnum) (unsigned-byte 32)) deflate::update-adler32-checksum)) 398829238"
 "4 ((ftype (function nil (simple-array (unsigned-byte 32) (256))) deflate::genera"
 "te-crc32-table)) ((ftype (function ((unsigned-byte 32) (simple-array (unsigned-b"
 "yte 8) (*)) fixnum) (unsigned-byte 32)) deflate::update-crc32-checksum)) ((strea"
 "m nil :type stream :read-only t) (deflate::buffer #6=(make-array deflate::+slidi"
 "ng-window-size+ :element-type '(unsigned-byte 8)) :type #7=(simple-array (unsign"
 "ed-byte 8) (32768)) :read-only t) (deflate::buffer-end 0 :type fixnum) (deflate:"
 ":checksum nil :type symbol :read-only t) (deflate::checksum-value 0 :type #8=(un"
 "signed-byte 32))) ((stream nil stream t 0 nil) (deflate::buffer #6# #7# t 1 nil)"
 " (deflate::buffer-end 0 fixnum nil 2 nil) (deflate::checksum nil symbol t 3 nil)"
 " (deflate::checksum-value 0 #8# nil 4 nil)) (deflate::make-sliding-window-stream"
 ") \"Ignore lock and proceed.\" \"Attempt to define CAS accessor ~S in locked packag"
 "e.\" (deflate::sliding-window-stream-checksum-value) (deflate::sliding-window-str"
 "eam-buffer-end) ((inline deflate::sliding-window-stream-write-byte)) #'(ext::lam"
 "bda-block deflate::sliding-window-stream-write-byte (stream byte) #9=(declare (s"
 "i::c-global)) (declare (type deflate::sliding-window-stream stream) (type (unsig"
 "ned-byte 8) byte)) (let ((deflate::end (deflate::sliding-window-stream-buffer-en"
 "d stream))) (declare (type fixnum deflate::end)) (unless (< deflate::end deflate"
 "::+sliding-window-size+) (write-sequence (deflate::sliding-window-stream-buffer "
 "stream) (deflate::sliding-window-stream-stream stream)) (case (deflate::sliding-"
 "window-stream-checksum stream) (:adler-32 (setf (deflate::sliding-window-stream-"
 "checksum-value stream) (deflate::update-adler32-checksum (deflate::sliding-windo"
 "w-stream-checksum-value stream) (deflate::sliding-window-stream-buffer stream) d"
 "eflate::+sliding-window-size+))) (:crc-32 (setf (deflate::sliding-window-stream-"
 "checksum-value stream) (deflate::update-crc32-checksum (deflate::sliding-window-"
 "stream-checksum-value stream) (deflate::sliding-window-stream-buffer stream) def"
 "late::+sliding-window-size+)))) (setq deflate::end 0)) (setf (aref (deflate::sli"
 "ding-window-stream-buffer stream) deflate::end) byte (deflate::sliding-window-st"
 "ream-buffer-end stream) (1+ deflate::end)))) ((stream nil :type stream :read-onl"
 "y t) (deflate::next-byte 0 :type fixnum) (deflate::bits 0 :type #10=(unsigned-by"
 "te 29)) (deflate::bit-count 0 :type #11=(unsigned-byte 8))) ((stream nil stream "
 "t 0 nil) (deflate::next-byte 0 fixnum nil 1 nil) (deflate::bits 0 #10# nil 2 nil"
 ") (deflate::bit-count 0 #11# nil 3 nil)) (deflate::make-bit-stream) (deflate::bi"
 "t-stream-bit-count) (deflate::bit-stream-bits) (deflate::bit-stream-next-byte) ("
 "(inline deflate::bit-stream-get-byte)) #'(ext::lambda-block deflate::bit-stream-"
 "get-byte (stream) #9# (declare (type deflate::bit-stream stream)) (the (unsigned"
 "-byte 8) (read-byte (deflate::bit-stream-stream stream)))) ((inline deflate::bit"
 "-stream-read-bits)) #'(ext::lambda-block deflate::bit-stream-read-bits (stream d"
 "eflate::bits) #9# (declare (type deflate::bit-stream stream)) (loop deflate::whi"
 "le (< (deflate::bit-stream-bit-count stream) deflate::bits) do (setf (deflate::b"
 "it-stream-bits stream) (logior (deflate::bit-stream-bits stream) (the (unsigned-"
 "byte 29) (ash (deflate::bit-stream-get-byte stream) (deflate::bit-stream-bit-cou"
 "nt stream)))) (deflate::bit-stream-bit-count stream) (+ (deflate::bit-stream-bit"
 "-count stream) 8))) (if (= (deflate::bit-stream-bit-count stream) deflate::bits)"
 " (prog1 (deflate::bit-stream-bits stream) (setf (deflate::bit-stream-bits stream"
 ") 0 (deflate::bit-stream-bit-count stream) 0)) (prog1 (ldb (byte deflate::bits 0"
 ") (deflate::bit-stream-bits stream)) (setf (deflate::bit-stream-bits stream) (as"
 "h (deflate::bit-stream-bits stream) (- deflate::bits)) (deflate::bit-stream-bit-"
 "count stream) (- (deflate::bit-stream-bit-count stream) deflate::bits))))) ((inl"
 "ine deflate::bit-stream-copy-block)) #'(ext::lambda-block deflate::bit-stream-co"
 "py-block (stream deflate::out-stream) #9# (declare (type deflate::bit-stream str"
 "eam) (type deflate::sliding-window-stream deflate::out-stream) (optimize (speed "
 "3) (safety 0) (space 0) (debug 0))) (setf (deflate::bit-stream-bits stream) 0 (d"
 "eflate::bit-stream-bit-count stream) 0) (let* ((deflate::len (logior (deflate::b"
 "it-stream-get-byte stream) (ash (deflate::bit-stream-get-byte stream) 8))) (defl"
 "ate::nlen (ldb (byte 16 0) (lognot (logior (deflate::bit-stream-get-byte stream)"
 " (ash (deflate::bit-stream-get-byte stream) 8)))))) (unless (= deflate::len defl"
 "ate::nlen) (error 'deflate::deflate-decompression-error :format-control #3# :for"
 "mat-arguments (list deflate::len deflate::nlen))) (dotimes (deflate::i deflate::"
 "len) (deflate::sliding-window-stream-write-byte deflate::out-stream (deflate::bi"
 "t-stream-get-byte stream))))) ((deflate::length-count #12=(make-array 16 :elemen"
 "t-type 'fixnum :initial-element 0) :type #13=(simple-array fixnum (*)) :read-onl"
 "y t) (deflate::code-symbols #14=(make-array 16 :element-type 'fixnum :initial-el"
 "ement 0) :type #15=(simple-array fixnum (*)))) ((deflate::length-count #12# #13#"
 " t 0 nil) (deflate::code-symbols #14# #15# nil 1 nil)) (deflate::make-decode-tre"
 "e) (deflate::decode-tree-code-symbols) ((inline deflate::read-huffman-code)) #'("
 "ext::lambda-block deflate::read-huffman-code (deflate::bit-stream deflate::decod"
 "e-tree) #9# (declare (type deflate::bit-stream deflate::bit-stream) (type deflat"
 "e::decode-tree deflate::decode-tree) (optimize (speed 3) (safety 0) (space 0) (d"
 "ebug 0))) (loop deflate::with deflate::length-count deflate::of-type (simple-arr"
 "ay fixnum (*)) = (deflate::decode-tree-length-count deflate::decode-tree) deflat"
 "e::with deflate::code-symbols deflate::of-type (simple-array fixnum (*)) = (defl"
 "ate::decode-tree-code-symbols deflate::decode-tree) deflate::for deflate::code d"
 "eflate::of-type fixnum = (deflate::bit-stream-read-bits deflate::bit-stream 1) d"
 "eflate::then (+ (* deflate::code 2) (deflate::bit-stream-read-bits deflate::bit-"
 "stream 1)) deflate::for deflate::index deflate::of-type fixnum = 0 deflate::then"
 " (+ deflate::index count) deflate::for first deflate::of-type fixnum = 0 deflate"
 "::then (* (+ first count) 2) deflate::for length deflate::of-type fixnum deflate"
 "::upfrom 1 deflate::below (length deflate::length-count) deflate::for count = (a"
 "ref deflate::length-count length) deflate::thereis (when (< deflate::code (the f"
 "ixnum (+ first count))) (aref deflate::code-symbols (+ deflate::index (- deflate"
 "::code first)))) deflate::finally (error 'deflate::deflate-decompression-error :"
 "format-control #4# :format-arguments (list deflate::code)))) #A(t (19) (16 17 18"
 " 0 8 7 9 6 10 5 11 4 12 3 13 2 14 1 15)) ((inline deflate::decode-length-entry))"
 " #'(ext::lambda-block deflate::decode-length-entry (symbol deflate::bit-stream) "
 "#9# (cond ((<= symbol 264) (- symbol 254)) ((<= symbol 268) (+ 11 (* (- symbol 2"
 "65) 2) (deflate::bit-stream-read-bits deflate::bit-stream 1))) ((<= symbol 272) "
 "(+ 19 (* (- symbol 269) 4) (deflate::bit-stream-read-bits deflate::bit-stream 2)"
 ")) ((<= symbol 276) (+ 35 (* (- symbol 273) 8) (deflate::bit-stream-read-bits de"
 "flate::bit-stream 3))) ((<= symbol 280) (+ 67 (* (- symbol 277) 16) (deflate::bi"
 "t-stream-read-bits deflate::bit-stream 4))) ((<= symbol 284) (+ 131 (* (- symbol"
 " 281) 32) (deflate::bit-stream-read-bits deflate::bit-stream 5))) ((= symbol 285"
 ") 258) (t (error 'deflate::deflate-decompression-error :format-control #5# :form"
 "at-arguments (list symbol))))) ((inline deflate::decode-distance-entry)) #'(ext:"
 ":lambda-block deflate::decode-distance-entry (symbol deflate::bit-stream) #9# (c"
 "ond ((<= symbol 3) (1+ symbol)) (t (multiple-value-bind (deflate::order deflate:"
 ":offset) (truncate symbol 2) (let* ((deflate::extra-bits (1- deflate::order)) (d"
 "eflate::factor (ash 1 deflate::extra-bits))) (+ (1+ (ash 1 deflate::order)) (* d"
 "eflate::offset deflate::factor) (deflate::bit-stream-read-bits deflate::bit-stre"
 "am deflate::extra-bits)))))))" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
