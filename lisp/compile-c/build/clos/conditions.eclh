
#ifdef ECL_DYNAMIC_VV
static cl_object *VV;
#else
static cl_object VV[VM];
#endif

#ifdef __cplusplus
extern "C" {
#endif
static cl_object LC1unique_id(cl_object , cl_object );
ECL_DLLEXPORT cl_object cl_compute_restarts(cl_narg, ...);
static cl_object L2restart_print(cl_object , cl_object , cl_object );
static cl_object L3make_restart(cl_narg, ...);
#define L3make_restartkeys (&VV[105])
static cl_object LC4__lambda18(cl_object , cl_object );
static cl_object LC5__lambda22(cl_object , cl_object );
static cl_object LC6__lambda26(cl_object , cl_object );
static cl_object LC7__lambda30(cl_object , cl_object );
static cl_object LC8__lambda34(cl_object , cl_object );
static cl_object L9restart_report(cl_object , cl_object );
ECL_DLLEXPORT cl_object si_bind_simple_restarts(cl_object , cl_object );
static cl_object LC11simple_restart_function(cl_object , cl_object );
static cl_object LC10__lambda37(cl_narg, ...);
ECL_DLLEXPORT cl_object si_bind_simple_handlers(cl_object , cl_object );
static cl_object LC13simple_handler_function(cl_object , cl_object );
static cl_object LC12__lambda43(cl_narg, cl_object , ...);
static cl_object LC15restart_bind(cl_object , cl_object );
static cl_object LC14__lambda61(cl_object );
ECL_DLLEXPORT cl_object cl_find_restart(cl_narg, cl_object , ...);
static cl_object L16find_restart_never_fail(cl_narg, cl_object , ...);
ECL_DLLEXPORT cl_object cl_invoke_restart(cl_narg, cl_object , ...);
ECL_DLLEXPORT cl_object cl_invoke_restart_interactively(cl_object );
static cl_object LC21restart_case(cl_object , cl_object );
static cl_object LC17transform_keywords(cl_narg, ...);
#define LC17transform_keywordskeys (&VV[112])
static cl_object LC18__lambda77(cl_narg, cl_object , ...);
static cl_object LC19__lambda89(cl_narg, cl_object , ...);
static cl_object LC20__lambda97(cl_narg, cl_object , ...);
static cl_object LC22with_simple_restart(cl_object , cl_object );
static cl_object LC23with_condition_restarts(cl_object , cl_object );
static cl_object LC24print_object(cl_object , cl_object );
static cl_object LC25define_condition(cl_object , cl_object );
static cl_object L26find_subclasses_of_type(cl_object , cl_object );
ECL_DLLEXPORT cl_object cl_make_condition(cl_narg, cl_object , ...);
static cl_object LC29handler_bind(cl_object , cl_object );
static cl_object LC27__lambda169(cl_object );
static cl_object LC28__lambda175(cl_object );
static cl_object L30signal(cl_narg, cl_object , ...);
static cl_object L31coerce_to_condition(cl_object , cl_object , cl_object , cl_object );
static cl_object L34break(volatile cl_narg, ...);
static cl_object LC32__lambda188(cl_narg, ...);
static cl_object LC33__lambda189(cl_object );
static cl_object L37warn(volatile cl_narg, cl_object volatile , ...);
static cl_object LC35__lambda197(cl_narg, ...);
static cl_object LC36__lambda198(cl_object );
static cl_object LC39__lambda200();
static cl_object LC38__lambda201(cl_object , cl_object );
static cl_object LC41__lambda202();
static cl_object LC40__lambda203(cl_object , cl_object );
static cl_object LC43__lambda204();
static cl_object LC42__lambda205(cl_object , cl_object );
static cl_object LC45__lambda206();
static cl_object LC44__lambda207(cl_object , cl_object );
static cl_object LC47__lambda208();
static cl_object LC46__lambda209(cl_object , cl_object );
static cl_object LC49__lambda210();
static cl_object LC48__lambda211(cl_object , cl_object );
static cl_object LC51__lambda212();
static cl_object LC50__lambda213(cl_object , cl_object );
static cl_object LC53__lambda214();
static cl_object LC52__lambda215(cl_object , cl_object );
static cl_object LC55__lambda216();
static cl_object LC54__lambda217(cl_object , cl_object );
static cl_object LC57__lambda218();
static cl_object LC56__lambda219(cl_object , cl_object );
static cl_object LC59__lambda220();
static cl_object LC58__lambda221(cl_object , cl_object );
static cl_object LC61__lambda222();
static cl_object LC60__lambda223(cl_object , cl_object );
static cl_object LC63__lambda224();
static cl_object LC64__lambda226();
static cl_object LC65__lambda227();
static cl_object LC62__lambda225(cl_object , cl_object );
ECL_DLLEXPORT cl_object si_signal_simple_error(cl_narg, cl_object , cl_object , cl_object , cl_object , ...);
static cl_object LC69handler_case(cl_object , cl_object );
static cl_object LC66__lambda240(cl_object );
static cl_object LC67__lambda248(cl_narg, cl_object , ...);
static cl_object LC68__lambda256(cl_narg, cl_object , ...);
static cl_object LC70ignore_errors(cl_object , cl_object );
ECL_DLLEXPORT cl_object cl_abort(cl_narg, ...);
ECL_DLLEXPORT cl_object cl_continue(cl_narg, ...);
ECL_DLLEXPORT cl_object cl_muffle_warning(cl_narg, ...);
ECL_DLLEXPORT cl_object cl_store_value(cl_narg, cl_object , ...);
ECL_DLLEXPORT cl_object cl_use_value(cl_narg, cl_object , ...);
static cl_object L71assert_report(cl_object , cl_object );
static cl_object L73assert_prompt(cl_object , cl_object );
static cl_object LC72read_it();
ECL_DLLEXPORT cl_object si_assert_failure(volatile cl_narg, cl_object volatile , ...);
static cl_object LC74__lambda272(cl_narg, ...);
static cl_object LC75__lambda273(cl_narg, cl_object , ...);
static cl_object L86universal_error_handler(cl_object volatile , cl_object volatile , cl_object volatile );
static cl_object LC76__lambda287(cl_narg, ...);
static cl_object LC77__lambda288(cl_object );
static cl_object LC78__lambda294(cl_narg, ...);
static cl_object LC79__lambda295(cl_narg, cl_object , ...);
static cl_object LC80__lambda301(cl_narg, ...);
static cl_object LC81__lambda302(cl_object );
static cl_object LC82__lambda307(cl_narg, ...);
static cl_object LC83__lambda308(cl_object );
static cl_object LC84__lambda313(cl_narg, ...);
static cl_object LC85__lambda314(cl_narg, cl_object , ...);
static cl_object L87stack_error_handler(cl_object volatile , cl_object volatile , cl_object volatile );
static cl_object L88tpl_continue_command(cl_narg, ...);
static cl_object Cblock;
#define VM 134
#define VMtemp 70
#define ECL_DEFINE_SETF_FUNCTIONS 
#ifdef __cplusplus
}
#endif
/*
 * Statically defined constants
 */
ecl_def_ct_base_string(_ecl_static_0,"RESTART-",8,static,const);
/*
 * Exported Lisp functions
 */
#define compiler_cfuns_size 18
static const struct ecl_cfunfixed compiler_cfuns[] = {
 /*t,m,narg,padding,name=function-location,block=name-location,entry,entry_fixed,file,file_position*/
{0,0,2,0,ecl_make_fixnum(99),ecl_make_fixnum(0),(cl_objectfn)LC1unique_id,NULL,ECL_NIL,ecl_make_fixnum(1148)},
{0,0,3,0,ecl_make_fixnum(102),ecl_make_fixnum(3),(cl_objectfn)L2restart_print,NULL,ECL_NIL,ecl_make_fixnum(2113)},
{0,0,-1,0,ecl_make_fixnum(104),ecl_make_fixnum(7),(cl_objectfn)L3make_restart,NULL,ECL_NIL,ecl_make_fixnum(2327)},
{0,0,2,0,ecl_make_fixnum(110),ecl_make_fixnum(14),(cl_objectfn)LC15restart_bind,NULL,ECL_NIL,ecl_make_fixnum(3501)},
{0,0,2,0,ecl_make_fixnum(111),ecl_make_fixnum(28),(cl_objectfn)LC21restart_case,NULL,ECL_NIL,ecl_make_fixnum(4934)},
{0,0,2,0,ecl_make_fixnum(115),ecl_make_fixnum(30),(cl_objectfn)LC22with_simple_restart,NULL,ECL_NIL,ecl_make_fixnum(9547)},
{0,0,2,0,ecl_make_fixnum(116),ecl_make_fixnum(31),(cl_objectfn)LC23with_condition_restarts,NULL,ECL_NIL,ecl_make_fixnum(9904)},
{0,0,2,0,ecl_make_fixnum(118),ecl_make_fixnum(38),(cl_objectfn)LC25define_condition,NULL,ECL_NIL,ecl_make_fixnum(10656)},
{0,0,2,0,ecl_make_fixnum(119),ecl_make_fixnum(41),(cl_objectfn)LC29handler_bind,NULL,ECL_NIL,ecl_make_fixnum(15557)},
{0,0,-2,0,ecl_make_fixnum(120),ecl_make_fixnum(43),(cl_objectfn)L30signal,NULL,ECL_NIL,ecl_make_fixnum(15923)},
{0,0,4,0,ecl_make_fixnum(121),ecl_make_fixnum(20),(cl_objectfn)L31coerce_to_condition,NULL,ECL_NIL,ecl_make_fixnum(16716)},
{0,0,-1,0,ecl_make_fixnum(122),ecl_make_fixnum(50),(cl_objectfn)L34break,NULL,ECL_NIL,ecl_make_fixnum(17802)},
{0,0,-2,0,ecl_make_fixnum(123),ecl_make_fixnum(54),(cl_objectfn)L37warn,NULL,ECL_NIL,ecl_make_fixnum(18475)},
{0,0,2,0,ecl_make_fixnum(129),ecl_make_fixnum(82),(cl_objectfn)LC69handler_case,NULL,ECL_NIL,ecl_make_fixnum(27607)},
{0,0,2,0,ecl_make_fixnum(130),ecl_make_fixnum(84),(cl_objectfn)LC70ignore_errors,NULL,ECL_NIL,ecl_make_fixnum(29842)},
{0,0,3,0,ecl_make_fixnum(131),ecl_make_fixnum(96),(cl_objectfn)L86universal_error_handler,NULL,ECL_NIL,ecl_make_fixnum(32352)},
{0,0,3,0,ecl_make_fixnum(132),ecl_make_fixnum(97),(cl_objectfn)L87stack_error_handler,NULL,ECL_NIL,ecl_make_fixnum(34369)},
{0,0,-1,0,ecl_make_fixnum(133),ecl_make_fixnum(98),(cl_objectfn)L88tpl_continue_command,NULL,ECL_NIL,ecl_make_fixnum(34549)},
};
