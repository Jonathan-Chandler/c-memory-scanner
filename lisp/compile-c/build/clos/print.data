static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)2034, (cl_index)2034,
        (ecl_base_char*)
"make-load-form-saving-slots \"Cannot externalize object ~a\" (cons nil nil) clos::"
 "i (car clos::i) (cdr clos::i) \"No adequate specialization of MAKE-LOAD-FORM for "
 "an object type ~A\" \"Cannot externalize anonymous class ~A\" \"CL\" \"~S\" \"a ~S\" \"The"
 " ~S ~S\" \"~A ~{~S ~}~S\" clos::unnamed clos::float-nan \"#<single-float quiet NaN>\""
 " \"#<double-float quiet NaN>\" \"#<long-float quiet NaN>\" \"#<short-float quiet NaN>"
 "\" (single-float double-float long-float short-float) \"#.(coerce (si:nan) 'single"
 "-float)\" \"#.(coerce (si:nan) 'double-float)\" \"#.(coerce (si:nan) 'long-float)\" \""
 "#.(coerce (si:nan) 'short-float)\" ext::float-nan-string clos::float-infinity \"#<"
 "single-float negative infinity>\" \"#<single-float positive infinity>\" \"#<double-f"
 "loat negative infinity>\" \"#<double-float positive infinity>\" \"#<long-float negat"
 "ive infinity>\" \"#<long-float positive infinity>\" \"#<short-float negative infinit"
 "y>\" \"#<short-float positive infinity>\" (ext::negative-single-float ext::positive"
 "-single-float ext::negative-double-float ext::positive-double-float ext::negativ"
 "e-long-float ext::positive-long-float ext::negative-short-float ext::positive-sh"
 "ort-float) \"#.ext::single-float-negative-infinity\" \"#.ext::single-float-positive"
 "-infinity\" \"#.ext::double-float-negative-infinity\" \"#.ext::double-float-positive"
 "-infinity\" \"#.ext::long-float-negative-infinity\" \"#.ext::long-float-positive-inf"
 "inity\" \"#.ext::short-float-negative-infinity\" \"#.ext::short-float-positive-infin"
 "ity\" ext::float-infinity-string \"~%~A is an instance of class ~A\" \":      \" \"Unb"
 "ound\" clos::superiors 0 clos::inferiors 0 0 :slot-names :environment clos::insta"
 "ll-method clos::classp 0 0 \"CLOS\" (t) (clos::object &optional clos::env) (standa"
 "rd-object) (clos::object &optional clos::environment) (structure-object) (condit"
 "ion) (class) (class &optional clos::environment) (package) (package &optional cl"
 "os::environment) (t t) (ext::instance stream) (standard-object t) (class t) (cla"
 "ss stream) (standard-generic-function t) (clos::gf stream) (standard-method t) ("
 "clos::m stream) (clos::obj stream)" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
