static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)3699, (cl_index)3699,
        (ecl_base_char*)
"si::*inspect-level* si::*inspect-history* si::*inspect-mode* si::*old-print-leve"
 "l* si::*old-print-length* si::inspect-read-line si::select-p si::select-e si::se"
 "lect-u \"Inspect commands:~%~\n                n (or N or Newline):    inspects th"
 "e field (recursively).~%~\n                s (or S):               skips the fiel"
 "d.~%~\n                p (or P):               pretty-prints the field.~%~\n      "
 "          a (or A):               aborts the inspection ~\n                      "
 "                  of the rest of the fields.~%~\n                u (or U) form:  "
 "        updates the field ~\n                                        with the val"
 "ue of the form.~%~\n                e (or E) form:          evaluates and prints "
 "the form.~%~\n                q (or Q):               quits the inspection.~%~\n  "
 "              ?:                      prints this.~%~%\" si::select-? si::*quit-t"
 "ags* :report-function \"Go back to inspector.\" \" >> \" 0 0 0 0 0 0 0 0 0 0 si::abo"
 "rt-inspect 0 0 0 0 0 0 si::quit-inspect 0 \"Unknown inspector command. ~\n        "
 "               Type ? followed by #\\\\Newline for help.\" \"~&Back to Inspection mo"
 "de: ~\n                      Type ? followed by #\\\\Newline for help.~%\" si::read-"
 "inspect-command \"~V@T\" si::inspect-indent si::inspect-indent-1 \"~:@(~S~) - unint"
 "erned symbol\" \"KEYWORD\" \"~:@(~S~) - keyword\" \"~:@(~S~) - ~:[internal~;external~]"
 " symbol in ~A package\" \"~&------------------------------------------------------"
 "-----------------------~%~%\" \"value: ~S\" \"value:\" \"value:~%   ~S\" si::compiler \""
 "property ~S:\" \"property ~:@(~S~):~%   ~~S\" \"~S - package\" \"nicknames:  ~S\" \"Not "
 "updated.\" \"use list:  ~S\" \"used-by list:  ~S\" \"shadowing symbols:  ~S\" \"~S - sta"
 "ndard character\" \"~S - character\" \"code:  #x~X\" \"~S - ~a\" \"numerator:\" \"denomina"
 "tor:\" \"real part:\" \"imaginary part:\" 0 0 0 0 \"exponent:  ~D\" \"mantissa:  ~D\" \"~S"
 " - cons\" \"nth ~D:\" 0 0 \"nthcdr ~D: ~~S\" \"nthcdr ~D:\" \"~S - simple string\" \"~S - "
 "string\" \"dimension:  ~D\" \"fill pointer:  ~D\" \"aref ~D:\" \"~S - simple vector\" \"~S"
 " - vector\" \"~S - adjustable aray\" \"~S - array\" \"rank:  ~D\" \"dimensions:  ~D\" \"to"
 "tal size:  ~D\" \"key  : ~S\" \"The keys of the hash table are:~%\" \"  ~S~%\" \"The key"
 " ~S is not present or the value associated is NIL.\" \"Inspect commands for hash t"
 "ables:~%~\nn (or N or #\\\\Newline):  inspects the keys/values of the hashtable (re"
 "cursively).~%~\ns (or S):             skips the field.~%~\np (or P):             p"
 "retty-prints the field.~%~\na (or A):             aborts the inspection of the re"
 "st of the fields.~%~\ne (or E) form:        evaluates and prints the form.~%~\nl ("
 "or L):             show the keys of the hash table.~%~\nj (or J) key:         ins"
 "pect the value associated to the key requested.~%~\nq (or Q):             quits t"
 "he inspection.~%~\n?:                    prints this help message.~%~%\" \"~S - has"
 "h table: \" 0 0 0 0 si::inspect-instance \"~S - ~S\" si::inspect-object \"Inspection"
 " mode: Type ? followed by #\\\\Newline for help.\" (or stream t nil) \"~&-----------"
 "------------------------------------------------------------------~%~53S~24@A~%~"
 "A\" \"CL\" \"SYSTEM\" \"\" \"[Special form and Macro]\" \"[Special form]\" \"[Macro]\" \"[Func"
 "tion]\" \"[Macro or Function]\" \"[Constant]\" \"[Special variable]\" \"[Variable]\" \"[Ty"
 "pe]\" si::deftype-form \"~%Defined as: ~S~%See the doc of DEFTYPE.\" \"[Structure]\" "
 "si::defstruct-form \"~%Defined as: ~S~%See the doc of DEFSTRUCT.\" \"[Setf]\" \"~@[~%"
 "Defined as: ~S~%See the doc of DEFINE-SETF-EXPANDER.~]\" \"~&---------------------"
 "--------------------------------------------------------\" \"~&No documentation fo"
 "r ~:@(~S~).\" si::print-doc \"~&No documentation for ~S in ~:[any~;~A~] package.\" "
 "si::help* 0 0 0 0 0 0 si::make-restart 0 0 0 clos::inspect-obj 0 0 si::get-docum"
 "entation 0 \"SYSTEM\"" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
