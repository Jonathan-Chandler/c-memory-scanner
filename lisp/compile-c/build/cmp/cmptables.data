static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)6799, (cl_index)6799,
        (ecl_base_char*)
"c::+c1-form-hash+ c::+c1-dispatch-alist+ c::+t1-dispatch-alist+ c::+set-loc-disp"
 "atch-alist+ c::+wt-loc-dispatch-alist+ c::+c2-dispatch-alist+ c::+t2-dispatch-al"
 "ist+ c::+p1-dispatch-alist+ c::make-dispatch-table c::*c1-dispatch-table* c::*t1"
 "-dispatch-table* c::*c2-dispatch-table* c::*set-loc-dispatch-table* c::*wt-loc-d"
 "ispatch-table* c::*t2-dispatch-table* c::*p1-dispatch-table* c::*p0-dispatch-tab"
 "le* c::*cinline-dispatch-table* 0 \"COMPILER\" 0 ((function 3 nil nil t) (multiple"
 "-value-bind 3 nil t nil) (c::locals 3 nil t nil) (c::make-form 2 t nil nil) (si:"
 ":fset 5 t nil nil) (throw 2 t nil nil) (funcall 2 t nil nil) (c::init-form 2 t n"
 "il nil) (load-time-value 2 nil t t) (c::call-local 2 t nil nil) (block 2 nil t n"
 "il) (unwind-protect 2 t nil nil) (c::call-global 2 nil nil nil) (ext::checked-va"
 "lue 3 nil nil nil) (catch 2 t nil nil) (c::fmla-not 1 nil t nil) (return-from 3 "
 "t nil nil) (lambda 3 nil nil nil) (c::fmla-and nil nil t nil) (psetq 2 t nil nil"
 ") (c::with-stack 1 t nil nil) (c::fmla-or nil nil t nil) (ext::compiler-typecase"
 " 2 nil nil nil) (c::stack-push-values 2 t nil nil) (if 3 nil t nil) (tagbody 2 n"
 "il t nil) (progv 3 t nil nil) (c::ordinary 1 nil t nil) (si::structure-set 4 t n"
 "il nil) (ext::compiler-let 3 nil nil nil) (multiple-value-setq 2 t nil nil) (ext"
 "::location 1 nil t t) (si::structure-ref 4 nil t nil) (values 1 nil t nil) (prog"
 "n 1 nil t nil) (setq 2 t nil nil) (let* 3 nil t nil) (ffi::c-progn 2 nil nil nil"
 ") (go 2 t nil nil) (rplacd 1 t nil nil) (ffi::c-inline 6 nil nil nil) (c::var 1 "
 "nil nil t)) ((block . c::c1block) (return-from . c::c1return-from) (funcall . c:"
 ":c1funcall) (catch . c::c1catch) (unwind-protect . c::c1unwind-protect) (throw ."
 " c::c1throw) (ffi::defcallback . c::c1-defcallback) (progn . c::c1progn) (ext::w"
 "ith-backend . c::c1with-backend) (ffi::clines . c::c1clines) (ffi::c-inline . c:"
 ":c1c-inline) (ffi::c-progn . c::c1c-progn) (flet . c::c1flet) (labels . c::c1lab"
 "els) (locally . c::c1locally) (macrolet . c::c1macrolet) (symbol-macrolet . c::c"
 "1symbol-macrolet) (if . c::c1if) (not . c::c1not) (and . c::c1and) (or . c::c1or"
 ") (let . c::c1let) (let* . c::c1let*) (multiple-value-call . c::c1multiple-value"
 "-call) (multiple-value-prog1 . c::c1multiple-value-prog1) (values . c::c1values)"
 " (multiple-value-setq . c::c1multiple-value-setq) (multiple-value-bind . c::c1mu"
 "ltiple-value-bind) (ext::compiler-typecase . c::c1compiler-typecase) (ext::check"
 "ed-value . c::c1checked-value) (quote . c::c1quote) (function . c::c1function) ("
 "the . c::c1the) (ext::truly-the . c::c1truly-the) (eval-when . c::c1eval-when) ("
 "declare . c::c1declare) (ext::compiler-let . c::c1compiler-let) (c::with-stack ."
 " c::c1with-stack) (c::innermost-stack-frame . c::c1innermost-stack-frame) (c::st"
 "ack-push . c::c1stack-push) (c::stack-push-values . c::c1stack-push-values) (c::"
 "stack-pop . c::c1stack-pop) (si::apply-from-stack-frame . c::c1apply-from-stack-"
 "frame) (tagbody . c::c1tagbody) (go . c::c1go) (setq . c::c1setq) (progv . c::c1"
 "progv) (psetq . c::c1psetq) (load-time-value . c::c1load-time-value) (apply . c:"
 ":c1apply)) ((ext::with-backend . c::c1with-backend) (defmacro . c::t1defmacro) ("
 "ext::compiler-let . c::c1compiler-let) (eval-when . c::c1eval-when) (progn . c::"
 "c1progn) (macrolet . c::c1macrolet) (locally . c::c1locally) (symbol-macrolet . "
 "c::c1symbol-macrolet) (si::fset . c::t1fset)) ((c::bind . c::bind) (c::jump-true"
 " . c::set-jump-true) (c::jump-false . c::set-jump-false) (values . c::set-values"
 "-loc) (c::value0 . c::set-value0-loc) (return . c::set-return-loc) (c::trash . c"
 "::set-trash-loc) (the . c::set-the-loc)) ((c::call-normal . c::wt-call-normal) ("
 "c::call-indirect . c::wt-call-indirect) (ffi::c-inline . c::wt-c-inline-loc) (c:"
 ":coerce-loc . c::wt-coerce-loc) (c::temp . c::wt-temp) (c::lcl . c::wt-lcl-loc) "
 "(c::fixnum-value . c::wt-number) (c::long-float-value . c::wt-number) (c::double"
 "-float-value . c::wt-number) (c::single-float-value . c::wt-number) (c::short-fl"
 "oat-value . c::wt-number) (c::csfloat-value . c::wt-number) (c::cdfloat-value . "
 "c::wt-number) (c::clfloat-value . c::wt-number) (c::character-value . c::wt-char"
 "acter) (c::value . c::wt-value) (c::keyvars . c::wt-keyvars) (the . c::wt-the) ("
 "fdefinition . c::wt-fdefinition) (c::make-cclosure . c::wt-make-closure) (c::str"
 "ucture-ref . c::wt-structure-ref) (nil . \"ECL_NIL\") (t . \"ECL_T\") (return . \"val"
 "ue0\") (values . \"cl_env_copy->values[0]\") (c::va-arg . \"va_arg(args,cl_object)\")"
 " (c::cl-va-arg . \"ecl_va_arg(args)\") (c::value0 . \"value0\")) ((block . c::c2bloc"
 "k) (return-from . c::c2return-from) (funcall . c::c2funcall) (c::call-global . c"
 "::c2call-global) (catch . c::c2catch) (unwind-protect . c::c2unwind-protect) (th"
 "row . c::c2throw) (progn . c::c2progn) (ffi::c-inline . c::c2c-inline) (ffi::c-p"
 "rogn . c::c2c-progn) (c::locals . c::c2locals) (c::call-local . c::c2call-local)"
 " (if . c::c2if) (c::fmla-not . c::c2fmla-not) (c::fmla-and . c::c2fmla-and) (c::"
 "fmla-or . c::c2fmla-or) (let* . c::c2let*) (values . c::c2values) (multiple-valu"
 "e-setq . c::c2multiple-value-setq) (multiple-value-bind . c::c2multiple-value-bi"
 "nd) (function . c::c2function) (ext::compiler-let . c::c2compiler-let) (c::with-"
 "stack . c::c2with-stack) (c::stack-push-values . c::c2stack-push-values) (tagbod"
 "y . c::c2tagbody) (go . c::c2go) (c::var . c::c2var/location) (ext::location . c"
 "::c2var/location) (setq . c::c2setq) (progv . c::c2progv) (psetq . c::c2psetq) ("
 "si::fset . c::c2fset) (ext::compiler-typecase . c::c2compiler-typecase) (ext::ch"
 "ecked-value . c::c2checked-value)) ((ext::compiler-let . c::t2compiler-let) (pro"
 "gn . c::t2progn) (c::ordinary . c::t2ordinary) (load-time-value . c::t2load-time"
 "-value) (c::make-form . c::t2make-form) (c::init-form . c::t2init-form) (si::fse"
 "t . c::t2fset)) ((block . c::p1block) (return-from . c::p1return-from) (c::call-"
 "global . c::p1call-global) (c::call-local . c::p1call-local) (catch . c::p1catch"
 ") (throw . c::p1throw) (if . c::p1if) (c::fmla-not . c::p1fmla-not) (c::fmla-and"
 " . c::p1fmla-and) (c::fmla-or . c::p1fmla-or) (lambda . c::p1lambda) (let* . c::"
 "p1let*) (c::locals . c::p1locals) (multiple-value-bind . c::p1multiple-value-bin"
 "d) (multiple-value-setq . c::p1multiple-value-setq) (progn . c::p1progn) (progv "
 ". c::p1progv) (setq . c::p1setq) (psetq . c::p1psetq) (tagbody . c::p1tagbody) ("
 "go . c::p1go) (unwind-protect . c::p1unwind-protect) (c::ordinary . c::p1ordinar"
 "y) (si::fset . c::p1fset) (c::var . c::p1var) (values . c::p1values) (ext::locat"
 "ion . c::p1trivial) (ffi::c-inline . c::p1trivial) (ffi::c-progn . c::p1trivial)"
 " (function . c::p1trivial) (funcall . c::p1trivial) (load-time-value . c::p1triv"
 "ial) (c::make-form . c::p1trivial) (c::init-form . c::p1trivial) (c::with-stack "
 ". c::p1with-stack) (c::stack-push-values . c::p1stack-push-values) (ext::compile"
 "r-typecase . c::p1compiler-typecase) (ext::checked-value . c::p1checked-value))" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
