static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)52091, (cl_index)52091,
        (ecl_base_char*)
"c::proclaimed-arg-types \"Duplicate proclamation for ~A\" :no-sp-change c::no-sp-c"
 "hange 0 :pure 0 c::pure c::no-side-effects :no-side-effects 0 0 \"Unknown propert"
 "y ~S in function proclamation for ~S\" c::parse-function-proclamation c::array-ra"
 "nk-index c::bit-array c::association-list c::byte-specifier c::character-code c:"
 ":character-designator c::external-file-format c::declaration-specifier c::digit-"
 "weight c::environment c::form c::format-control c::function-designator c::functi"
 "on-name c::gen-bool c::natural c::package-designator c::pathname-designator c::p"
 "roper-list c::property-list c::radix c::readtable-designator c::restart-designat"
 "or c::sequence-index c::stream-designator c::string-designator c::tree c::type-s"
 "pecifier c::universal-time c::time-zone 0 c::proclaim-function \"C\" (deftype c::a"
 "rray-rank-index nil '#1=(integer 0 63)) #1# (deftype c::bit-array nil '#2=(array"
 " bit *)) #2# (deftype c::association-list nil 'list) (deftype c::byte-specifier "
 "nil '#3=(cons integer-length integer-length)) #3# (deftype c::character-code nil"
 " '#4=(integer 0 1114111)) #4# (deftype c::character-designator nil '#5=(or chara"
 "cter c::string-designator)) #5# (deftype c::external-file-format nil '#6=(or sym"
 "bol list)) #6# (deftype c::declaration-specifier nil 'list) (deftype c::digit-we"
 "ight nil '#7=(integer 0 35)) #7# (deftype c::environment nil 'list) (deftype c::"
 "form nil t) (deftype c::format-control nil '#8=(or string function)) #8# (deftyp"
 "e c::function-designator nil '#9=(or symbol function)) #9# (deftype c::function-"
 "name nil '#10=(or list symbol)) #10# (deftype c::gen-bool nil 't) (deftype integ"
 "er-length nil 'ext::array-index) (deftype c::natural nil '#11=(integer 0 *)) #11"
 "# (deftype c::package-designator nil '#12=(or c::string-designator package)) #12"
 "# (deftype c::pathname-designator nil '#13=(or pathname string file-stream)) #13"
 "# (deftype pathname-device nil '#14=(or string (member nil :unspecific))) #14# ("
 "deftype pathname-directory nil '#15=(or string list (member :wild :unspecific)))"
 " #15# (deftype pathname-host nil '#16=(or string list (member nil :unspecific)))"
 " #16# (deftype pathname-name nil '#17=(or string (member nil :wild :unspecific))"
 ") #17# (deftype pathname-type nil '(or string (member nil :wild :unspecific))) ("
 "deftype pathname-version nil '#18=(or unsigned-byte (member nil :wild :newest :u"
 "nspecific))) #18# (deftype c::proper-list nil 'list) (deftype c::property-list n"
 "il 'list) (deftype c::radix nil '#19=(integer 2 36)) #19# (deftype c::readtable-"
 "designator nil '#20=(or null readtable)) #20# (deftype c::restart-designator nil"
 " '#21=(or (and symbol (not null)) restart)) #21# (deftype c::sequence-index nil "
 "'#22=(integer 0 536870911)) #22# (deftype c::stream-designator nil '#23=(or stre"
 "am (member t nil))) #23# (deftype c::string-designator nil '#24=(or symbol strin"
 "g character)) #24# (deftype c::tree nil 't) (deftype c::type-specifier nil '#25="
 "(or symbol class list)) #25# (deftype c::universal-time nil 'unsigned-byte) (def"
 "type c::time-zone nil t) (deftype ext::instance nil 'standard-object) (notinline"
 " ext::constantp-inner ext::constant-form-value) ((compile (c::function-name &opt"
 "ional (or list function)) (values (or c::function-name function) c::gen-bool c::"
 "gen-bool)) (compiler-macro-function (c::function-name &optional c::environment) "
 "function) (constantp (t &optional c::environment) c::gen-bool) (eval (c::form) ("
 "values &rest t)) (macro-function (symbol &optional c::environment) function) (ma"
 "croexpand (c::form &optional c::environment) (values c::form c::gen-bool)) (macr"
 "oexpand-1 (c::form &optional c::environment) (values c::form c::gen-bool)) (proc"
 "laim (c::declaration-specifier) (values &rest t)) (special-operator-p (symbol) c"
 "::gen-bool :pure) (si::specialp (symbol) c::gen-bool :predicate) (si::do-defsetf"
 " (symbol (or symbol function) &optional list) t) (si::do-define-setf-method (sym"
 "bol function) t) (ext::constant-form-value (t &optional c::environment) t) (ext:"
 ":constantp-inner (t &optional c::environment) c::gen-bool) (si::remove-documenta"
 "tion (t) t) (si::find-declarations (t &optional c::gen-bool) t) (si::search-keyw"
 "ord (t t) t) (si::check-keyword (list list &optional c::gen-bool) t) (coerce (t "
 "c::type-specifier) t) (subtypep (c::type-specifier c::type-specifier &optional c"
 "::environment) (values c::gen-bool c::gen-bool)) (type-of (t) c::type-specifier)"
 " (typep (t c::type-specifier &optional c::environment) c::gen-bool) (si::coerce-"
 "to-vector (t c::type-specifier t c::gen-bool) vector :no-side-effects) (si::coer"
 "ce-to-function (c::function-designator) function :no-side-effects) (apply (c::fu"
 "nction-designator &rest t) (values &rest t)) (fdefinition (c::function-name) (or"
 " list function (member 'special)) :reader) (fboundp (c::function-name) c::gen-bo"
 "ol :reader) (fmakunbound (c::function-name) c::function-name) (funcall (c::funct"
 "ion-designator &rest t) (values &rest t)) (function-lambda-expression (function)"
 " (values list c::gen-bool t) :pure) (functionp (t) c::gen-bool :pure) (compiled-"
 "function-p (t) c::gen-bool :pure) (not (c::gen-bool) boolean :pure) (eq (t t) c:"
 ":gen-bool :pure) (eql (t t) c::gen-bool :pure) (equal (t t) c::gen-bool :pure) ("
 "equalp (t t) c::gen-bool :pure) (identity (t) t) (complement (function) function"
 ") (constantly (t) function) (every (c::function-designator sequence &rest sequen"
 "ce) c::gen-bool) (some (c::function-designator sequence &rest sequence) t) (note"
 "very (c::function-designator sequence &rest sequence) c::gen-bool) (notany (c::f"
 "unction-designator sequence &rest sequence) c::gen-bool) (values-list (list) (va"
 "lues &rest t)) (get-setf-expansion (t &optional c::environment) (values t t t t "
 "t)) (si::fset (c::function-name function &optional c::gen-bool t) function) (si:"
 ":setf-definition (c::function-name c::createp) list) (ext::compiled-function-nam"
 "e (function) (or null c::function-name)) (si::compiled-function-block (function)"
 " (or null si::codeblock)) (ext::compiled-function-file (function) (values t t)) "
 "(ext::constantly-t nil function) (si::ihs-top nil si::index) (si::ihs-fun (si::i"
 "ndex) (or null c::function-designator)) (si::ihs-env (si::index) c::environment)"
 " (si::frs-top nil si::index) (si::frs-bds (si::index) si::index) (si::frs-tag (s"
 "i::index) t) (si::frs-ihs (si::index) si::index) (si::bds-top nil si::index) (si"
 "::bds-var (si::index) symbol) (si::bds-val (si::index) t) (si::sch-frs-base (si:"
 ":index si::index) (or null si::index)) (si::ccase-error (t t t) t) (si::ecase-er"
 "ror (t t) t) (si::etypecase-error (t t) t) (si::ctypecase-error (t t t) t) (si::"
 "do-check-type (t t t t) t) (si::dm-too-many-arguments (t) t) (si::dm-too-few-arg"
 "uments (t) t) (ensure-generic-function (c::function-name &rest t) generic-functi"
 "on) (slot-boundp (ext::instance symbol) c::gen-bool) (slot-exists-p (ext::instan"
 "ce symbol) c::gen-bool) (slot-makunbound (ext::instance symbol) ext::instance) ("
 "slot-value (ext::instance symbol) t) (make-load-form-saving-slots (t &rest t) (v"
 "alues t t)) (find-class (symbol &optional c::gen-bool c::environment) (or class "
 "null)) (class-of (t) class :no-side-effects) (clos::standard-instance-set (ext::"
 "instance t t) t) (clos::std-compute-applicable-methods (generic-function list) l"
 "ist) (clos::std-compute-effective-method (generic-function method-combination li"
 "st) function) (clos::compute-effective-method-function (generic-function method-"
 "combination list) function) (clos::update-instance (ext::instance) (values)) (cl"
 "os::slot-value-set (t ext::instance symbol) t) (clos::extract-lambda-list (list)"
 " list) (clos::extract-specializer-names (list) list) (clos::install-method (t t "
 "t t t &rest t) t) (clos::find-slot-definition (t t) t) (clos::ensure-class (t &r"
 "est t) t) (mp::compare-and-swap-standard-instance (ext::instance t t t) t) (mp::"
 "compare-and-swap-slot-value (ext::instance symbol t t) t) (mp::atomic-incf-stand"
 "ard-instance (ext::instance t fixnum) fixnum) (mp::atomic-incf-slot-value (ext::"
 "instance symbol fixnum) fixnum) (copy-structure (t) t) (si::make-structure (t &r"
 "est t) structure-object) (si::structure-name (structure-object) symbol :reader) "
 "(si::structure-ref (structure-object t fixnum) t :reader) (si::structure-set (st"
 "ructure-object t fixnum t) t) (si::structurep (t) c::gen-bool :predicate) (si::s"
 "tructure-subtype-p (t t) c::gen-bool :predicate) (si::define-structure (t t t t "
 "t t t t t t t t t t t) t) (si::structure-type-error (t t t t) t) (mp::compare-an"
 "d-swap-structure (structure-object t fixnum t t) t) (error (t &rest t) (values))"
 " (cerror (c::format-control t &rest t) (values &rest t)) (invalid-method-error ("
 "method c::format-control &rest t) (values)) (method-combination-error (c::format"
 "-control &rest t) (values)) (signal (t &rest t) null) (warn (t &rest t) null) (i"
 "nvoke-debugger (condition) (values)) (break (&optional c::format-control &rest t"
 ") null) (make-condition (c::type-specifier &rest t) condition) (compute-restarts"
 " (&optional (or null condition)) list) (find-restart (c::restart-designator &opt"
 "ional (or null condition)) restart) (invoke-restart (c::restart-designator &rest"
 " t) (values &rest t)) (invoke-restart-interactively (c::restart-designator) (val"
 "ues &rest t)) (abort (&optional (or null condition)) (values)) (continue (&optio"
 "nal (or null condition)) null) (muffle-warning (&optional (or null condition)) ("
 "values)) (store-value (t &optional (or null condition)) null) (use-value (t &opt"
 "ional (or null condition)) null) (ext::catch-signal (fixnum c::gen-bool &key) nu"
 "ll) (si::bind-simple-restarts (t t) list) (si::bind-simple-handlers (t t) list) "
 "(symbolp (t) c::gen-bool :pure) (keywordp (t) c::gen-bool :reader) (make-symbol "
 "(string) symbol) (copy-symbol (symbol &optional c::gen-bool) symbol) (gensym (&o"
 "ptional (or string c::natural)) symbol) (gentemp (&optional string c::package-de"
 "signator) symbol) (symbol-function (symbol) (or function list (member 'special))"
 " :reader) (symbol-name (symbol) string :pure) (symbol-package (symbol) (or packa"
 "ge null) :reader) (symbol-plist (symbol) list :reader) (symbol-value (symbol) t "
 ":reader) (get (symbol t &optional t) t :no-side-effects) (remprop (symbol t) c::"
 "gen-bool) (boundp (symbol) c::gen-bool :reader) (makunbound (symbol) symbol) (se"
 "t (symbol t) t) (si::*make-special (symbol) symbol) (si::*make-constant (symbol "
 "t) symbol) (si::put-f (list t t) list) (si::rem-f (list t) (values list boolean)"
 ") (si::set-symbol-plist (symbol list) list) (si::putprop (symbol t t) t) (si::pu"
 "t-sysprop (t t t) t) (si::get-sysprop (t t) (values t boolean)) (si::rem-sysprop"
 " (t t) boolean) (si::put-properties (symbol &rest t) symbol :no-sp-change) (mp::"
 "compare-and-swap-symbol-plist (symbol list list) list) (mp::compare-and-swap-sym"
 "bol-value (symbol t t) t) (mp::atomic-incf-symbol-value (symbol fixnum) fixnum) "
 "(export (list &optional c::package-designator) t) (find-symbol (string &optional"
 " c::package-designator) (values symbol (member :inherited :external :internal ni"
 "l))) (find-package (c::package-designator) (or package null)) (find-all-symbols "
 "(c::string-designator) list) (import (list &optional c::package-designator) t) ("
 "list-all-packages nil list) (rename-package (c::package-designator c::package-de"
 "signator &optional list) package) (shadow (list &optional c::package-designator)"
 " t) (shadowing-import (list &optional c::package-designator) t) (delete-package "
 "(c::package-designator) c::gen-bool) (make-package (c::string-designator &rest t"
 ") package) (unexport (list &optional c::package-designator) t) (unintern (symbol"
 " &optional c::package-designator) c::gen-bool) (unuse-package (list &optional c:"
 ":package-designator) t) (use-package (list &optional c::package-designator) t) ("
 "intern (string &optional c::package-designator) (values symbol (member :inherite"
 "d :external :internal nil))) (package-name (c::package-designator) (or string nu"
 "ll) :reader) (package-nicknames (c::package-designator) list :reader) (package-s"
 "hadowing-symbols (c::package-designator) list :reader) (package-use-list (c::pac"
 "kage-designator) list :reader) (package-used-by-list (c::package-designator) lis"
 "t :reader) (packagep (t) c::gen-bool :pure) (si::select-package (c::package-desi"
 "gnator) package) (si::package-hash-tables (c::package-designator) (values hash-t"
 "able hash-table list) :reader) (si::packages-iterator (t list c::gen-bool) funct"
 "ion) (ext::package-lock (c::package-designator c::gen-bool) package) (ext::packa"
 "ge-locked-p (c::package-designator) boolean :no-side-effects) (ext::package-loca"
 "l-nicknames (c::package-designator) list :no-side-effects) (ext::package-locally"
 "-nicknamed-by-list (c::package-designator) list :no-side-effects) (ext::%add-pac"
 "kage-local-nickname (c::string-designator c::package-designator c::package-desig"
 "nator) package) (ext::%remove-package-local-nickname (c::string-designator c::pa"
 "ckage-designator) list) (ext::add-package-local-nickname (c::string-designator c"
 "::package-designator &optional c::package-designator) package) (ext::remove-pack"
 "age-local-nickname (c::string-designator &optional c::package-designator) list) "
 "(= (number &rest number) c::gen-bool :pure) (/= (number &rest number) c::gen-boo"
 "l :pure) (< (real &rest real) c::gen-bool :pure) (> (real &rest real) c::gen-boo"
 "l :pure) (<= (real &rest real) c::gen-bool :pure) (>= (real &rest real) c::gen-b"
 "ool :pure) (max (real &rest real) real :pure) (min (real &rest real) real :pure)"
 " (minusp (real) c::gen-bool :pure) (plusp (real) c::gen-bool :pure) (zerop (numb"
 "er) c::gen-bool :pure) (floor (real &optional real) (values integer real) :pure)"
 " (ceiling (real &optional real) (values integer real) :pure) (truncate (real &op"
 "tional real) (values integer real) :pure) (round (real &optional real) (values i"
 "nteger real) :pure) (ffloor (real &optional real) (values float real) :pure) (fc"
 "eiling (real &optional real) (values float real) :pure) (ftruncate (real &option"
 "al real) (values float real) :pure) (fround (real &optional real) (values float "
 "real) :pure) (cos (number) number :pure) (sin (number) number :pure) (tan (numbe"
 "r) number :pure) (cosh (number) number :pure) (sinh (number) number :pure) (tanh"
 " (number) number :pure) (acos (number) number :pure) (asin (number) number :pure"
 ") (atan (number &optional real) number :pure) (acosh (number) number :pure) (asi"
 "nh (number) number :pure) (atanh (number) number :pure) (* (&rest number) number"
 " :pure) (+ (&rest number) number :pure) (- (&rest number) number :pure) (/ (numb"
 "er &rest number) number :pure) (1+ (number) number :pure) (1- (number) number :p"
 "ure) (abs (number) (real 0 *) :pure) (evenp (integer) c::gen-bool :pure) (oddp ("
 "integer) c::gen-bool :pure) (exp (number) number :pure) (expt (number number) nu"
 "mber :pure) (gcd (&rest integer) unsigned-byte :pure) (lcm (&rest integer) unsig"
 "ned-byte :pure) (log (number &optional number) number :pure) (mod (real real) re"
 "al :pure) (rem (real real) real :pure) (signum (number) number :pure) (sqrt (num"
 "ber) number :pure) (isqrt (c::natural) c::natural :pure) (make-random-state (&op"
 "tional (or random-state (member nil t))) random-state :no-side-effects) (random "
 "((or (integer 0 *) (float 0 *)) &optional random-state) (or (integer 0 *) (float"
 " 0 *))) (random-state-p (t) c::gen-bool :pure) (numberp (t) c::gen-bool :pure) ("
 "cis (real) complex :pure) (complex (real &optional real) number :pure) (complexp"
 " (t) c::gen-bool :pure) (conjugate (number) number :pure) (phase (number) (real "
 "-3.1415926535897932385l0 3.1415926535897932385l0) :pure) (realpart (number) real"
 " :pure) (imagpart (number) real :pure) (upgraded-complex-part-type (c::type-spec"
 "ifier &optional c::environment) c::type-specifier :no-side-effects) (realp (t) c"
 "::gen-bool :pure) (numerator (rational) integer :pure) (denominator (rational) u"
 "nsigned-byte :pure) (rational (real) rational :pure) (rationalize (real) rationa"
 "l :pure) (rationalp (t) c::gen-bool :pure) (ash (integer integer) integer :pure)"
 " (integer-length (integer) integer-length :pure) (integerp (t) c::gen-bool :pure"
 ") (parse-integer (string &rest t) (values integer ext::array-index) :no-side-eff"
 "ects) (boole ((integer 0 15) integer integer) integer :pure) (logand (&rest inte"
 "ger) integer :pure) (logandc1 (integer integer) integer :pure) (logandc2 (intege"
 "r integer) integer :pure) (logeqv (&rest integer) integer :pure) (logior (&rest "
 "integer) integer :pure) (lognand (integer integer) integer :pure) (lognor (integ"
 "er integer) integer :pure) (lognot (integer) integer :pure) (logorc1 (integer in"
 "teger) integer :pure) (logorc2 (integer integer) integer :pure) (logxor (&rest i"
 "nteger) integer :pure) (logbitp (unsigned-byte integer) c::gen-bool :pure) (logc"
 "ount (integer) integer-length :pure) (logtest (integer integer) c::gen-bool :pur"
 "e) (byte (unsigned-byte unsigned-byte) c::byte-specifier :pure) (byte-size (c::b"
 "yte-specifier) integer-length :pure) (byte-position (c::byte-specifier) integer-"
 "length :pure) (deposit-field (integer c::byte-specifier integer) integer :pure) "
 "(dpb (integer c::byte-specifier integer) integer :pure) (ldb (c::byte-specifier "
 "integer) unsigned-byte :pure) (ldb-test (c::byte-specifier integer) c::gen-bool "
 ":pure) (mask-field (c::byte-specifier integer) unsigned-byte :pure) (decode-floa"
 "t (float) (values float integer float) :pure) (scale-float (float integer) float"
 " :pure) (float-radix (float) fixnum :pure) (float-sign (float &optional float) f"
 "loat :pure) (float-digits (float) (integer 0 64) :pure) (float-precision (float)"
 " (integer 0 64) :pure) (integer-decode-float (float) (values integer integer (me"
 "mber -1 1)) :pure) (float (number &optional float) float :pure) (floatp (t) c::g"
 "en-bool :pure) (si::bit-array-op (t t t t) (array bit)) (ext::fixnump (t) c::gen"
 "-bool :pure) (si::ratiop (t) c::gen-bool :pure) (si::short-float-p (t) c::gen-bo"
 "ol :pure) (si::single-float-p (t) c::gen-bool :pure) (si::double-float-p (t) c::"
 "gen-bool :pure) (si::long-float-p (t) c::gen-bool :pure) (si::complex-float (flo"
 "at float) si::complex-float :pure) (si::complex-float-p (t) c::gen-bool :pure) ("
 "c::shift>> (*) nil :pure) (c::shift<< (*) nil :pure) (c::ldb1 (fixnum fixnum fix"
 "num) fixnum :no-side-effects) (char= (character &rest character) c::gen-bool :pu"
 "re) (char/= (character &rest character) c::gen-bool :pure) (char< (character &re"
 "st character) c::gen-bool :pure) (char> (character &rest character) c::gen-bool "
 ":pure) (char<= (character &rest character) c::gen-bool :pure) (char>= (character"
 " &rest character) c::gen-bool :pure) (char-equal (character &rest character) c::"
 "gen-bool :pure) (char-not-equal (character &rest character) c::gen-bool :pure) ("
 "char-lessp (character &rest character) c::gen-bool :pure) (char-greaterp (charac"
 "ter &rest character) c::gen-bool :pure) (char-not-greaterp (character &rest char"
 "acter) c::gen-bool :pure) (char-not-lessp (character &rest character) c::gen-boo"
 "l :pure) (character (c::character-designator) character) (characterp (t) c::gen-"
 "bool :pure) (alpha-char-p (character) c::gen-bool :pure) (alphanumericp (charact"
 "er) c::gen-bool :pure) (digit-char (c::digit-weight &optional c::radix) characte"
 "r :pure) (digit-char-p (character &optional c::radix) (or c::digit-weight null) "
 ":pure) (graphic-char-p (character) c::gen-bool :pure) (standard-char-p (characte"
 "r) c::gen-bool :pure) (char-upcase (character) character :pure) (char-downcase ("
 "character) character :pure) (upper-case-p (character) c::gen-bool :pure) (lower-"
 "case-p (character) c::gen-bool :pure) (both-case-p (character) c::gen-bool :pure"
 ") (char-code (character) c::character-code :pure) (char-int (character) c::chara"
 "cter-code :pure) (code-char (c::character-code) (or character null) :pure) (char"
 "-name (character) (or string null) :pure) (name-char (c::string-designator) (or "
 "character null) :pure) (si::base-char-p (t) c::gen-bool :predicate) (cons (t t) "
 "cons :no-side-effects) (consp (t) c::gen-bool :pure) (atom (t) c::gen-bool :pure"
 ") (rplaca (cons t) cons) (rplacd (cons t) cons) (car (list) t :reader) (cdr (lis"
 "t) t :reader) (caar (list) t :reader) (cadr (list) t :reader) (cdar (list) t :re"
 "ader) (cddr (list) t :reader) (caaar (list) t :reader) (caadr (list) t :reader) "
 "(cadar (list) t :reader) (caddr (list) t :reader) (cdaar (list) t :reader) (cdad"
 "r (list) t :reader) (cddar (list) t :reader) (cdddr (list) t :reader) (caaaar (l"
 "ist) t :reader) (caaadr (list) t :reader) (caadar (list) t :reader) (caaddr (lis"
 "t) t :reader) (cadaar (list) t :reader) (cadadr (list) t :reader) (caddar (list)"
 " t :reader) (cadddr (list) t :reader) (cdaaar (list) t :reader) (cdaadr (list) t"
 " :reader) (cdadar (list) t :reader) (cdaddr (list) t :reader) (cddaar (list) t :"
 "reader) (cddadr (list) t :reader) (cdddar (list) t :reader) (cddddr (list) t :re"
 "ader) (copy-tree (c::tree) c::tree :no-side-effects) (sublis (c::association-lis"
 "t c::tree &key) c::tree) (nsublis (c::association-list c::tree &key) c::tree) (s"
 "ubst (t t c::tree &key) c::tree) (subst-if (t c::function-designator c::tree &ke"
 "y) c::tree) (subst-if-not (t c::function-designator c::tree &key) c::tree) (nsub"
 "st (t t c::tree &key) c::tree) (nsubst-if (t c::function-designator c::tree &key"
 ") c::tree) (nsubst-if-not (t c::function-designator c::tree &key) c::tree) (tree"
 "-equal (c::tree c::tree &key) c::gen-bool :predicate) (copy-list (list) list :no"
 "-side-effects) (list (&rest t) list :no-side-effects) (list* (&rest t) t :no-sid"
 "e-effects) (list-length (list) (or null si::index) :no-side-effects) (listp (t) "
 "c::gen-bool :pure) (make-list (si::index &key) list :no-side-effects) (first (li"
 "st) t :reader) (second (list) t :reader) (third (list) t :reader) (fourth (list)"
 " t :reader) (fifth (list) t :reader) (sixth (list) t :reader) (seventh (list) t "
 ":reader) (eighth (list) t :reader) (ninth (list) t :reader) (tenth (list) t :rea"
 "der) (nth (unsigned-byte list) t :reader) (endp (list) c::gen-bool :predicate) ("
 "null (t) c::gen-bool :predicate) (nconc (&rest t) t) (append (&rest t) t :no-sid"
 "e-effects) (revappend (list t) t :no-side-effects) (nreconc (list t) t) (butlast"
 " (list &optional unsigned-byte) list :no-side-effects) (nbutlast (list &optional"
 " unsigned-byte) list) (last (list &optional unsigned-byte) t :reader) (ldiff (li"
 "st t) list :no-side-effects) (tailp (t list) c::gen-bool :reader) (nthcdr (fixnu"
 "m list) t :reader) (rest (list) t :no-side-effects) (member (t c::proper-list &k"
 "ey) c::proper-list) (member-if (c::function-designator c::proper-list &key) c::p"
 "roper-list) (member-if-not (c::function-designator c::proper-list &key) c::prope"
 "r-list) (mapc (c::function-designator c::proper-list &rest c::proper-list) c::pr"
 "oper-list) (mapcar (c::function-designator c::proper-list &rest c::proper-list) "
 "c::proper-list) (mapcan (c::function-designator c::proper-list &rest c::proper-l"
 "ist) c::proper-list) (mapl (c::function-designator c::proper-list &rest c::prope"
 "r-list) c::proper-list) (maplist (c::function-designator c::proper-list &rest c:"
 ":proper-list) c::proper-list) (mapcon (c::function-designator c::proper-list &re"
 "st c::proper-list) c::proper-list) (acons (t t c::association-list) c::associati"
 "on-list :no-side-effects) (assoc (t c::association-list &key) t) (assoc-if (c::f"
 "unction-designator c::association-list &key) t) (assoc-if-not (c::function-desig"
 "nator c::association-list &key) t) (copy-alist (c::association-list) c::associat"
 "ion-list :no-side-effects) (pairlis (c::proper-list c::proper-list &optional c::"
 "association-list) c::association-list :no-side-effects) (rassoc (t c::associatio"
 "n-list &key) t) (rassoc-if (c::function-designator c::association-list &key) t) "
 "(rassoc-if-not (c::function-designator c::association-list &key) t) (get-propert"
 "ies (c::property-list c::proper-list) (values t t list) :no-side-effects) (getf "
 "(c::property-list t &optional t) t :reader) (intersection (c::proper-list c::pro"
 "per-list &key) c::proper-list) (nintersection (c::proper-list c::proper-list &ke"
 "y) c::proper-list) (adjoin (t c::proper-list &key) c::proper-list) (set-differen"
 "ce (c::proper-list c::proper-list &key) c::proper-list) (nset-difference (c::pro"
 "per-list c::proper-list &key) c::proper-list) (set-exclusive-or (c::proper-list "
 "c::proper-list &key) c::proper-list) (nset-exclusive-or (c::proper-list c::prope"
 "r-list &key) c::proper-list) (subsetp (c::proper-list c::proper-list &key) c::ge"
 "n-bool :predicate) (union (c::proper-list c::proper-list &key) c::proper-list) ("
 "nunion (c::proper-list c::proper-list &key) c::proper-list) (si::member1 (t c::p"
 "roper-list t t t) list) (si::memq (t c::proper-list) list) (si::cons-car (cons) "
 "t :reader) (si::cons-cdr (cons) t :reader) (si::proper-list-p (t) c::gen-bool :p"
 "redicate) (mp::compare-and-swap-car (cons t t) t) (mp::atomic-incf-car (cons fix"
 "num) fixnum) (mp::compare-and-swap-cdr (cons t t) t) (mp::atomic-incf-cdr (cons "
 "fixnum) fixnum) (mp::remcas (symbol) boolean) (make-array ((or ext::array-index "
 "list) &key) array :no-side-effects) (adjust-array (array (or ext::array-index li"
 "st) &key) array) (adjustable-array-p (array) c::gen-bool :pure) (aref (array &re"
 "st ext::array-index) t :reader) (array-dimension (array c::array-rank-index) ext"
 "::array-index :reader) (array-dimensions (array) list :reader) (array-element-ty"
 "pe (array) c::type-specifier :pure) (array-has-fill-pointer-p (array) c::gen-boo"
 "l :pure) (array-displacement (array) (values (or array null) ext::array-index) :"
 "reader) (array-in-bounds-p (array &rest ext::array-index) c::gen-bool :no-side-e"
 "ffects) (array-rank (array) c::array-rank-index :reader) (array-row-major-index "
 "(array &rest ext::array-index) ext::array-index :no-side-effects) (array-total-s"
 "ize (array) ext::array-index :reader) (arrayp (t) c::gen-bool :pure) (fill-point"
 "er (vector) ext::array-index :reader) (row-major-aref (array ext::array-index) t"
 " :reader) (upgraded-array-element-type (c::type-specifier &optional c::environme"
 "nt) c::type-specifier :no-side-effects) (simple-vector-p (t) c::gen-bool :pure) "
 "(svref (simple-vector ext::array-index) t :reader) (vector (&rest t) vector :no-"
 "side-effects) (vector-pop (vector) t) (vector-push (t vector) (or ext::array-ind"
 "ex null)) (vector-push-extend (t vector &optional ext::array-index) ext::array-i"
 "ndex) (vectorp (t) c::gen-bool :pure) (bit (c::bit-array &rest ext::array-index)"
 " bit :reader) (sbit ((simple-array bit) &rest ext::array-index) bit :reader) (bi"
 "t-and (c::bit-array c::bit-array &optional (or c::bit-array (member t nil))) c::"
 "bit-array :no-side-effects) (bit-andc1 (c::bit-array c::bit-array &optional (or "
 "c::bit-array (member t nil))) c::bit-array :no-side-effects) (bit-andc2 (c::bit-"
 "array c::bit-array &optional (or c::bit-array (member t nil))) c::bit-array :no-"
 "side-effects) (bit-eqv (c::bit-array c::bit-array &optional (or c::bit-array (me"
 "mber t nil))) c::bit-array :no-side-effects) (bit-ior (c::bit-array c::bit-array"
 " &optional (or c::bit-array (member t nil))) c::bit-array :no-side-effects) (bit"
 "-nand (c::bit-array c::bit-array &optional (or c::bit-array (member t nil))) c::"
 "bit-array :no-side-effects) (bit-nor (c::bit-array c::bit-array &optional (or c:"
 ":bit-array (member t nil))) c::bit-array :no-side-effects) (bit-orc1 (c::bit-arr"
 "ay c::bit-array &optional (or c::bit-array (member t nil))) c::bit-array :no-sid"
 "e-effects) (bit-orc2 (c::bit-array c::bit-array &optional (or c::bit-array (memb"
 "er t nil))) c::bit-array :no-side-effects) (bit-xor (c::bit-array c::bit-array &"
 "optional (or c::bit-array (member t nil))) c::bit-array :no-side-effects) (bit-n"
 "ot (c::bit-array &optional (or c::bit-array (member t nil))) c::bit-array :no-si"
 "de-effects) (bit-vector-p (t) c::gen-bool :pure) (simple-bit-vector-p (t) t :pur"
 "e) (si::make-pure-array (t t t t t t) array) (si::make-vector (t t t t t t) vect"
 "or) (si::aset (array t &rest t) t) (si::row-major-aset (array ext::array-index t"
 ") t) (si::svset (simple-vector ext::array-index t) t) (si::fill-pointer-set (vec"
 "tor ext::array-index) ext::array-index) (si::replace-array (array array) array) "
 "(mp::compare-and-swap-svref (simple-vector ext::array-index t t) t) (mp::atomic-"
 "incf-svref (simple-vector ext::array-index fixnum) fixnum) (simple-string-p (t) "
 "c::gen-bool :pure) (char (string ext::array-index) character :reader) (schar (si"
 "mple-string ext::array-index) character :reader) (string (c::string-designator) "
 "string :no-side-effects) (string-upcase (c::string-designator &key) string :no-s"
 "ide-effects) (string-downcase (c::string-designator &key) string :no-side-effect"
 "s) (string-capitalize (c::string-designator &key) string :no-side-effects) (nstr"
 "ing-upcase (string &key) string) (nstring-downcase (string &key) string) (nstrin"
 "g-capitalize (string &key) string) (string-trim (sequence c::string-designator) "
 "string :no-side-effects) (string-left-trim (sequence c::string-designator) strin"
 "g :no-side-effects) (string-right-trim (sequence c::string-designator) string :n"
 "o-side-effects) (string= (c::string-designator c::string-designator &key) c::gen"
 "-bool :no-side-effects) (string/= (c::string-designator c::string-designator &ke"
 "y) (or ext::array-index null) :no-side-effects) (string< (c::string-designator c"
 "::string-designator &key) (or ext::array-index null) :no-side-effects) (string> "
 "(c::string-designator c::string-designator &key) (or ext::array-index null) :no-"
 "side-effects) (string<= (c::string-designator c::string-designator &key) (or ext"
 "::array-index null) :no-side-effects) (string>= (c::string-designator c::string-"
 "designator &key) (or ext::array-index null) :no-side-effects) (string-equal (c::"
 "string-designator c::string-designator &key) c::gen-bool :no-side-effects) (stri"
 "ng-not-equal (c::string-designator c::string-designator &key) (or ext::array-ind"
 "ex null) :no-side-effects) (string-lessp (c::string-designator c::string-designa"
 "tor &key) (or ext::array-index null) :no-side-effects) (string-greaterp (c::stri"
 "ng-designator c::string-designator &key) (or ext::array-index null) :no-side-eff"
 "ects) (string-not-lessp (c::string-designator c::string-designator &key) (or ext"
 "::array-index null) :no-side-effects) (string-not-greaterp (c::string-designator"
 " c::string-designator &key) (or ext::array-index null) :no-side-effects) (string"
 "p (t) c::gen-bool :predicate) (make-string (ext::array-index &key) string :no-si"
 "de-effects) (si::base-string-p (t) c::gen-bool :pure) (si::char-set (string ext:"
 ":array-index character) character) (si::schar-set (string ext::array-index chara"
 "cter) character) (si::base-string-concatenate (&rest base-string) base-string) ("
 "copy-seq (sequence) sequence :no-side-effects) (elt (sequence c::sequence-index)"
 " t :no-side-effects) (fill (sequence t &key) sequence) (make-sequence (c::type-s"
 "pecifier c::sequence-index &key) sequence :no-side-effects) (subseq (sequence c:"
 ":sequence-index &optional (or c::sequence-index null)) sequence :no-side-effects"
 ") (map (c::type-specifier c::function-designator sequence &rest sequence) sequen"
 "ce) (map-into (sequence c::function-designator &rest sequence) sequence) (reduce"
 " (c::function-designator sequence &key) t) (count (t sequence &key) c::sequence-"
 "index) (count-if (c::function-designator sequence &key) c::sequence-index) (coun"
 "t-if-not (c::function-designator sequence &key) c::sequence-index) (length (sequ"
 "ence) c::sequence-index :no-side-effects) (reverse (sequence) sequence :no-side-"
 "effects) (nreverse (sequence) sequence) (sort (sequence c::function-designator &"
 "key) sequence) (stable-sort (sequence c::function-designator &key) sequence) (fi"
 "nd (t sequence &key) t :no-side-effects) (find-if (c::function-designator sequen"
 "ce &key) t) (find-if-not (c::function-designator sequence &key) t) (position (t "
 "sequence &key) (or null c::sequence-index)) (position-if (c::function-designator"
 " sequence &key) (or null c::sequence-index)) (position-if-not (c::function-desig"
 "nator sequence &key) (or null c::sequence-index)) (search (sequence sequence &ke"
 "y) (or null c::sequence-index) :no-side-effects) (mismatch (sequence sequence &k"
 "ey) (or null c::sequence-index) :no-side-effects) (replace (sequence sequence &k"
 "ey) sequence) (substitute (t t sequence &key) sequence) (substitute-if (t c::fun"
 "ction-designator sequence &key) sequence) (substitute-if-not (t c::function-desi"
 "gnator sequence &key) sequence) (nsubstitute (t t sequence &key) sequence) (nsub"
 "stitute-if (t c::function-designator sequence &key) sequence) (nsubstitute-if-no"
 "t (t c::function-designator sequence &key) sequence) (concatenate (c::type-speci"
 "fier &rest sequence) sequence :no-side-effects) (merge (c::type-specifier sequen"
 "ce sequence c::function-designator &key) sequence) (remove (t sequence &key) seq"
 "uence) (remove-if (c::function-designator sequence &key) sequence) (remove-if-no"
 "t (c::function-designator sequence &key) sequence) (delete (t sequence &key) seq"
 "uence) (delete-if (c::function-designator sequence &key) sequence) (delete-if-no"
 "t (c::function-designator sequence &key) sequence) (remove-duplicates (sequence "
 "&key) sequence) (delete-duplicates (sequence &key) sequence) (si::elt-set (seque"
 "nce c::sequence-index t) t) (si::make-seq-iterator (sequence &optional c::sequen"
 "ce-index) t :no-side-effects) (si::seq-iterator-ref (sequence t) t :reader) (si:"
 ":seq-iterator-set (sequence t t) t :no-sp-change) (si::seq-iterator-next (sequen"
 "ce t) t :reader) (si::sequence-start-end (t sequence c::sequence-index (or null "
 "c::sequence-index)) (values fixnum fixnum fixnum) :no-side-effects) (si::sequenc"
 "e-count ((or null integer)) fixnum :no-side-effects) (si::coerce-to-list (sequen"
 "ce) list) (make-hash-table (&key) hash-table :no-side-effects) (hash-table-p (t)"
 " c::gen-bool :pure) (hash-table-count (hash-table) ext::array-index :reader) (ha"
 "sh-table-rehash-size (hash-table) (or (integer 1 *) (float (1.0) *)) :pure) (has"
 "h-table-rehash-threshold (hash-table) (real 0 1) :pure) (hash-table-size (hash-t"
 "able) ext::array-index :reader) (hash-table-test (hash-table) c::function-design"
 "ator :pure) (gethash (t hash-table &optional t) (values t c::gen-bool) :reader) "
 "(remhash (t hash-table) c::gen-bool) (maphash (c::function-designator hash-table"
 ") null) (clrhash (hash-table) hash-table) (sxhash (t) (integer 0 536870911) :no-"
 "side-effects) (si::hash-set (t hash-table t) t) (pathname (c::pathname-designato"
 "r) pathname :no-side-effects) (make-pathname (&key) pathname :no-side-effects) ("
 "pathnamep (t) c::gen-bool :pure) (pathname-host (c::pathname-designator) pathnam"
 "e-host :no-side-effects) (pathname-device (c::pathname-designator) pathname-devi"
 "ce :no-side-effects) (pathname-directory (c::pathname-designator) pathname-direc"
 "tory :no-side-effects) (pathname-name (c::pathname-designator) pathname-name :no"
 "-side-effects) (pathname-type (c::pathname-designator) pathname-type :no-side-ef"
 "fects) (pathname-version (c::pathname-designator) pathname-version :no-side-effe"
 "cts) (load-logical-pathname-translations (string) c::gen-bool) (logical-pathname"
 "-translations (string) list) (logical-pathname (c::pathname-designator) logical-"
 "pathname) (namestring (c::pathname-designator) (or string null) :no-side-effects"
 ") (file-namestring (c::pathname-designator) (or string null) :no-side-effects) ("
 "directory-namestring (c::pathname-designator) (or string null) :no-side-effects)"
 " (host-namestring (c::pathname-designator) (or string null) :no-side-effects) (e"
 "nough-namestring (c::pathname-designator &optional c::pathname-designator) (or s"
 "tring null) :no-side-effects) (parse-namestring (c::pathname-designator &optiona"
 "l pathname-host c::pathname-designator &key) (values (or pathname null) (or ext:"
 ":array-index null)) :no-side-effects) (wild-pathname-p (c::pathname-designator &"
 "optional (member :host :device :directory :name :type :version nil)) c::gen-bool"
 " :no-side-effects) (pathname-match-p (c::pathname-designator c::pathname-designa"
 "tor) c::gen-bool :no-side-effects) (translate-logical-pathname (c::pathname-desi"
 "gnator &key) pathname :no-side-effects) (translate-pathname (c::pathname-designa"
 "tor c::pathname-designator c::pathname-designator &key) pathname :no-side-effect"
 "s) (merge-pathnames (c::pathname-designator &optional c::pathname-designator pat"
 "hname-version) pathname :no-side-effects) (directory (c::pathname-designator &ke"
 "y) list) (probe-file (c::pathname-designator) (or pathname null)) (ensure-direct"
 "ories-exist (c::pathname-designator &key) (values pathname c::gen-bool)) (truena"
 "me (c::pathname-designator) pathname) (file-author (c::pathname-designator) (or "
 "string null)) (file-write-date (c::pathname-designator) (or c::universal-time nu"
 "ll)) (rename-file (c::pathname-designator c::pathname-designator) (values pathna"
 "me pathname pathname)) (delete-file (c::pathname-designator) t) (ext::file-kind "
 "(c::pathname-designator c::gen-bool) symbol) (ext::chdir (c::pathname-designator"
 " &optional c::gen-bool) pathname) (ext::getcwd (&optional c::gen-bool) pathname)"
 " (ext::mkstemp (c::pathname-designator) (or null pathname)) (ext::copy-file (c::"
 "pathname-designator c::pathname-designator) c::gen-bool) (si::mkdir (c::pathname"
 "-designator unsigned-byte) string) (si::rmdir (c::pathname-designator) null) (in"
 "put-stream-p (stream) c::gen-bool :reader) (output-stream-p (stream) c::gen-bool"
 " :reader) (interactive-stream-p (stream) c::gen-bool :reader) (open-stream-p (st"
 "ream) c::gen-bool :reader) (stream-element-type (stream) c::type-specifier :read"
 "er) (streamp (t) c::gen-bool :pure) (read-byte (stream &optional c::gen-bool t) "
 "t) (write-byte (integer stream) integer) (peek-char (&optional (or character boo"
 "lean) c::stream-designator c::gen-bool t c::gen-bool) t) (read-char (&optional c"
 "::stream-designator c::gen-bool t c::gen-bool) t) (read-char-no-hang (&optional "
 "c::stream-designator c::gen-bool t c::gen-bool) t) (terpri (&optional c::stream-"
 "designator) null) (fresh-line (&optional c::stream-designator) c::gen-bool) (unr"
 "ead-char (character &optional c::stream-designator) null) (write-char (character"
 " &optional c::stream-designator) character) (read-line (&optional c::stream-desi"
 "gnator c::gen-bool t c::gen-bool) (values t c::gen-bool)) (write-string (string "
 "&optional c::stream-designator &key) string) (write-line (string &optional c::st"
 "ream-designator &key) string) (read-sequence (sequence stream &key) c::sequence-"
 "index) (write-sequence (sequence stream &key) sequence) (file-length (stream) (o"
 "r unsigned-byte null)) (file-position (stream &optional c::file-position-designa"
 "tor) t) (file-string-length (stream (or string character)) (or unsigned-byte nul"
 "l)) (open (c::pathname-designator &key) (or file-stream null)) (stream-external-"
 "format (stream) c::external-file-format :reader) (close (stream &key) t) (listen"
 " (&optional c::stream-designator) c::gen-bool) (clear-input (&optional c::stream"
 "-designator) null) (finish-output (&optional c::stream-designator) null) (force-"
 "output (&optional c::stream-designator) null) (clear-output (&optional c::stream"
 "-designator) null) (y-or-n-p (&optional c::format-control &rest t) c::gen-bool) "
 "(yes-or-no-p (&optional c::format-control &rest t) c::gen-bool) (make-synonym-st"
 "ream (symbol) synonym-stream) (synonym-stream-symbol (synonym-stream) symbol) (b"
 "roadcast-stream-streams (broadcast-stream) list :pure) (make-broadcast-stream (&"
 "rest stream) broadcast-stream) (make-two-way-stream (stream stream) two-way-stre"
 "am) (two-way-stream-input-stream (two-way-stream) stream :pure) (two-way-stream-"
 "output-stream (two-way-stream) stream :pure) (echo-stream-output-stream (echo-st"
 "ream) stream :pure) (echo-stream-input-stream (echo-stream) stream :pure) (make-"
 "echo-stream (stream stream) echo-stream) (concatenated-stream-streams (concatena"
 "ted-stream) list :reader) (make-concatenated-stream (&rest stream) concatenated-"
 "stream) (get-output-stream-string (string-stream) string :reader) (make-string-i"
 "nput-stream (string &optional ext::array-index (or ext::array-index null)) strin"
 "g-stream :reader) (make-string-output-stream (&key) string-stream :reader) (si::"
 "make-string-output-stream-from-string (string) string-stream :reader) (si::open-"
 "client-stream (t unsigned-byte) stream) (si::open-server-stream (unsigned-byte) "
 "stream) (si::open-unix-socket-stream (string) stream) (si::lookup-host-entry (t)"
 " (values (or null string) list list)) (si::copy-stream (stream stream c::gen-boo"
 "l) t) (ext::make-encoding (t) hash-table) (ext::load-encoding (t) t) (copy-pprin"
 "t-dispatch (&optional (or si::pprint-dispatch-table null)) si::pprint-dispatch-t"
 "able :no-side-effects) (pprint-dispatch (t &optional (or si::pprint-dispatch-tab"
 "le null)) (values c::function-designator c::gen-bool)) (pprint-fill (c::stream-d"
 "esignator t &optional c::gen-bool c::gen-bool) null) (pprint-linear (c::stream-d"
 "esignator t &optional c::gen-bool c::gen-bool) null) (pprint-tabular (c::stream-"
 "designator t &optional c::gen-bool c::gen-bool unsigned-byte) null) (pprint-inde"
 "nt ((member :block :current) real &optional c::stream-designator) null) (pprint-"
 "newline ((member :linear :fill :miser :mandatory) &optional c::stream-designator"
 ") null) (pprint-tab ((member :line :section :line-relative :section-relative) un"
 "signed-byte unsigned-byte &optional c::stream-designator) null) (set-pprint-disp"
 "atch (c::type-specifier (or c::function-designator null) &optional real si::ppri"
 "nt-dispatch-table) null) (write (t &key) t) (prin1 (t &optional c::stream-design"
 "ator) t) (princ (t &optional c::stream-designator) t) (print (t &optional c::str"
 "eam-designator) t) (pprint (t &optional c::stream-designator) (values)) (write-t"
 "o-string (t &key) string) (prin1-to-string (t) string) (princ-to-string (t) stri"
 "ng) (format ((or c::stream-designator string) c::format-control &rest t) (or nul"
 "l string)) (si::pprint-logical-block-helper (t t t string c::gen-bool string) t)"
 " (si::pprint-pop-helper (t t stream) t) (si::format-princ (c::stream-designator "
 "t c::gen-bool c::gen-bool t t integer character) t) (si::format-prin1 (c::stream"
 "-designator t c::gen-bool c::gen-bool t t integer character) t) (si::format-prin"
 "t-named-character (character c::stream-designator) t) (si::format-print-integer "
 "(c::stream-designator t c::gen-bool c::gen-bool c::radix t character character i"
 "nteger) t) (si::format-print-cardinal (c::stream-designator number) t) (si::form"
 "at-print-ordinal (c::stream-designator number) t) (si::format-print-old-roman (c"
 "::stream-designator number) t) (si::format-print-roman (c::stream-designator num"
 "ber) t) (si::format-fixed (c::stream-designator t t t integer t character c::gen"
 "-bool) t) (si::format-exponential (c::stream-designator t t t t integer t charac"
 "ter t c::gen-bool) t) (si::format-general (c::stream-designator t t t t integer "
 "t character t c::gen-bool) t) (si::format-dollars (c::stream-designator t intege"
 "r integer integer character c::gen-bool c::gen-bool) t) (si::format-relative-tab"
 " (c::stream-designator integer integer) t) (si::format-absolute-tab (c::stream-d"
 "esignator integer integer) t) (si::format-justification (c::stream-designator (o"
 "r string null) integer integer list c::gen-bool c::gen-bool integer integer inte"
 "ger character) t) (copy-readtable (&optional c::readtable-designator (or readtab"
 "le null)) readtable :no-side-effects) (make-dispatch-macro-character (character "
 "&optional c::gen-bool readtable) (member t)) (read (&optional c::stream-designat"
 "or c::gen-bool t c::gen-bool) t) (read-preserving-whitespace (&optional c::strea"
 "m-designator c::gen-bool t c::gen-bool) t) (read-delimited-list (character &opti"
 "onal c::stream-designator c::gen-bool) list) (read-from-string (string &optional"
 " c::gen-bool t &key) (values t ext::array-index)) (readtable-case (readtable) (m"
 "ember :upcase :downcase :preserve :invert) :reader) (readtablep (t) c::gen-bool "
 ":pure) (get-dispatch-macro-character (character character &optional c::readtable"
 "-designator) (or c::function-designator null) :reader) (set-dispatch-macro-chara"
 "cter (character character c::function-designator &optional c::readtable-designat"
 "or) (member t)) (get-macro-character (character &optional c::readtable-designato"
 "r) (values (or c::function-designator null) c::gen-bool) :reader) (set-macro-cha"
 "racter (character c::function-designator &optional c::gen-bool c::readtable-desi"
 "gnator) (member t)) (set-syntax-from-char (character character &optional readtab"
 "le c::readtable-designator) (member t)) (si::string-to-object (string &optional "
 "t) t) (si::standard-readtable nil readtable) (compile-file (c::pathname-designat"
 "or &key) (values (or pathname null) c::gen-bool c::gen-bool)) (compile-file-path"
 "name (c::pathname-designator &key) pathname :no-side-effects) (load ((or stream "
 "c::pathname-designator) &key) c::gen-bool) (provide (c::string-designator) t) (r"
 "equire (c::string-designator &optional list) t) (si::clear-compiler-properties ("
 "symbol) t) (decode-universal-time (c::universal-time &optional c::time-zone) (va"
 "lues (integer 0 59) (integer 0 59) (integer 0 23) (integer 1 31) (integer 1 12) "
 "unsigned-byte (integer 0 6) c::gen-bool c::time-zone) :pure) (encode-universal-t"
 "ime ((integer 0 59) (integer 0 59) (integer 0 23) (integer 1 31) (integer 1 12) "
 "unsigned-byte &optional c::time-zone) c::universal-time :pure) (get-universal-ti"
 "me nil c::universal-time :no-side-effects) (get-decoded-time nil (values (intege"
 "r 0 59) (integer 0 59) (integer 0 23) (integer 1 31) (integer 1 12) unsigned-byt"
 "e (integer 0 6) c::gen-bool c::time-zone) :no-side-effects) (sleep ((real 0 *)) "
 "null) (apropos (c::string-designator &optional (or null c::package-designator)) "
 "(values)) (apropos-list (c::string-designator &optional (or null c::package-desi"
 "gnator)) list) (describe (t &optional c::stream-designator) (values)) (get-inter"
 "nal-real-time nil unsigned-byte :no-side-effects) (get-internal-run-time nil uns"
 "igned-byte :no-side-effects) (disassemble ((or c::function-designator list)) nul"
 "l) (room (&optional (member t nil :default)) (values &rest t)) (ed (&optional (o"
 "r null pathname string c::function-name)) (values &rest t)) (inspect (t) (values"
 " &rest t)) (dribble (&optional c::pathname-designator) (values &rest t)) (lisp-i"
 "mplementation-type nil (or string null) :pure) (lisp-implementation-version nil "
 "(or string null) :pure) (short-site-name nil (or string null) :pure) (long-site-"
 "name nil (or string null) :pure) (machine-instance nil (or string null) :pure) ("
 "machine-type nil (or string null) :pure) (machine-version nil (or string null) :"
 "pure) (software-type nil (or string null) :pure) (software-version nil (or strin"
 "g null) :pure) (user-homedir-pathname (&optional pathname-host) (or pathname nul"
 "l) :no-side-effects) (ext::lisp-implementation-vcs-id nil string :pure) (si::roo"
 "m-report nil (values t t t t t t t t)) (si::reset-gbc-count nil t) (ext::gc (&op"
 "tional c::gen-bool) t) (ext::quit (&optional fixnum) t) (ext::argc nil c::sequen"
 "ce-index) (ext::argv (unsigned-byte) base-string) (ext::getenv (string) (or null"
 " string)) (ext::environ nil list) (ext::system (string) fixnum) (ext::getpid nil"
 " si::index) (ext::make-pipe nil (or two-way-stream null)) (ext::run-program (str"
 "ing list &key) (values (or null two-way-stream) (or null integer) ext::external-"
 "process)) (ext::file-stream-fd (stream) fixnum) (ext::make-stream-from-fd (fixnu"
 "m keyword &key) stream) (si::waitpid (fixnum c::gen-bool) (values (or null keywo"
 "rd) (or null fixnum) (or null fixnum))) (si::killpid (fixnum fixnum) fixnum) (si"
 "::run-program-inner (string (or list string) list c::gen-bool) (values file-stre"
 "am integer)) (si::spawn-subprocess (string (or list string) list t t t) (values "
 "(or null integer) fixnum fixnum fixnum)) (ext::terminate-process (t &optional c:"
 ":gen-bool) null) (ext::make-weak-pointer (t) ext::weak-pointer :no-side-effects)"
 " (ext::weak-pointer-value (ext::weak-pointer) t) (si::unbound nil t :pure) (si::"
 "traced-old-definition (t) t :no-side-effects) (si::expand-set-documentation (t t"
 " t) t) (si::set-documentation (t t t) t) (si::get-documentation (t t) t) (si::al"
 "locate-raw-instance (t t fixnum) ext::instance) (clos::safe-instance-ref (t fixn"
 "um) t) (si::instance-ref (t fixnum) t :reader) (si::instance-slotds (standard-ob"
 "ject) list :reader) (si::instance-set (t fixnum t) t) (si::instance-class (t) cl"
 "ass :reader) (si::instance-class-set (t t) t) (si::instancep (t) t :pure) (si::s"
 "l-boundp (t) t :reader) (si::sl-makunbound (t fixnum) t) (clos::standard-instanc"
 "e-access (standard-object t) t :reader) (clos::funcallable-standard-instance-acc"
 "ess (clos::funcallable-standard-object t) t :reader) (clos::associate-methods-to"
 "-gfun (c::function-name *) generic-function) (si::need-to-make-load-form-p (t) c"
 "::gen-bool :pure) (clos::load-defclass (t t t t) t) (mp::compare-and-swap-instan"
 "ce (t fixnum t t) t) (mp::atomic-incf-instance (t fixnum fixnum) fixnum) (si::po"
 "inter (t) unsigned-byte) (si::foreign-data-p (t) c::gen-bool :pure) (mp::all-pro"
 "cesses nil list :no-side-effects) (mp::exit-process nil t) (mp::interrupt-proces"
 "s (mp::process t) c::gen-bool) (mp::make-process (&key) mp::process :no-side-eff"
 "ects) (mp::process-active-p (mp::process) c::gen-bool :reader) (mp::process-enab"
 "le (mp::process) t) (mp::process-yield nil t) (mp::process-join (mp::process) (v"
 "alues &rest t)) (mp::process-kill (mp::process) c::gen-bool) (mp::process-suspen"
 "d (mp::process) c::gen-bool) (mp::process-resume (mp::process) c::gen-bool) (mp:"
 ":process-name (mp::process) t :reader) (mp::process-preset (mp::process t &rest "
 "t) mp::process) (mp::process-run-function (t t &rest t) t) (mp::block-signals ni"
 "l t) (mp::restore-signals (t) t) (mp::make-lock (&key) mp::lock :no-side-effects"
 ") (mp::recursive-lock-p (mp::lock) c::gen-bool :reader) (mp::holding-lock-p (mp:"
 ":lock) c::gen-bool) (mp::lock-name (mp::lock) t :reader) (mp::lock-owner (mp::lo"
 "ck) t :reader) (mp::lock-count (mp::lock) fixnum :reader) (mp::get-lock (mp::loc"
 "k &optional c::gen-bool) c::gen-bool) (mp::giveup-lock (mp::lock) (eql t)) (mp::"
 "make-rwlock (&key) mp::rwlock :no-side-effects) (mp::rwlock-name (mp::rwlock) t "
 ":reader) (mp::get-rwlock-read (mp::rwlock &optional c::gen-bool) c::gen-bool) (m"
 "p::get-rwlock-write (mp::rwlock &optional c::gen-bool) c::gen-bool) (mp::giveup-"
 "rwlock-read (mp::rwlock) (eql t)) (mp::giveup-rwlock-write (mp::rwlock) (eql t))"
 " (mp::make-condition-variable nil mp::condition-variable :no-side-effects) (mp::"
 "condition-variable-wait (mp::condition-variable mp::lock) (eql t)) (mp::conditio"
 "n-variable-signal (mp::condition-variable) (eql t)) (mp::condition-variable-broa"
 "dcast (mp::condition-variable) (eql t)) (mp::make-semaphore (&key) mp::semaphore"
 " :no-side-effects) (mp::semaphore-name (mp::semaphore) t :reader) (mp::semaphore"
 "-count (mp::semaphore) fixnum :reader) (mp::semaphore-wait-count (mp::semaphore)"
 " c::natural :reader) (mp::wait-on-semaphore (mp::semaphore) fixnum) (mp::try-get"
 "-semaphore (mp::semaphore) t) (mp::signal-semaphore (mp::semaphore &optional fix"
 "num) t) (ext::negative-fixnum-p (t) c::gen-bool :pure) (ext::non-negative-fixnum"
 "-p (t) c::gen-bool :pure) (ext::non-positive-fixnum-p (t) c::gen-bool :pure) (ex"
 "t::positive-fixnum-p (t) c::gen-bool :pure) (ext::array-index-p (t) c::gen-bool "
 ":pure) (ext::negative-integer-p (t) c::gen-bool :pure) (ext::non-negative-intege"
 "r-p (t) c::gen-bool :pure) (ext::non-positive-integer-p (t) c::gen-bool :pure) ("
 "ext::positive-integer-p (t) c::gen-bool :pure) (ext::negative-rational-p (t) c::"
 "gen-bool :pure) (ext::non-negative-rational-p (t) c::gen-bool :pure) (ext::non-p"
 "ositive-rational-p (t) c::gen-bool :pure) (ext::positive-rational-p (t) c::gen-b"
 "ool :pure) (ext::negative-ratio-p (t) c::gen-bool :pure) (ext::non-negative-rati"
 "o-p (t) c::gen-bool :pure) (ext::non-positive-ratio-p (t) c::gen-bool :pure) (ex"
 "t::positive-ratio-p (t) c::gen-bool :pure) (ext::negative-real-p (t) c::gen-bool"
 " :pure) (ext::non-negative-real-p (t) c::gen-bool :pure) (ext::non-positive-real"
 "-p (t) c::gen-bool :pure) (ext::positive-real-p (t) c::gen-bool :pure) (ext::neg"
 "ative-float-p (t) c::gen-bool :pure) (ext::non-negative-float-p (t) c::gen-bool "
 ":pure) (ext::non-positive-float-p (t) c::gen-bool :pure) (ext::positive-float-p "
 "(t) c::gen-bool :pure) (ext::negative-short-float-p (t) c::gen-bool :pure) (ext:"
 ":non-negative-short-float-p (t) c::gen-bool :pure) (ext::non-positive-short-floa"
 "t-p (t) c::gen-bool :pure) (ext::positive-short-float-p (t) c::gen-bool :pure) ("
 "ext::negative-single-float-p (t) c::gen-bool :pure) (ext::non-negative-single-fl"
 "oat-p (t) c::gen-bool :pure) (ext::non-positive-single-float-p (t) c::gen-bool :"
 "pure) (ext::positive-single-float-p (t) c::gen-bool :pure) (ext::negative-double"
 "-float-p (t) c::gen-bool :pure) (ext::non-negative-double-float-p (t) c::gen-boo"
 "l :pure) (ext::non-positive-double-float-p (t) c::gen-bool :pure) (ext::positive"
 "-double-float-p (t) c::gen-bool :pure) (ext::negative-long-float-p (t) c::gen-bo"
 "ol :pure) (ext::non-negative-long-float-p (t) c::gen-bool :pure) (ext::non-posit"
 "ive-long-float-p (t) c::gen-bool :pure) (ext::positive-long-float-p (t) c::gen-b"
 "ool :pure))" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
