static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)2240, (cl_index)2240,
        (ecl_base_char*)
"c::*permanent-objects* c::data-permanent-storage-size c::*temporary-objects* c::"
 "data-temporary-storage-size c::data-size c::data-init c::*load-objects* c::data-"
 "get-all-objects \"\" c::*wt-string-size* c::data-dump-array \"static const struct e"
 "cl_base_string ~A[] = {\n        (int8_t)t_base_string, 0, ecl_aet_bc, 0,\n       "
 " ECL_NIL, (cl_index)~D, (cl_index)~D,\n        (ecl_base_char*)~A };~%\" \"~%static"
 " const cl_object compiler_data_text[] = {~{~%(cl_object)~A,~}~%NULL};\" \"compiler"
 "_data_text~D\" \"#define compiler_data_text NULL\" c::data-c-dump :duplicate :perma"
 "nent c::data-empty-loc c::*compiler-phase* c::t1 \"Unable to internalize complex "
 "object ~A in ~a phase.\" c::*objects-being-created* c::*objects-init-deferred* c:"
 ":*make-forms* c::make-form :args c::circular-dependency c::init-form c::add-load"
 "-form c::*permanent-data* c::vv :permanent-p :form c::add-object c::add-symbol c"
 "::add-keywords \"ecl_def_ct_base_string(~A,\" :one-liner \",~D,static,const);\" c::s"
 "tatic-base-string-builder \"ecl_def_ct_single_float(~A,~S,static,const);\" c::stat"
 "ic-single-float-builder \"ecl_def_ct_double_float(~A,~S,static,const);\" c::static"
 "-double-float-builder \"ecl_def_ct_long_float(~A,~SL,static,const);\" c::static-lo"
 "ng-float-builder \"ecl_def_ct_ratio(~A,ecl_make_fixnum(~D),ecl_make_fixnum(~D),st"
 "atic,const);\" c::static-rational-builder c::static-constant-delegate \"_real\" \"_i"
 "mag\" \"ecl_def_ct_complex(~A,&~A_data,&~A_data,static,const);\" c::static-complex-"
 "builder \"ecl_def_ct_csfloat(~A,(~S + I*~S),static,const);\" c::static-csfloat-bui"
 "lder \"ecl_def_ct_cdfloat(~A,(~S + I*~S),static,const);\" c::static-cdfloat-builde"
 "r \"ecl_def_ct_clfloat(~A,(~SL + I*~SL),static,const);\" c::static-clfloat-builder"
 " c::static-constant-builder c::static-constant-expression c::*use-static-constan"
 "ts-p* c::*static-constants* \"_ecl_static_~D\" c::add-static-constant \"VV[\" \"]\" \"V"
 "Vtemp[\" c::wt-vv-index \"= \" \";\" c::set-vv-index c::wt-vv c::set-vv c::vv-type 0 "
 "0 0 0 0 c::vv-used-p 0 0 c::wt-filtered-data 0 0 c::cmperr c::c1expr c::make-c1f"
 "orm* 0 :duplicate :used-p :permanent si::make-seq-iterator si::seq-iterator-ref "
 "si::seq-iterator-next c::make-vv 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 c::wt 0 c::wt-n"
 "l c::wt-coerce-loc 0 c::vv-location c::vv-permanent-p 0 0 c::vv-value \"COMPILER\"" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
