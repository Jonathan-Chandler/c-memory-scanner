static const struct ecl_base_string compiler_data_text1[] = {
        (int8_t)t_base_string, 0, ecl_aet_bc, 0,
        ECL_NIL, (cl_index)1796, (cl_index)1796,
        (ecl_base_char*)
"\"TYPEP form contains an empty type ~S and cannot be optimized\" si::type-predicat"
 "e si::+known-typep-predicates+ (or list symbol) si::deftype-definition 0 0 :read"
 "-only (integer rational float real single-float double-float long-float) (declar"
 "e (optimize (speed 3) (safety 0) (space 0))) c::expand-typep c::+coercion-table+"
 " \"Cannot COERCE an expression to an empty type.\" c::x si::coerce-to-list si::coe"
 "rce-to-vector (c::x) c::y (declare (:read-only c::y)) (realpart c::y) (imagpart "
 "c::y) (nil \"coerced value\") c::value (declare (:read-only c::value)) (c::value) "
 "(:object) \"ecl_to_double(#0)\" \"ecl_to_float(#0)\" \"ecl_to_long_double(#0)\" (:doub"
 "le :float :long-double) (:one-liner t :side-effects nil) si::dm-too-many-argumen"
 "ts 0 c::cmp-env-search-var c::var-type c::cmpwarn si::type= c::policy-inline-typ"
 "e-checks si::dm-too-few-arguments c::policy-assume-no-errors c::cmperror si::clo"
 "sest-sequence-type c::policy-assume-right-type c::constant-value-p c::lisp-type-"
 ">rep-type \"COMPILER\" ((integer let ((c::y c::x)) (check-type c::y integer) c::y)"
 " (float float c::x) (short-float float c::x #1=0.0) (single-float float c::x #1#"
 ") (double-float float c::x #2=0.0d0) (long-float float c::x #3=0.0l0) (si::compl"
 "ex-single-float let ((c::y c::x)) (declare (:read-only c::y)) (complex (float (r"
 "ealpart c::y) #1#) (float (imagpart c::y) #1#))) (si::complex-double-float let ("
 "(c::y c::x)) (declare (:read-only c::y)) (complex (float (realpart c::y) #2#) (f"
 "loat (imagpart c::y) #2#))) (si::complex-long-float let ((c::y c::x)) (declare ("
 ":read-only c::y)) (complex (float (realpart c::y) #3#) (float (imagpart c::y) #3"
 "#))) (complex let ((c::y c::x)) (declare (:read-only c::y)) (complex (realpart c"
 "::y) (imagpart c::y))) (base-char character c::x) (character character c::x) (fu"
 "nction si::coerce-to-function c::x))" };

static const cl_object compiler_data_text[] = {
(cl_object)compiler_data_text1,
NULL};
